var Ia = Object.defineProperty;
var Sa = (t, e, n) => e in t ? Ia(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var Pe = (t, e, n) => Sa(t, typeof e != "symbol" ? e + "" : e, n);
import La from "uglify-js";
var Bi = (t) => {
  throw TypeError(t);
}, Vi = (t, e, n) => e.has(t) || Bi("Cannot " + n), ka = (t, e, n) => (Vi(t, e, "read from private field"), n ? n.call(t) : e.get(t)), Ur = (t, e, n) => e.has(t) ? Bi("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, n), Dr = (t, e, n) => (Vi(t, e, "access private method"), n), Ki = typeof global == "object" && global && global.Object === Object && global, Ca = typeof self == "object" && self && self.Object === Object && self, Oe = Ki || Ca || Function("return this")(), ce = Oe.Symbol, Hi = Object.prototype, ba = Hi.hasOwnProperty, Na = Hi.toString, mt = ce ? ce.toStringTag : void 0;
function Ma(t) {
  var e = ba.call(t, mt), n = t[mt];
  try {
    t[mt] = void 0;
    var r = !0;
  } catch {
  }
  var i = Na.call(t);
  return r && (e ? t[mt] = n : delete t[mt]), i;
}
var Pa = Object.prototype, xa = Pa.toString;
function wa(t) {
  return xa.call(t);
}
var Ua = "[object Null]", Da = "[object Undefined]", Fr = ce ? ce.toStringTag : void 0;
function Ve(t) {
  return t == null ? t === void 0 ? Da : Ua : Fr && Fr in Object(t) ? Ma(t) : wa(t);
}
function de(t) {
  return t != null && typeof t == "object";
}
var Fa = "[object Symbol]";
function cn(t) {
  return typeof t == "symbol" || de(t) && Ve(t) == Fa;
}
function un(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length, i = Array(r); ++n < r; )
    i[n] = e(t[n], n, t);
  return i;
}
var N = Array.isArray, $r = ce ? ce.prototype : void 0, jr = $r ? $r.toString : void 0;
function Wi(t) {
  if (typeof t == "string")
    return t;
  if (N(t))
    return un(t, Wi) + "";
  if (cn(t))
    return jr ? jr.call(t) : "";
  var e = t + "";
  return e == "0" && 1 / t == -1 / 0 ? "-0" : e;
}
var $a = /\s/;
function ja(t) {
  for (var e = t.length; e-- && $a.test(t.charAt(e)); )
    ;
  return e;
}
var Ga = /^\s+/;
function Ba(t) {
  return t && t.slice(0, ja(t) + 1).replace(Ga, "");
}
function ue(t) {
  var e = typeof t;
  return t != null && (e == "object" || e == "function");
}
var Gr = NaN, Va = /^[-+]0x[0-9a-f]+$/i, Ka = /^0b[01]+$/i, Ha = /^0o[0-7]+$/i, Wa = parseInt;
function za(t) {
  if (typeof t == "number")
    return t;
  if (cn(t))
    return Gr;
  if (ue(t)) {
    var e = typeof t.valueOf == "function" ? t.valueOf() : t;
    t = ue(e) ? e + "" : e;
  }
  if (typeof t != "string")
    return t === 0 ? t : +t;
  t = Ba(t);
  var n = Ka.test(t);
  return n || Ha.test(t) ? Wa(t.slice(2), n ? 2 : 8) : Va.test(t) ? Gr : +t;
}
var Ya = 1 / 0, Xa = 17976931348623157e292;
function qa(t) {
  if (!t)
    return t === 0 ? t : 0;
  if (t = za(t), t === Ya || t === -1 / 0) {
    var e = t < 0 ? -1 : 1;
    return e * Xa;
  }
  return t === t ? t : 0;
}
function ln(t) {
  var e = qa(t), n = e % 1;
  return e === e ? n ? e - n : e : 0;
}
function ct(t) {
  return t;
}
var Qa = "[object AsyncFunction]", Za = "[object Function]", Ja = "[object GeneratorFunction]", eo = "[object Proxy]";
function De(t) {
  if (!ue(t))
    return !1;
  var e = Ve(t);
  return e == Za || e == Ja || e == Qa || e == eo;
}
var Ln = Oe["__core-js_shared__"], Br = function() {
  var t = /[^.]+$/.exec(Ln && Ln.keys && Ln.keys.IE_PROTO || "");
  return t ? "Symbol(src)_1." + t : "";
}();
function to(t) {
  return !!Br && Br in t;
}
var no = Function.prototype, ro = no.toString;
function et(t) {
  if (t != null) {
    try {
      return ro.call(t);
    } catch {
    }
    try {
      return t + "";
    } catch {
    }
  }
  return "";
}
var io = /[\\^$.*+?()[\]{}|]/g, so = /^\[object .+?Constructor\]$/, ao = Function.prototype, oo = Object.prototype, co = ao.toString, uo = oo.hasOwnProperty, lo = RegExp(
  "^" + co.call(uo).replace(io, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function ho(t) {
  if (!ue(t) || to(t))
    return !1;
  var e = De(t) ? lo : so;
  return e.test(et(t));
}
function fo(t, e) {
  return t == null ? void 0 : t[e];
}
function tt(t, e) {
  var n = fo(t, e);
  return ho(n) ? n : void 0;
}
var $n = tt(Oe, "WeakMap"), Vr = Object.create, po = /* @__PURE__ */ function() {
  function t() {
  }
  return function(e) {
    if (!ue(e))
      return {};
    if (Vr)
      return Vr(e);
    t.prototype = e;
    var n = new t();
    return t.prototype = void 0, n;
  };
}();
function mo(t, e, n) {
  switch (n.length) {
    case 0:
      return t.call(e);
    case 1:
      return t.call(e, n[0]);
    case 2:
      return t.call(e, n[0], n[1]);
    case 3:
      return t.call(e, n[0], n[1], n[2]);
  }
  return t.apply(e, n);
}
function B() {
}
function go(t, e) {
  var n = -1, r = t.length;
  for (e || (e = Array(r)); ++n < r; )
    e[n] = t[n];
  return e;
}
var Eo = 800, To = 16, yo = Date.now;
function Ao(t) {
  var e = 0, n = 0;
  return function() {
    var r = yo(), i = To - (r - n);
    if (n = r, i > 0) {
      if (++e >= Eo)
        return arguments[0];
    } else
      e = 0;
    return t.apply(void 0, arguments);
  };
}
function _o(t) {
  return function() {
    return t;
  };
}
var qt = function() {
  try {
    var t = tt(Object, "defineProperty");
    return t({}, "", {}), t;
  } catch {
  }
}(), vo = qt ? function(t, e) {
  return qt(t, "toString", {
    configurable: !0,
    enumerable: !1,
    value: _o(e),
    writable: !0
  });
} : ct, Ro = Ao(vo);
function zi(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length; ++n < r && e(t[n], n, t) !== !1; )
    ;
  return t;
}
function Yi(t, e, n, r) {
  for (var i = t.length, s = n + -1; ++s < i; )
    if (e(t[s], s, t))
      return s;
  return -1;
}
function Oo(t) {
  return t !== t;
}
function Io(t, e, n) {
  for (var r = n - 1, i = t.length; ++r < i; )
    if (t[r] === e)
      return r;
  return -1;
}
function or(t, e, n) {
  return e === e ? Io(t, e, n) : Yi(t, Oo, n);
}
function Xi(t, e) {
  var n = t == null ? 0 : t.length;
  return !!n && or(t, e, 0) > -1;
}
var So = 9007199254740991, Lo = /^(?:0|[1-9]\d*)$/;
function hn(t, e) {
  var n = typeof t;
  return e = e ?? So, !!e && (n == "number" || n != "symbol" && Lo.test(t)) && t > -1 && t % 1 == 0 && t < e;
}
function cr(t, e, n) {
  e == "__proto__" && qt ? qt(t, e, {
    configurable: !0,
    enumerable: !0,
    value: n,
    writable: !0
  }) : t[e] = n;
}
function Lt(t, e) {
  return t === e || t !== t && e !== e;
}
var ko = Object.prototype, Co = ko.hasOwnProperty;
function fn(t, e, n) {
  var r = t[e];
  (!(Co.call(t, e) && Lt(r, n)) || n === void 0 && !(e in t)) && cr(t, e, n);
}
function ur(t, e, n, r) {
  var i = !n;
  n || (n = {});
  for (var s = -1, a = e.length; ++s < a; ) {
    var o = e[s], c = void 0;
    c === void 0 && (c = t[o]), i ? cr(n, o, c) : fn(n, o, c);
  }
  return n;
}
var Kr = Math.max;
function bo(t, e, n) {
  return e = Kr(e === void 0 ? t.length - 1 : e, 0), function() {
    for (var r = arguments, i = -1, s = Kr(r.length - e, 0), a = Array(s); ++i < s; )
      a[i] = r[e + i];
    i = -1;
    for (var o = Array(e + 1); ++i < e; )
      o[i] = r[i];
    return o[e] = n(a), mo(t, this, o);
  };
}
function lr(t, e) {
  return Ro(bo(t, e, ct), t + "");
}
var No = 9007199254740991;
function hr(t) {
  return typeof t == "number" && t > -1 && t % 1 == 0 && t <= No;
}
function Ie(t) {
  return t != null && hr(t.length) && !De(t);
}
function qi(t, e, n) {
  if (!ue(n))
    return !1;
  var r = typeof e;
  return (r == "number" ? Ie(n) && hn(e, n.length) : r == "string" && e in n) ? Lt(n[e], t) : !1;
}
function Mo(t) {
  return lr(function(e, n) {
    var r = -1, i = n.length, s = i > 1 ? n[i - 1] : void 0, a = i > 2 ? n[2] : void 0;
    for (s = t.length > 3 && typeof s == "function" ? (i--, s) : void 0, a && qi(n[0], n[1], a) && (s = i < 3 ? void 0 : s, i = 1), e = Object(e); ++r < i; ) {
      var o = n[r];
      o && t(e, o, r, s);
    }
    return e;
  });
}
var Po = Object.prototype;
function kt(t) {
  var e = t && t.constructor, n = typeof e == "function" && e.prototype || Po;
  return t === n;
}
function xo(t, e) {
  for (var n = -1, r = Array(t); ++n < t; )
    r[n] = e(n);
  return r;
}
var wo = "[object Arguments]";
function Hr(t) {
  return de(t) && Ve(t) == wo;
}
var Qi = Object.prototype, Uo = Qi.hasOwnProperty, Do = Qi.propertyIsEnumerable, pn = Hr(/* @__PURE__ */ function() {
  return arguments;
}()) ? Hr : function(t) {
  return de(t) && Uo.call(t, "callee") && !Do.call(t, "callee");
};
function Fo() {
  return !1;
}
var Zi = typeof exports == "object" && exports && !exports.nodeType && exports, Wr = Zi && typeof module == "object" && module && !module.nodeType && module, $o = Wr && Wr.exports === Zi, zr = $o ? Oe.Buffer : void 0, jo = zr ? zr.isBuffer : void 0, Rt = jo || Fo, Go = "[object Arguments]", Bo = "[object Array]", Vo = "[object Boolean]", Ko = "[object Date]", Ho = "[object Error]", Wo = "[object Function]", zo = "[object Map]", Yo = "[object Number]", Xo = "[object Object]", qo = "[object RegExp]", Qo = "[object Set]", Zo = "[object String]", Jo = "[object WeakMap]", ec = "[object ArrayBuffer]", tc = "[object DataView]", nc = "[object Float32Array]", rc = "[object Float64Array]", ic = "[object Int8Array]", sc = "[object Int16Array]", ac = "[object Int32Array]", oc = "[object Uint8Array]", cc = "[object Uint8ClampedArray]", uc = "[object Uint16Array]", lc = "[object Uint32Array]", U = {};
U[nc] = U[rc] = U[ic] = U[sc] = U[ac] = U[oc] = U[cc] = U[uc] = U[lc] = !0;
U[Go] = U[Bo] = U[ec] = U[Vo] = U[tc] = U[Ko] = U[Ho] = U[Wo] = U[zo] = U[Yo] = U[Xo] = U[qo] = U[Qo] = U[Zo] = U[Jo] = !1;
function hc(t) {
  return de(t) && hr(t.length) && !!U[Ve(t)];
}
function dn(t) {
  return function(e) {
    return t(e);
  };
}
var Ji = typeof exports == "object" && exports && !exports.nodeType && exports, _t = Ji && typeof module == "object" && module && !module.nodeType && module, fc = _t && _t.exports === Ji, kn = fc && Ki.process, Ge = function() {
  try {
    var t = _t && _t.require && _t.require("util").types;
    return t || kn && kn.binding && kn.binding("util");
  } catch {
  }
}(), Yr = Ge && Ge.isTypedArray, fr = Yr ? dn(Yr) : hc, pc = Object.prototype, dc = pc.hasOwnProperty;
function es(t, e) {
  var n = N(t), r = !n && pn(t), i = !n && !r && Rt(t), s = !n && !r && !i && fr(t), a = n || r || i || s, o = a ? xo(t.length, String) : [], c = o.length;
  for (var u in t)
    (e || dc.call(t, u)) && !(a && // Safari 9 has enumerable `arguments.length` in strict mode.
    (u == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    i && (u == "offset" || u == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    s && (u == "buffer" || u == "byteLength" || u == "byteOffset") || // Skip index properties.
    hn(u, c))) && o.push(u);
  return o;
}
function ts(t, e) {
  return function(n) {
    return t(e(n));
  };
}
var mc = ts(Object.keys, Object), gc = Object.prototype, Ec = gc.hasOwnProperty;
function ns(t) {
  if (!kt(t))
    return mc(t);
  var e = [];
  for (var n in Object(t))
    Ec.call(t, n) && n != "constructor" && e.push(n);
  return e;
}
function le(t) {
  return Ie(t) ? es(t) : ns(t);
}
var Tc = Object.prototype, yc = Tc.hasOwnProperty, te = Mo(function(t, e) {
  if (kt(e) || Ie(e)) {
    ur(e, le(e), t);
    return;
  }
  for (var n in e)
    yc.call(e, n) && fn(t, n, e[n]);
});
function Ac(t) {
  var e = [];
  if (t != null)
    for (var n in Object(t))
      e.push(n);
  return e;
}
var _c = Object.prototype, vc = _c.hasOwnProperty;
function Rc(t) {
  if (!ue(t))
    return Ac(t);
  var e = kt(t), n = [];
  for (var r in t)
    r == "constructor" && (e || !vc.call(t, r)) || n.push(r);
  return n;
}
function rs(t) {
  return Ie(t) ? es(t, !0) : Rc(t);
}
var Oc = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, Ic = /^\w*$/;
function pr(t, e) {
  if (N(t))
    return !1;
  var n = typeof t;
  return n == "number" || n == "symbol" || n == "boolean" || t == null || cn(t) ? !0 : Ic.test(t) || !Oc.test(t) || e != null && t in Object(e);
}
var Ot = tt(Object, "create");
function Sc() {
  this.__data__ = Ot ? Ot(null) : {}, this.size = 0;
}
function Lc(t) {
  var e = this.has(t) && delete this.__data__[t];
  return this.size -= e ? 1 : 0, e;
}
var kc = "__lodash_hash_undefined__", Cc = Object.prototype, bc = Cc.hasOwnProperty;
function Nc(t) {
  var e = this.__data__;
  if (Ot) {
    var n = e[t];
    return n === kc ? void 0 : n;
  }
  return bc.call(e, t) ? e[t] : void 0;
}
var Mc = Object.prototype, Pc = Mc.hasOwnProperty;
function xc(t) {
  var e = this.__data__;
  return Ot ? e[t] !== void 0 : Pc.call(e, t);
}
var wc = "__lodash_hash_undefined__";
function Uc(t, e) {
  var n = this.__data__;
  return this.size += this.has(t) ? 0 : 1, n[t] = Ot && e === void 0 ? wc : e, this;
}
function Qe(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.clear(); ++e < n; ) {
    var r = t[e];
    this.set(r[0], r[1]);
  }
}
Qe.prototype.clear = Sc;
Qe.prototype.delete = Lc;
Qe.prototype.get = Nc;
Qe.prototype.has = xc;
Qe.prototype.set = Uc;
function Dc() {
  this.__data__ = [], this.size = 0;
}
function mn(t, e) {
  for (var n = t.length; n--; )
    if (Lt(t[n][0], e))
      return n;
  return -1;
}
var Fc = Array.prototype, $c = Fc.splice;
function jc(t) {
  var e = this.__data__, n = mn(e, t);
  if (n < 0)
    return !1;
  var r = e.length - 1;
  return n == r ? e.pop() : $c.call(e, n, 1), --this.size, !0;
}
function Gc(t) {
  var e = this.__data__, n = mn(e, t);
  return n < 0 ? void 0 : e[n][1];
}
function Bc(t) {
  return mn(this.__data__, t) > -1;
}
function Vc(t, e) {
  var n = this.__data__, r = mn(n, t);
  return r < 0 ? (++this.size, n.push([t, e])) : n[r][1] = e, this;
}
function Fe(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.clear(); ++e < n; ) {
    var r = t[e];
    this.set(r[0], r[1]);
  }
}
Fe.prototype.clear = Dc;
Fe.prototype.delete = jc;
Fe.prototype.get = Gc;
Fe.prototype.has = Bc;
Fe.prototype.set = Vc;
var It = tt(Oe, "Map");
function Kc() {
  this.size = 0, this.__data__ = {
    hash: new Qe(),
    map: new (It || Fe)(),
    string: new Qe()
  };
}
function Hc(t) {
  var e = typeof t;
  return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? t !== "__proto__" : t === null;
}
function gn(t, e) {
  var n = t.__data__;
  return Hc(e) ? n[typeof e == "string" ? "string" : "hash"] : n.map;
}
function Wc(t) {
  var e = gn(this, t).delete(t);
  return this.size -= e ? 1 : 0, e;
}
function zc(t) {
  return gn(this, t).get(t);
}
function Yc(t) {
  return gn(this, t).has(t);
}
function Xc(t, e) {
  var n = gn(this, t), r = n.size;
  return n.set(t, e), this.size += n.size == r ? 0 : 1, this;
}
function $e(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.clear(); ++e < n; ) {
    var r = t[e];
    this.set(r[0], r[1]);
  }
}
$e.prototype.clear = Kc;
$e.prototype.delete = Wc;
$e.prototype.get = zc;
$e.prototype.has = Yc;
$e.prototype.set = Xc;
var qc = "Expected a function";
function dr(t, e) {
  if (typeof t != "function" || e != null && typeof e != "function")
    throw new TypeError(qc);
  var n = function() {
    var r = arguments, i = e ? e.apply(this, r) : r[0], s = n.cache;
    if (s.has(i))
      return s.get(i);
    var a = t.apply(this, r);
    return n.cache = s.set(i, a) || s, a;
  };
  return n.cache = new (dr.Cache || $e)(), n;
}
dr.Cache = $e;
var Qc = 500;
function Zc(t) {
  var e = dr(t, function(r) {
    return n.size === Qc && n.clear(), r;
  }), n = e.cache;
  return e;
}
var Jc = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, eu = /\\(\\)?/g, tu = Zc(function(t) {
  var e = [];
  return t.charCodeAt(0) === 46 && e.push(""), t.replace(Jc, function(n, r, i, s) {
    e.push(i ? s.replace(eu, "$1") : r || n);
  }), e;
});
function nu(t) {
  return t == null ? "" : Wi(t);
}
function En(t, e) {
  return N(t) ? t : pr(t, e) ? [t] : tu(nu(t));
}
function Ct(t) {
  if (typeof t == "string" || cn(t))
    return t;
  var e = t + "";
  return e == "0" && 1 / t == -1 / 0 ? "-0" : e;
}
function mr(t, e) {
  e = En(e, t);
  for (var n = 0, r = e.length; t != null && n < r; )
    t = t[Ct(e[n++])];
  return n && n == r ? t : void 0;
}
function ru(t, e, n) {
  var r = t == null ? void 0 : mr(t, e);
  return r === void 0 ? n : r;
}
function gr(t, e) {
  for (var n = -1, r = e.length, i = t.length; ++n < r; )
    t[i + n] = e[n];
  return t;
}
var Xr = ce ? ce.isConcatSpreadable : void 0;
function iu(t) {
  return N(t) || pn(t) || !!(Xr && t && t[Xr]);
}
function Er(t, e, n, r, i) {
  var s = -1, a = t.length;
  for (n || (n = iu), i || (i = []); ++s < a; ) {
    var o = t[s];
    n(o) ? gr(i, o) : r || (i[i.length] = o);
  }
  return i;
}
function fe(t) {
  var e = t == null ? 0 : t.length;
  return e ? Er(t) : [];
}
var is = ts(Object.getPrototypeOf, Object);
function ss(t, e, n) {
  var r = -1, i = t.length;
  e < 0 && (e = -e > i ? 0 : i + e), n = n > i ? i : n, n < 0 && (n += i), i = e > n ? 0 : n - e >>> 0, e >>>= 0;
  for (var s = Array(i); ++r < i; )
    s[r] = t[r + e];
  return s;
}
function su(t, e, n, r) {
  var i = -1, s = t == null ? 0 : t.length;
  for (r && s && (n = t[++i]); ++i < s; )
    n = e(n, t[i], i, t);
  return n;
}
function au() {
  this.__data__ = new Fe(), this.size = 0;
}
function ou(t) {
  var e = this.__data__, n = e.delete(t);
  return this.size = e.size, n;
}
function cu(t) {
  return this.__data__.get(t);
}
function uu(t) {
  return this.__data__.has(t);
}
var lu = 200;
function hu(t, e) {
  var n = this.__data__;
  if (n instanceof Fe) {
    var r = n.__data__;
    if (!It || r.length < lu - 1)
      return r.push([t, e]), this.size = ++n.size, this;
    n = this.__data__ = new $e(r);
  }
  return n.set(t, e), this.size = n.size, this;
}
function Re(t) {
  var e = this.__data__ = new Fe(t);
  this.size = e.size;
}
Re.prototype.clear = au;
Re.prototype.delete = ou;
Re.prototype.get = cu;
Re.prototype.has = uu;
Re.prototype.set = hu;
function fu(t, e) {
  return t && ur(e, le(e), t);
}
var as = typeof exports == "object" && exports && !exports.nodeType && exports, qr = as && typeof module == "object" && module && !module.nodeType && module, pu = qr && qr.exports === as, Qr = pu ? Oe.Buffer : void 0, Zr = Qr ? Qr.allocUnsafe : void 0;
function du(t, e) {
  var n = t.length, r = Zr ? Zr(n) : new t.constructor(n);
  return t.copy(r), r;
}
function Tr(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length, i = 0, s = []; ++n < r; ) {
    var a = t[n];
    e(a, n, t) && (s[i++] = a);
  }
  return s;
}
function os() {
  return [];
}
var mu = Object.prototype, gu = mu.propertyIsEnumerable, Jr = Object.getOwnPropertySymbols, yr = Jr ? function(t) {
  return t == null ? [] : (t = Object(t), Tr(Jr(t), function(e) {
    return gu.call(t, e);
  }));
} : os;
function Eu(t, e) {
  return ur(t, yr(t), e);
}
var Tu = Object.getOwnPropertySymbols, yu = Tu ? function(t) {
  for (var e = []; t; )
    gr(e, yr(t)), t = is(t);
  return e;
} : os;
function cs(t, e, n) {
  var r = e(t);
  return N(t) ? r : gr(r, n(t));
}
function jn(t) {
  return cs(t, le, yr);
}
function Au(t) {
  return cs(t, rs, yu);
}
var Gn = tt(Oe, "DataView"), Bn = tt(Oe, "Promise"), ot = tt(Oe, "Set"), ei = "[object Map]", _u = "[object Object]", ti = "[object Promise]", ni = "[object Set]", ri = "[object WeakMap]", ii = "[object DataView]", vu = et(Gn), Ru = et(It), Ou = et(Bn), Iu = et(ot), Su = et($n), ae = Ve;
(Gn && ae(new Gn(new ArrayBuffer(1))) != ii || It && ae(new It()) != ei || Bn && ae(Bn.resolve()) != ti || ot && ae(new ot()) != ni || $n && ae(new $n()) != ri) && (ae = function(t) {
  var e = Ve(t), n = e == _u ? t.constructor : void 0, r = n ? et(n) : "";
  if (r)
    switch (r) {
      case vu:
        return ii;
      case Ru:
        return ei;
      case Ou:
        return ti;
      case Iu:
        return ni;
      case Su:
        return ri;
    }
  return e;
});
var Lu = Object.prototype, ku = Lu.hasOwnProperty;
function Cu(t) {
  var e = t.length, n = new t.constructor(e);
  return e && typeof t[0] == "string" && ku.call(t, "index") && (n.index = t.index, n.input = t.input), n;
}
var Qt = Oe.Uint8Array;
function bu(t) {
  var e = new t.constructor(t.byteLength);
  return new Qt(e).set(new Qt(t)), e;
}
function Nu(t, e) {
  var n = t.buffer;
  return new t.constructor(n, t.byteOffset, t.byteLength);
}
var Mu = /\w*$/;
function Pu(t) {
  var e = new t.constructor(t.source, Mu.exec(t));
  return e.lastIndex = t.lastIndex, e;
}
var si = ce ? ce.prototype : void 0, ai = si ? si.valueOf : void 0;
function xu(t) {
  return ai ? Object(ai.call(t)) : {};
}
function wu(t, e) {
  var n = t.buffer;
  return new t.constructor(n, t.byteOffset, t.length);
}
var Uu = "[object Boolean]", Du = "[object Date]", Fu = "[object Map]", $u = "[object Number]", ju = "[object RegExp]", Gu = "[object Set]", Bu = "[object String]", Vu = "[object Symbol]", Ku = "[object ArrayBuffer]", Hu = "[object DataView]", Wu = "[object Float32Array]", zu = "[object Float64Array]", Yu = "[object Int8Array]", Xu = "[object Int16Array]", qu = "[object Int32Array]", Qu = "[object Uint8Array]", Zu = "[object Uint8ClampedArray]", Ju = "[object Uint16Array]", el = "[object Uint32Array]";
function tl(t, e, n) {
  var r = t.constructor;
  switch (e) {
    case Ku:
      return bu(t);
    case Uu:
    case Du:
      return new r(+t);
    case Hu:
      return Nu(t);
    case Wu:
    case zu:
    case Yu:
    case Xu:
    case qu:
    case Qu:
    case Zu:
    case Ju:
    case el:
      return wu(t);
    case Fu:
      return new r();
    case $u:
    case Bu:
      return new r(t);
    case ju:
      return Pu(t);
    case Gu:
      return new r();
    case Vu:
      return xu(t);
  }
}
function nl(t) {
  return typeof t.constructor == "function" && !kt(t) ? po(is(t)) : {};
}
var rl = "[object Map]";
function il(t) {
  return de(t) && ae(t) == rl;
}
var oi = Ge && Ge.isMap, sl = oi ? dn(oi) : il, al = "[object Set]";
function ol(t) {
  return de(t) && ae(t) == al;
}
var ci = Ge && Ge.isSet, cl = ci ? dn(ci) : ol, us = "[object Arguments]", ul = "[object Array]", ll = "[object Boolean]", hl = "[object Date]", fl = "[object Error]", ls = "[object Function]", pl = "[object GeneratorFunction]", dl = "[object Map]", ml = "[object Number]", hs = "[object Object]", gl = "[object RegExp]", El = "[object Set]", Tl = "[object String]", yl = "[object Symbol]", Al = "[object WeakMap]", _l = "[object ArrayBuffer]", vl = "[object DataView]", Rl = "[object Float32Array]", Ol = "[object Float64Array]", Il = "[object Int8Array]", Sl = "[object Int16Array]", Ll = "[object Int32Array]", kl = "[object Uint8Array]", Cl = "[object Uint8ClampedArray]", bl = "[object Uint16Array]", Nl = "[object Uint32Array]", x = {};
x[us] = x[ul] = x[_l] = x[vl] = x[ll] = x[hl] = x[Rl] = x[Ol] = x[Il] = x[Sl] = x[Ll] = x[dl] = x[ml] = x[hs] = x[gl] = x[El] = x[Tl] = x[yl] = x[kl] = x[Cl] = x[bl] = x[Nl] = !0;
x[fl] = x[ls] = x[Al] = !1;
function Bt(t, e, n, r, i, s) {
  var a;
  if (a !== void 0)
    return a;
  if (!ue(t))
    return t;
  var o = N(t);
  if (o)
    return a = Cu(t), go(t, a);
  var c = ae(t), u = c == ls || c == pl;
  if (Rt(t))
    return du(t);
  if (c == hs || c == us || u && !i)
    return a = u ? {} : nl(t), Eu(t, fu(a, t));
  if (!x[c])
    return i ? t : {};
  a = tl(t, c), s || (s = new Re());
  var l = s.get(t);
  if (l)
    return l;
  s.set(t, a), cl(t) ? t.forEach(function(T) {
    a.add(Bt(T, e, n, T, t, s));
  }) : sl(t) && t.forEach(function(T, d) {
    a.set(d, Bt(T, e, n, d, t, s));
  });
  var h = jn, f = o ? void 0 : h(t);
  return zi(f || t, function(T, d) {
    f && (d = T, T = t[d]), fn(a, d, Bt(T, e, n, d, t, s));
  }), a;
}
var Ml = 4;
function W(t) {
  return Bt(t, Ml);
}
function bt(t) {
  for (var e = -1, n = t == null ? 0 : t.length, r = 0, i = []; ++e < n; ) {
    var s = t[e];
    s && (i[r++] = s);
  }
  return i;
}
var Pl = "__lodash_hash_undefined__";
function xl(t) {
  return this.__data__.set(t, Pl), this;
}
function wl(t) {
  return this.__data__.has(t);
}
function ut(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.__data__ = new $e(); ++e < n; )
    this.add(t[e]);
}
ut.prototype.add = ut.prototype.push = xl;
ut.prototype.has = wl;
function fs(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length; ++n < r; )
    if (e(t[n], n, t))
      return !0;
  return !1;
}
function Ar(t, e) {
  return t.has(e);
}
var Ul = 1, Dl = 2;
function ps(t, e, n, r, i, s) {
  var a = n & Ul, o = t.length, c = e.length;
  if (o != c && !(a && c > o))
    return !1;
  var u = s.get(t), l = s.get(e);
  if (u && l)
    return u == e && l == t;
  var h = -1, f = !0, T = n & Dl ? new ut() : void 0;
  for (s.set(t, e), s.set(e, t); ++h < o; ) {
    var d = t[h], _ = e[h];
    if (r)
      var O = a ? r(_, d, h, e, t, s) : r(d, _, h, t, e, s);
    if (O !== void 0) {
      if (O)
        continue;
      f = !1;
      break;
    }
    if (T) {
      if (!fs(e, function(A, y) {
        if (!Ar(T, y) && (d === A || i(d, A, n, r, s)))
          return T.push(y);
      })) {
        f = !1;
        break;
      }
    } else if (!(d === _ || i(d, _, n, r, s))) {
      f = !1;
      break;
    }
  }
  return s.delete(t), s.delete(e), f;
}
function Fl(t) {
  var e = -1, n = Array(t.size);
  return t.forEach(function(r, i) {
    n[++e] = [i, r];
  }), n;
}
function _r(t) {
  var e = -1, n = Array(t.size);
  return t.forEach(function(r) {
    n[++e] = r;
  }), n;
}
var $l = 1, jl = 2, Gl = "[object Boolean]", Bl = "[object Date]", Vl = "[object Error]", Kl = "[object Map]", Hl = "[object Number]", Wl = "[object RegExp]", zl = "[object Set]", Yl = "[object String]", Xl = "[object Symbol]", ql = "[object ArrayBuffer]", Ql = "[object DataView]", ui = ce ? ce.prototype : void 0, Cn = ui ? ui.valueOf : void 0;
function Zl(t, e, n, r, i, s, a) {
  switch (n) {
    case Ql:
      if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset)
        return !1;
      t = t.buffer, e = e.buffer;
    case ql:
      return !(t.byteLength != e.byteLength || !s(new Qt(t), new Qt(e)));
    case Gl:
    case Bl:
    case Hl:
      return Lt(+t, +e);
    case Vl:
      return t.name == e.name && t.message == e.message;
    case Wl:
    case Yl:
      return t == e + "";
    case Kl:
      var o = Fl;
    case zl:
      var c = r & $l;
      if (o || (o = _r), t.size != e.size && !c)
        return !1;
      var u = a.get(t);
      if (u)
        return u == e;
      r |= jl, a.set(t, e);
      var l = ps(o(t), o(e), r, i, s, a);
      return a.delete(t), l;
    case Xl:
      if (Cn)
        return Cn.call(t) == Cn.call(e);
  }
  return !1;
}
var Jl = 1, eh = Object.prototype, th = eh.hasOwnProperty;
function nh(t, e, n, r, i, s) {
  var a = n & Jl, o = jn(t), c = o.length, u = jn(e), l = u.length;
  if (c != l && !a)
    return !1;
  for (var h = c; h--; ) {
    var f = o[h];
    if (!(a ? f in e : th.call(e, f)))
      return !1;
  }
  var T = s.get(t), d = s.get(e);
  if (T && d)
    return T == e && d == t;
  var _ = !0;
  s.set(t, e), s.set(e, t);
  for (var O = a; ++h < c; ) {
    f = o[h];
    var A = t[f], y = e[f];
    if (r)
      var p = a ? r(y, A, f, e, t, s) : r(A, y, f, t, e, s);
    if (!(p === void 0 ? A === y || i(A, y, n, r, s) : p)) {
      _ = !1;
      break;
    }
    O || (O = f == "constructor");
  }
  if (_ && !O) {
    var m = t.constructor, L = e.constructor;
    m != L && "constructor" in t && "constructor" in e && !(typeof m == "function" && m instanceof m && typeof L == "function" && L instanceof L) && (_ = !1);
  }
  return s.delete(t), s.delete(e), _;
}
var rh = 1, li = "[object Arguments]", hi = "[object Array]", Ut = "[object Object]", ih = Object.prototype, fi = ih.hasOwnProperty;
function sh(t, e, n, r, i, s) {
  var a = N(t), o = N(e), c = a ? hi : ae(t), u = o ? hi : ae(e);
  c = c == li ? Ut : c, u = u == li ? Ut : u;
  var l = c == Ut, h = u == Ut, f = c == u;
  if (f && Rt(t)) {
    if (!Rt(e))
      return !1;
    a = !0, l = !1;
  }
  if (f && !l)
    return s || (s = new Re()), a || fr(t) ? ps(t, e, n, r, i, s) : Zl(t, e, c, n, r, i, s);
  if (!(n & rh)) {
    var T = l && fi.call(t, "__wrapped__"), d = h && fi.call(e, "__wrapped__");
    if (T || d) {
      var _ = T ? t.value() : t, O = d ? e.value() : e;
      return s || (s = new Re()), i(_, O, n, r, s);
    }
  }
  return f ? (s || (s = new Re()), nh(t, e, n, r, i, s)) : !1;
}
function vr(t, e, n, r, i) {
  return t === e ? !0 : t == null || e == null || !de(t) && !de(e) ? t !== t && e !== e : sh(t, e, n, r, vr, i);
}
var ah = 1, oh = 2;
function ch(t, e, n, r) {
  var i = n.length, s = i;
  if (t == null)
    return !s;
  for (t = Object(t); i--; ) {
    var a = n[i];
    if (a[2] ? a[1] !== t[a[0]] : !(a[0] in t))
      return !1;
  }
  for (; ++i < s; ) {
    a = n[i];
    var o = a[0], c = t[o], u = a[1];
    if (a[2]) {
      if (c === void 0 && !(o in t))
        return !1;
    } else {
      var l = new Re(), h;
      if (!(h === void 0 ? vr(u, c, ah | oh, r, l) : h))
        return !1;
    }
  }
  return !0;
}
function ds(t) {
  return t === t && !ue(t);
}
function uh(t) {
  for (var e = le(t), n = e.length; n--; ) {
    var r = e[n], i = t[r];
    e[n] = [r, i, ds(i)];
  }
  return e;
}
function ms(t, e) {
  return function(n) {
    return n == null ? !1 : n[t] === e && (e !== void 0 || t in Object(n));
  };
}
function lh(t) {
  var e = uh(t);
  return e.length == 1 && e[0][2] ? ms(e[0][0], e[0][1]) : function(n) {
    return n === t || ch(n, t, e);
  };
}
function hh(t, e) {
  return t != null && e in Object(t);
}
function gs(t, e, n) {
  e = En(e, t);
  for (var r = -1, i = e.length, s = !1; ++r < i; ) {
    var a = Ct(e[r]);
    if (!(s = t != null && n(t, a)))
      break;
    t = t[a];
  }
  return s || ++r != i ? s : (i = t == null ? 0 : t.length, !!i && hr(i) && hn(a, i) && (N(t) || pn(t)));
}
function fh(t, e) {
  return t != null && gs(t, e, hh);
}
var ph = 1, dh = 2;
function mh(t, e) {
  return pr(t) && ds(e) ? ms(Ct(t), e) : function(n) {
    var r = ru(n, t);
    return r === void 0 && r === e ? fh(n, t) : vr(e, r, ph | dh);
  };
}
function gh(t) {
  return function(e) {
    return e == null ? void 0 : e[t];
  };
}
function Eh(t) {
  return function(e) {
    return mr(e, t);
  };
}
function Th(t) {
  return pr(t) ? gh(Ct(t)) : Eh(t);
}
function Se(t) {
  return typeof t == "function" ? t : t == null ? ct : typeof t == "object" ? N(t) ? mh(t[0], t[1]) : lh(t) : Th(t);
}
function yh(t, e, n, r) {
  for (var i = -1, s = t == null ? 0 : t.length; ++i < s; ) {
    var a = t[i];
    e(r, a, n(a), t);
  }
  return r;
}
function Ah(t) {
  return function(e, n, r) {
    for (var i = -1, s = Object(e), a = r(e), o = a.length; o--; ) {
      var c = a[++i];
      if (n(s[c], c, s) === !1)
        break;
    }
    return e;
  };
}
var _h = Ah();
function vh(t, e) {
  return t && _h(t, e, le);
}
function Rh(t, e) {
  return function(n, r) {
    if (n == null)
      return n;
    if (!Ie(n))
      return t(n, r);
    for (var i = n.length, s = -1, a = Object(n); ++s < i && r(a[s], s, a) !== !1; )
      ;
    return n;
  };
}
var nt = Rh(vh);
function Oh(t, e, n, r) {
  return nt(t, function(i, s, a) {
    e(r, i, n(i), a);
  }), r;
}
function Ih(t, e) {
  return function(n, r) {
    var i = N(n) ? yh : Oh, s = {};
    return i(n, t, Se(r), s);
  };
}
var Es = Object.prototype, Sh = Es.hasOwnProperty, Rr = lr(function(t, e) {
  t = Object(t);
  var n = -1, r = e.length, i = r > 2 ? e[2] : void 0;
  for (i && qi(e[0], e[1], i) && (r = 1); ++n < r; )
    for (var s = e[n], a = rs(s), o = -1, c = a.length; ++o < c; ) {
      var u = a[o], l = t[u];
      (l === void 0 || Lt(l, Es[u]) && !Sh.call(t, u)) && (t[u] = s[u]);
    }
  return t;
});
function pi(t) {
  return de(t) && Ie(t);
}
var Lh = 200;
function kh(t, e, n, r) {
  var i = -1, s = Xi, a = !0, o = t.length, c = [], u = e.length;
  if (!o)
    return c;
  e.length >= Lh && (s = Ar, a = !1, e = new ut(e));
  e:
    for (; ++i < o; ) {
      var l = t[i], h = l;
      if (l = l !== 0 ? l : 0, a && h === h) {
        for (var f = u; f--; )
          if (e[f] === h)
            continue e;
        c.push(l);
      } else s(e, h, r) || c.push(l);
    }
  return c;
}
var Tn = lr(function(t, e) {
  return pi(t) ? kh(t, Er(e, 1, pi, !0)) : [];
});
function lt(t) {
  var e = t == null ? 0 : t.length;
  return e ? t[e - 1] : void 0;
}
function H(t, e, n) {
  var r = t == null ? 0 : t.length;
  return r ? (e = e === void 0 ? 1 : ln(e), ss(t, e < 0 ? 0 : e, r)) : [];
}
function St(t, e, n) {
  var r = t == null ? 0 : t.length;
  return r ? (e = e === void 0 ? 1 : ln(e), e = r - e, ss(t, 0, e < 0 ? 0 : e)) : [];
}
function Ch(t) {
  return typeof t == "function" ? t : ct;
}
function I(t, e) {
  var n = N(t) ? zi : nt;
  return n(t, Ch(e));
}
function bh(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length; ++n < r; )
    if (!e(t[n], n, t))
      return !1;
  return !0;
}
function Nh(t, e) {
  var n = !0;
  return nt(t, function(r, i, s) {
    return n = !!e(r, i, s), n;
  }), n;
}
function pe(t, e, n) {
  var r = N(t) ? bh : Nh;
  return r(t, Se(e));
}
function Ts(t, e) {
  var n = [];
  return nt(t, function(r, i, s) {
    e(r, i, s) && n.push(r);
  }), n;
}
function he(t, e) {
  var n = N(t) ? Tr : Ts;
  return n(t, Se(e));
}
function Mh(t) {
  return function(e, n, r) {
    var i = Object(e);
    if (!Ie(e)) {
      var s = Se(n);
      e = le(e), n = function(o) {
        return s(i[o], o, i);
      };
    }
    var a = t(e, n, r);
    return a > -1 ? i[s ? e[a] : a] : void 0;
  };
}
var Ph = Math.max;
function xh(t, e, n) {
  var r = t == null ? 0 : t.length;
  if (!r)
    return -1;
  var i = n == null ? 0 : ln(n);
  return i < 0 && (i = Ph(r + i, 0)), Yi(t, Se(e), i);
}
var ht = Mh(xh);
function me(t) {
  return t && t.length ? t[0] : void 0;
}
function wh(t, e) {
  var n = -1, r = Ie(t) ? Array(t.length) : [];
  return nt(t, function(i, s, a) {
    r[++n] = e(i, s, a);
  }), r;
}
function v(t, e) {
  var n = N(t) ? un : wh;
  return n(t, Se(e));
}
function oe(t, e) {
  return Er(v(t, e));
}
var Uh = Object.prototype, Dh = Uh.hasOwnProperty, Fh = Ih(function(t, e, n) {
  Dh.call(t, n) ? t[n].push(e) : cr(t, n, [e]);
}), $h = Object.prototype, jh = $h.hasOwnProperty;
function Gh(t, e) {
  return t != null && jh.call(t, e);
}
function R(t, e) {
  return t != null && gs(t, e, Gh);
}
var Bh = "[object String]";
function J(t) {
  return typeof t == "string" || !N(t) && de(t) && Ve(t) == Bh;
}
function Vh(t, e) {
  return un(e, function(n) {
    return t[n];
  });
}
function V(t) {
  return t == null ? [] : Vh(t, le(t));
}
var Kh = Math.max;
function q(t, e, n, r) {
  t = Ie(t) ? t : V(t), n = n ? ln(n) : 0;
  var i = t.length;
  return n < 0 && (n = Kh(i + n, 0)), J(t) ? n <= i && t.indexOf(e, n) > -1 : !!i && or(t, e, n) > -1;
}
function di(t, e, n) {
  var r = t == null ? 0 : t.length;
  if (!r)
    return -1;
  var i = 0;
  return or(t, e, i);
}
var Hh = "[object Map]", Wh = "[object Set]", zh = Object.prototype, Yh = zh.hasOwnProperty;
function w(t) {
  if (t == null)
    return !0;
  if (Ie(t) && (N(t) || typeof t == "string" || typeof t.splice == "function" || Rt(t) || fr(t) || pn(t)))
    return !t.length;
  var e = ae(t);
  if (e == Hh || e == Wh)
    return !t.size;
  if (kt(t))
    return !ns(t).length;
  for (var n in t)
    if (Yh.call(t, n))
      return !1;
  return !0;
}
var Xh = "[object RegExp]";
function qh(t) {
  return de(t) && Ve(t) == Xh;
}
var mi = Ge && Ge.isRegExp, xe = mi ? dn(mi) : qh;
function we(t) {
  return t === void 0;
}
var Qh = "Expected a function";
function Zh(t) {
  if (typeof t != "function")
    throw new TypeError(Qh);
  return function() {
    var e = arguments;
    switch (e.length) {
      case 0:
        return !t.call(this);
      case 1:
        return !t.call(this, e[0]);
      case 2:
        return !t.call(this, e[0], e[1]);
      case 3:
        return !t.call(this, e[0], e[1], e[2]);
    }
    return !t.apply(this, e);
  };
}
function Jh(t, e, n, r) {
  if (!ue(t))
    return t;
  e = En(e, t);
  for (var i = -1, s = e.length, a = s - 1, o = t; o != null && ++i < s; ) {
    var c = Ct(e[i]), u = n;
    if (c === "__proto__" || c === "constructor" || c === "prototype")
      return t;
    if (i != a) {
      var l = o[c];
      u = void 0, u === void 0 && (u = ue(l) ? l : hn(e[i + 1]) ? [] : {});
    }
    fn(o, c, u), o = o[c];
  }
  return t;
}
function ef(t, e, n) {
  for (var r = -1, i = e.length, s = {}; ++r < i; ) {
    var a = e[r], o = mr(t, a);
    n(o, a) && Jh(s, En(a, t), o);
  }
  return s;
}
function ge(t, e) {
  if (t == null)
    return {};
  var n = un(Au(t), function(r) {
    return [r];
  });
  return e = Se(e), ef(t, n, function(r, i) {
    return e(r, i[0]);
  });
}
function tf(t, e, n, r, i) {
  return i(t, function(s, a, o) {
    n = r ? (r = !1, s) : e(n, s, a, o);
  }), n;
}
function ne(t, e, n) {
  var r = N(t) ? su : tf, i = arguments.length < 3;
  return r(t, Se(e), n, i, nt);
}
function yn(t, e) {
  var n = N(t) ? Tr : Ts;
  return n(t, Zh(Se(e)));
}
function nf(t, e) {
  var n;
  return nt(t, function(r, i, s) {
    return n = e(r, i, s), !n;
  }), !!n;
}
function ys(t, e, n) {
  var r = N(t) ? fs : nf;
  return r(t, Se(e));
}
var rf = 1 / 0, sf = ot && 1 / _r(new ot([, -0]))[1] == rf ? function(t) {
  return new ot(t);
} : B, af = 200;
function of(t, e, n) {
  var r = -1, i = Xi, s = t.length, a = !0, o = [], c = o;
  if (s >= af) {
    var u = sf(t);
    if (u)
      return _r(u);
    a = !1, i = Ar, c = new ut();
  } else
    c = o;
  e:
    for (; ++r < s; ) {
      var l = t[r], h = l;
      if (l = l !== 0 ? l : 0, a && h === h) {
        for (var f = c.length; f--; )
          if (c[f] === h)
            continue e;
        o.push(l);
      } else i(c, h, n) || (c !== o && c.push(h), o.push(l));
    }
  return o;
}
function Or(t) {
  return t && t.length ? of(t) : [];
}
function Vn(t) {
  console && console.error && console.error(`Error: ${t}`);
}
function As(t) {
  console && console.warn && console.warn(`Warning: ${t}`);
}
function _s(t) {
  const e = (/* @__PURE__ */ new Date()).getTime(), n = t();
  return { time: (/* @__PURE__ */ new Date()).getTime() - e, value: n };
}
function vs(t) {
  function e() {
  }
  e.prototype = t;
  const n = new e();
  function r() {
    return typeof n.bar;
  }
  return r(), r(), t;
}
function cf(t) {
  return uf(t) ? t.LABEL : t.name;
}
function uf(t) {
  return J(t.LABEL) && t.LABEL !== "";
}
class Le {
  get definition() {
    return this._definition;
  }
  set definition(e) {
    this._definition = e;
  }
  constructor(e) {
    this._definition = e;
  }
  accept(e) {
    e.visit(this), I(this.definition, (n) => {
      n.accept(e);
    });
  }
}
class re extends Le {
  constructor(e) {
    super([]), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
  set definition(e) {
  }
  get definition() {
    return this.referencedRule !== void 0 ? this.referencedRule.definition : [];
  }
  accept(e) {
    e.visit(this);
  }
}
class ft extends Le {
  constructor(e) {
    super(e.definition), this.orgText = "", te(this, ge(e, (n) => n !== void 0));
  }
}
class ee extends Le {
  constructor(e) {
    super(e.definition), this.ignoreAmbiguities = !1, te(this, ge(e, (n) => n !== void 0));
  }
}
class Z extends Le {
  constructor(e) {
    super(e.definition), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
}
class ke extends Le {
  constructor(e) {
    super(e.definition), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
}
class Ce extends Le {
  constructor(e) {
    super(e.definition), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
}
class K extends Le {
  constructor(e) {
    super(e.definition), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
}
class Ee extends Le {
  constructor(e) {
    super(e.definition), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
}
class Te extends Le {
  get definition() {
    return this._definition;
  }
  set definition(e) {
    this._definition = e;
  }
  constructor(e) {
    super(e.definition), this.idx = 1, this.ignoreAmbiguities = !1, this.hasPredicates = !1, te(this, ge(e, (n) => n !== void 0));
  }
}
class F {
  constructor(e) {
    this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
  accept(e) {
    e.visit(this);
  }
}
function lf(t) {
  return v(t, Vt);
}
function Vt(t) {
  function e(n) {
    return v(n, Vt);
  }
  if (t instanceof re) {
    const n = {
      type: "NonTerminal",
      name: t.nonTerminalName,
      idx: t.idx
    };
    return J(t.label) && (n.label = t.label), n;
  } else {
    if (t instanceof ee)
      return {
        type: "Alternative",
        definition: e(t.definition)
      };
    if (t instanceof Z)
      return {
        type: "Option",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof ke)
      return {
        type: "RepetitionMandatory",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof Ce)
      return {
        type: "RepetitionMandatoryWithSeparator",
        idx: t.idx,
        separator: Vt(new F({ terminalType: t.separator })),
        definition: e(t.definition)
      };
    if (t instanceof Ee)
      return {
        type: "RepetitionWithSeparator",
        idx: t.idx,
        separator: Vt(new F({ terminalType: t.separator })),
        definition: e(t.definition)
      };
    if (t instanceof K)
      return {
        type: "Repetition",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof Te)
      return {
        type: "Alternation",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof F) {
      const n = {
        type: "Terminal",
        name: t.terminalType.name,
        label: cf(t.terminalType),
        idx: t.idx
      };
      J(t.label) && (n.terminalLabel = t.label);
      const r = t.terminalType.PATTERN;
      return t.terminalType.PATTERN && (n.pattern = xe(r) ? r.source : r), n;
    } else {
      if (t instanceof ft)
        return {
          type: "Rule",
          name: t.name,
          orgText: t.orgText,
          definition: e(t.definition)
        };
      throw Error("non exhaustive match");
    }
  }
}
class pt {
  visit(e) {
    const n = e;
    switch (n.constructor) {
      case re:
        return this.visitNonTerminal(n);
      case ee:
        return this.visitAlternative(n);
      case Z:
        return this.visitOption(n);
      case ke:
        return this.visitRepetitionMandatory(n);
      case Ce:
        return this.visitRepetitionMandatoryWithSeparator(n);
      case Ee:
        return this.visitRepetitionWithSeparator(n);
      case K:
        return this.visitRepetition(n);
      case Te:
        return this.visitAlternation(n);
      case F:
        return this.visitTerminal(n);
      case ft:
        return this.visitRule(n);
      /* c8 ignore next 2 */
      default:
        throw Error("non exhaustive match");
    }
  }
  /* c8 ignore next */
  visitNonTerminal(e) {
  }
  /* c8 ignore next */
  visitAlternative(e) {
  }
  /* c8 ignore next */
  visitOption(e) {
  }
  /* c8 ignore next */
  visitRepetition(e) {
  }
  /* c8 ignore next */
  visitRepetitionMandatory(e) {
  }
  /* c8 ignore next 3 */
  visitRepetitionMandatoryWithSeparator(e) {
  }
  /* c8 ignore next */
  visitRepetitionWithSeparator(e) {
  }
  /* c8 ignore next */
  visitAlternation(e) {
  }
  /* c8 ignore next */
  visitTerminal(e) {
  }
  /* c8 ignore next */
  visitRule(e) {
  }
}
function hf(t) {
  return t instanceof ee || t instanceof Z || t instanceof K || t instanceof ke || t instanceof Ce || t instanceof Ee || t instanceof F || t instanceof ft;
}
function Zt(t, e = []) {
  return t instanceof Z || t instanceof K || t instanceof Ee ? !0 : t instanceof Te ? ys(t.definition, (n) => Zt(n, e)) : t instanceof re && q(e, t) ? !1 : t instanceof Le ? (t instanceof re && e.push(t), pe(t.definition, (n) => Zt(n, e))) : !1;
}
function ff(t) {
  return t instanceof Te;
}
function ve(t) {
  if (t instanceof re)
    return "SUBRULE";
  if (t instanceof Z)
    return "OPTION";
  if (t instanceof Te)
    return "OR";
  if (t instanceof ke)
    return "AT_LEAST_ONE";
  if (t instanceof Ce)
    return "AT_LEAST_ONE_SEP";
  if (t instanceof Ee)
    return "MANY_SEP";
  if (t instanceof K)
    return "MANY";
  if (t instanceof F)
    return "CONSUME";
  throw Error("non exhaustive match");
}
class An {
  walk(e, n = []) {
    I(e.definition, (r, i) => {
      const s = H(e.definition, i + 1);
      if (r instanceof re)
        this.walkProdRef(r, s, n);
      else if (r instanceof F)
        this.walkTerminal(r, s, n);
      else if (r instanceof ee)
        this.walkFlat(r, s, n);
      else if (r instanceof Z)
        this.walkOption(r, s, n);
      else if (r instanceof ke)
        this.walkAtLeastOne(r, s, n);
      else if (r instanceof Ce)
        this.walkAtLeastOneSep(r, s, n);
      else if (r instanceof Ee)
        this.walkManySep(r, s, n);
      else if (r instanceof K)
        this.walkMany(r, s, n);
      else if (r instanceof Te)
        this.walkOr(r, s, n);
      else
        throw Error("non exhaustive match");
    });
  }
  walkTerminal(e, n, r) {
  }
  walkProdRef(e, n, r) {
  }
  walkFlat(e, n, r) {
    const i = n.concat(r);
    this.walk(e, i);
  }
  walkOption(e, n, r) {
    const i = n.concat(r);
    this.walk(e, i);
  }
  walkAtLeastOne(e, n, r) {
    const i = [
      new Z({ definition: e.definition })
    ].concat(n, r);
    this.walk(e, i);
  }
  walkAtLeastOneSep(e, n, r) {
    const i = gi(e, n, r);
    this.walk(e, i);
  }
  walkMany(e, n, r) {
    const i = [
      new Z({ definition: e.definition })
    ].concat(n, r);
    this.walk(e, i);
  }
  walkManySep(e, n, r) {
    const i = gi(e, n, r);
    this.walk(e, i);
  }
  walkOr(e, n, r) {
    const i = n.concat(r);
    I(e.definition, (s) => {
      const a = new ee({ definition: [s] });
      this.walk(a, i);
    });
  }
}
function gi(t, e, n) {
  return [
    new Z({
      definition: [
        new F({ terminalType: t.separator })
      ].concat(t.definition)
    })
  ].concat(e, n);
}
function Nt(t) {
  if (t instanceof re)
    return Nt(t.referencedRule);
  if (t instanceof F)
    return mf(t);
  if (hf(t))
    return pf(t);
  if (ff(t))
    return df(t);
  throw Error("non exhaustive match");
}
function pf(t) {
  let e = [];
  const n = t.definition;
  let r = 0, i = n.length > r, s, a = !0;
  for (; i && a; )
    s = n[r], a = Zt(s), e = e.concat(Nt(s)), r = r + 1, i = n.length > r;
  return Or(e);
}
function df(t) {
  const e = v(t.definition, (n) => Nt(n));
  return Or(fe(e));
}
function mf(t) {
  return [t.terminalType];
}
const Rs = "_~IN~_";
class gf extends An {
  constructor(e) {
    super(), this.topProd = e, this.follows = {};
  }
  startWalking() {
    return this.walk(this.topProd), this.follows;
  }
  walkTerminal(e, n, r) {
  }
  walkProdRef(e, n, r) {
    const i = Tf(e.referencedRule, e.idx) + this.topProd.name, s = n.concat(r), a = new ee({ definition: s }), o = Nt(a);
    this.follows[i] = o;
  }
}
function Ef(t) {
  const e = {};
  return I(t, (n) => {
    const r = new gf(n).startWalking();
    te(e, r);
  }), e;
}
function Tf(t, e) {
  return t.name + e + Rs;
}
function S(t) {
  return t.charCodeAt(0);
}
function bn(t, e) {
  Array.isArray(t) ? t.forEach(function(n) {
    e.push(n);
  }) : e.push(t);
}
function gt(t, e) {
  if (t[e] === !0)
    throw "duplicate flag " + e;
  t[e], t[e] = !0;
}
function at(t) {
  if (t === void 0)
    throw Error("Internal Error - Should never get here!");
  return !0;
}
function yf() {
  throw Error("Internal Error - Should never get here!");
}
function Ei(t) {
  return t.type === "Character";
}
const Jt = [];
for (let t = S("0"); t <= S("9"); t++)
  Jt.push(t);
const en = [S("_")].concat(Jt);
for (let t = S("a"); t <= S("z"); t++)
  en.push(t);
for (let t = S("A"); t <= S("Z"); t++)
  en.push(t);
const Ti = [
  S(" "),
  S("\f"),
  S(`
`),
  S("\r"),
  S("	"),
  S("\v"),
  S("	"),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S("\u2028"),
  S("\u2029"),
  S(" "),
  S(" "),
  S("　"),
  S("\uFEFF")
], Af = /[0-9a-fA-F]/, Dt = /[0-9]/, _f = /[1-9]/;
class vf {
  constructor() {
    this.idx = 0, this.input = "", this.groupIdx = 0;
  }
  saveState() {
    return {
      idx: this.idx,
      input: this.input,
      groupIdx: this.groupIdx
    };
  }
  restoreState(e) {
    this.idx = e.idx, this.input = e.input, this.groupIdx = e.groupIdx;
  }
  pattern(e) {
    this.idx = 0, this.input = e, this.groupIdx = 0, this.consumeChar("/");
    const n = this.disjunction();
    this.consumeChar("/");
    const r = {
      type: "Flags",
      loc: { begin: this.idx, end: e.length },
      global: !1,
      ignoreCase: !1,
      multiLine: !1,
      unicode: !1,
      sticky: !1
    };
    for (; this.isRegExpFlag(); )
      switch (this.popChar()) {
        case "g":
          gt(r, "global");
          break;
        case "i":
          gt(r, "ignoreCase");
          break;
        case "m":
          gt(r, "multiLine");
          break;
        case "u":
          gt(r, "unicode");
          break;
        case "y":
          gt(r, "sticky");
          break;
      }
    if (this.idx !== this.input.length)
      throw Error("Redundant input: " + this.input.substring(this.idx));
    return {
      type: "Pattern",
      flags: r,
      value: n,
      loc: this.loc(0)
    };
  }
  disjunction() {
    const e = [], n = this.idx;
    for (e.push(this.alternative()); this.peekChar() === "|"; )
      this.consumeChar("|"), e.push(this.alternative());
    return { type: "Disjunction", value: e, loc: this.loc(n) };
  }
  alternative() {
    const e = [], n = this.idx;
    for (; this.isTerm(); )
      e.push(this.term());
    return { type: "Alternative", value: e, loc: this.loc(n) };
  }
  term() {
    return this.isAssertion() ? this.assertion() : this.atom();
  }
  assertion() {
    const e = this.idx;
    switch (this.popChar()) {
      case "^":
        return {
          type: "StartAnchor",
          loc: this.loc(e)
        };
      case "$":
        return { type: "EndAnchor", loc: this.loc(e) };
      // '\b' or '\B'
      case "\\":
        switch (this.popChar()) {
          case "b":
            return {
              type: "WordBoundary",
              loc: this.loc(e)
            };
          case "B":
            return {
              type: "NonWordBoundary",
              loc: this.loc(e)
            };
        }
        throw Error("Invalid Assertion Escape");
      // '(?=' or '(?!'
      case "(":
        this.consumeChar("?");
        let n;
        switch (this.popChar()) {
          case "=":
            n = "Lookahead";
            break;
          case "!":
            n = "NegativeLookahead";
            break;
        }
        at(n);
        const r = this.disjunction();
        return this.consumeChar(")"), {
          type: n,
          value: r,
          loc: this.loc(e)
        };
    }
    return yf();
  }
  quantifier(e = !1) {
    let n;
    const r = this.idx;
    switch (this.popChar()) {
      case "*":
        n = {
          atLeast: 0,
          atMost: 1 / 0
        };
        break;
      case "+":
        n = {
          atLeast: 1,
          atMost: 1 / 0
        };
        break;
      case "?":
        n = {
          atLeast: 0,
          atMost: 1
        };
        break;
      case "{":
        const i = this.integerIncludingZero();
        switch (this.popChar()) {
          case "}":
            n = {
              atLeast: i,
              atMost: i
            };
            break;
          case ",":
            let s;
            this.isDigit() ? (s = this.integerIncludingZero(), n = {
              atLeast: i,
              atMost: s
            }) : n = {
              atLeast: i,
              atMost: 1 / 0
            }, this.consumeChar("}");
            break;
        }
        if (e === !0 && n === void 0)
          return;
        at(n);
        break;
    }
    if (!(e === !0 && n === void 0) && at(n))
      return this.peekChar(0) === "?" ? (this.consumeChar("?"), n.greedy = !1) : n.greedy = !0, n.type = "Quantifier", n.loc = this.loc(r), n;
  }
  atom() {
    let e;
    const n = this.idx;
    switch (this.peekChar()) {
      case ".":
        e = this.dotAll();
        break;
      case "\\":
        e = this.atomEscape();
        break;
      case "[":
        e = this.characterClass();
        break;
      case "(":
        e = this.group();
        break;
    }
    if (e === void 0 && this.isPatternCharacter() && (e = this.patternCharacter()), at(e))
      return e.loc = this.loc(n), this.isQuantifier() && (e.quantifier = this.quantifier()), e;
  }
  dotAll() {
    return this.consumeChar("."), {
      type: "Set",
      complement: !0,
      value: [S(`
`), S("\r"), S("\u2028"), S("\u2029")]
    };
  }
  atomEscape() {
    switch (this.consumeChar("\\"), this.peekChar()) {
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        return this.decimalEscapeAtom();
      case "d":
      case "D":
      case "s":
      case "S":
      case "w":
      case "W":
        return this.characterClassEscape();
      case "f":
      case "n":
      case "r":
      case "t":
      case "v":
        return this.controlEscapeAtom();
      case "c":
        return this.controlLetterEscapeAtom();
      case "0":
        return this.nulCharacterAtom();
      case "x":
        return this.hexEscapeSequenceAtom();
      case "u":
        return this.regExpUnicodeEscapeSequenceAtom();
      default:
        return this.identityEscapeAtom();
    }
  }
  decimalEscapeAtom() {
    return { type: "GroupBackReference", value: this.positiveInteger() };
  }
  characterClassEscape() {
    let e, n = !1;
    switch (this.popChar()) {
      case "d":
        e = Jt;
        break;
      case "D":
        e = Jt, n = !0;
        break;
      case "s":
        e = Ti;
        break;
      case "S":
        e = Ti, n = !0;
        break;
      case "w":
        e = en;
        break;
      case "W":
        e = en, n = !0;
        break;
    }
    if (at(e))
      return { type: "Set", value: e, complement: n };
  }
  controlEscapeAtom() {
    let e;
    switch (this.popChar()) {
      case "f":
        e = S("\f");
        break;
      case "n":
        e = S(`
`);
        break;
      case "r":
        e = S("\r");
        break;
      case "t":
        e = S("	");
        break;
      case "v":
        e = S("\v");
        break;
    }
    if (at(e))
      return { type: "Character", value: e };
  }
  controlLetterEscapeAtom() {
    this.consumeChar("c");
    const e = this.popChar();
    if (/[a-zA-Z]/.test(e) === !1)
      throw Error("Invalid ");
    return { type: "Character", value: e.toUpperCase().charCodeAt(0) - 64 };
  }
  nulCharacterAtom() {
    return this.consumeChar("0"), { type: "Character", value: S("\0") };
  }
  hexEscapeSequenceAtom() {
    return this.consumeChar("x"), this.parseHexDigits(2);
  }
  regExpUnicodeEscapeSequenceAtom() {
    return this.consumeChar("u"), this.parseHexDigits(4);
  }
  identityEscapeAtom() {
    const e = this.popChar();
    return { type: "Character", value: S(e) };
  }
  classPatternCharacterAtom() {
    switch (this.peekChar()) {
      // istanbul ignore next
      case `
`:
      // istanbul ignore next
      case "\r":
      // istanbul ignore next
      case "\u2028":
      // istanbul ignore next
      case "\u2029":
      // istanbul ignore next
      case "\\":
      // istanbul ignore next
      case "]":
        throw Error("TBD");
      default:
        const e = this.popChar();
        return { type: "Character", value: S(e) };
    }
  }
  characterClass() {
    const e = [];
    let n = !1;
    for (this.consumeChar("["), this.peekChar(0) === "^" && (this.consumeChar("^"), n = !0); this.isClassAtom(); ) {
      const r = this.classAtom();
      if (r.type, Ei(r) && this.isRangeDash()) {
        this.consumeChar("-");
        const i = this.classAtom();
        if (i.type, Ei(i)) {
          if (i.value < r.value)
            throw Error("Range out of order in character class");
          e.push({ from: r.value, to: i.value });
        } else
          bn(r.value, e), e.push(S("-")), bn(i.value, e);
      } else
        bn(r.value, e);
    }
    return this.consumeChar("]"), { type: "Set", complement: n, value: e };
  }
  classAtom() {
    switch (this.peekChar()) {
      // istanbul ignore next
      case "]":
      // istanbul ignore next
      case `
`:
      // istanbul ignore next
      case "\r":
      // istanbul ignore next
      case "\u2028":
      // istanbul ignore next
      case "\u2029":
        throw Error("TBD");
      case "\\":
        return this.classEscape();
      default:
        return this.classPatternCharacterAtom();
    }
  }
  classEscape() {
    switch (this.consumeChar("\\"), this.peekChar()) {
      // Matches a backspace.
      // (Not to be confused with \b word boundary outside characterClass)
      case "b":
        return this.consumeChar("b"), { type: "Character", value: S("\b") };
      case "d":
      case "D":
      case "s":
      case "S":
      case "w":
      case "W":
        return this.characterClassEscape();
      case "f":
      case "n":
      case "r":
      case "t":
      case "v":
        return this.controlEscapeAtom();
      case "c":
        return this.controlLetterEscapeAtom();
      case "0":
        return this.nulCharacterAtom();
      case "x":
        return this.hexEscapeSequenceAtom();
      case "u":
        return this.regExpUnicodeEscapeSequenceAtom();
      default:
        return this.identityEscapeAtom();
    }
  }
  group() {
    let e = !0;
    switch (this.consumeChar("("), this.peekChar(0)) {
      case "?":
        this.consumeChar("?"), this.consumeChar(":"), e = !1;
        break;
      default:
        this.groupIdx++;
        break;
    }
    const n = this.disjunction();
    this.consumeChar(")");
    const r = {
      type: "Group",
      capturing: e,
      value: n
    };
    return e && (r.idx = this.groupIdx), r;
  }
  positiveInteger() {
    let e = this.popChar();
    if (_f.test(e) === !1)
      throw Error("Expecting a positive integer");
    for (; Dt.test(this.peekChar(0)); )
      e += this.popChar();
    return parseInt(e, 10);
  }
  integerIncludingZero() {
    let e = this.popChar();
    if (Dt.test(e) === !1)
      throw Error("Expecting an integer");
    for (; Dt.test(this.peekChar(0)); )
      e += this.popChar();
    return parseInt(e, 10);
  }
  patternCharacter() {
    const e = this.popChar();
    switch (e) {
      // istanbul ignore next
      case `
`:
      // istanbul ignore next
      case "\r":
      // istanbul ignore next
      case "\u2028":
      // istanbul ignore next
      case "\u2029":
      // istanbul ignore next
      case "^":
      // istanbul ignore next
      case "$":
      // istanbul ignore next
      case "\\":
      // istanbul ignore next
      case ".":
      // istanbul ignore next
      case "*":
      // istanbul ignore next
      case "+":
      // istanbul ignore next
      case "?":
      // istanbul ignore next
      case "(":
      // istanbul ignore next
      case ")":
      // istanbul ignore next
      case "[":
      // istanbul ignore next
      case "|":
        throw Error("TBD");
      default:
        return { type: "Character", value: S(e) };
    }
  }
  isRegExpFlag() {
    switch (this.peekChar(0)) {
      case "g":
      case "i":
      case "m":
      case "u":
      case "y":
        return !0;
      default:
        return !1;
    }
  }
  isRangeDash() {
    return this.peekChar() === "-" && this.isClassAtom(1);
  }
  isDigit() {
    return Dt.test(this.peekChar(0));
  }
  isClassAtom(e = 0) {
    switch (this.peekChar(e)) {
      case "]":
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
        return !1;
      default:
        return !0;
    }
  }
  isTerm() {
    return this.isAtom() || this.isAssertion();
  }
  isAtom() {
    if (this.isPatternCharacter())
      return !0;
    switch (this.peekChar(0)) {
      case ".":
      case "\\":
      // atomEscape
      case "[":
      // characterClass
      // TODO: isAtom must be called before isAssertion - disambiguate
      case "(":
        return !0;
      default:
        return !1;
    }
  }
  isAssertion() {
    switch (this.peekChar(0)) {
      case "^":
      case "$":
        return !0;
      // '\b' or '\B'
      case "\\":
        switch (this.peekChar(1)) {
          case "b":
          case "B":
            return !0;
          default:
            return !1;
        }
      // '(?=' or '(?!'
      case "(":
        return this.peekChar(1) === "?" && (this.peekChar(2) === "=" || this.peekChar(2) === "!");
      default:
        return !1;
    }
  }
  isQuantifier() {
    const e = this.saveState();
    try {
      return this.quantifier(!0) !== void 0;
    } catch {
      return !1;
    } finally {
      this.restoreState(e);
    }
  }
  isPatternCharacter() {
    switch (this.peekChar()) {
      case "^":
      case "$":
      case "\\":
      case ".":
      case "*":
      case "+":
      case "?":
      case "(":
      case ")":
      case "[":
      case "|":
      case "/":
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
        return !1;
      default:
        return !0;
    }
  }
  parseHexDigits(e) {
    let n = "";
    for (let r = 0; r < e; r++) {
      const i = this.popChar();
      if (Af.test(i) === !1)
        throw Error("Expecting a HexDecimal digits");
      n += i;
    }
    return { type: "Character", value: parseInt(n, 16) };
  }
  peekChar(e = 0) {
    return this.input[this.idx + e];
  }
  popChar() {
    const e = this.peekChar(0);
    return this.consumeChar(void 0), e;
  }
  consumeChar(e) {
    if (e !== void 0 && this.input[this.idx] !== e)
      throw Error("Expected: '" + e + "' but found: '" + this.input[this.idx] + "' at offset: " + this.idx);
    if (this.idx >= this.input.length)
      throw Error("Unexpected end of input");
    this.idx++;
  }
  loc(e) {
    return { begin: e, end: this.idx };
  }
}
class Ir {
  visitChildren(e) {
    for (const n in e) {
      const r = e[n];
      e.hasOwnProperty(n) && (r.type !== void 0 ? this.visit(r) : Array.isArray(r) && r.forEach((i) => {
        this.visit(i);
      }, this));
    }
  }
  visit(e) {
    switch (e.type) {
      case "Pattern":
        this.visitPattern(e);
        break;
      case "Flags":
        this.visitFlags(e);
        break;
      case "Disjunction":
        this.visitDisjunction(e);
        break;
      case "Alternative":
        this.visitAlternative(e);
        break;
      case "StartAnchor":
        this.visitStartAnchor(e);
        break;
      case "EndAnchor":
        this.visitEndAnchor(e);
        break;
      case "WordBoundary":
        this.visitWordBoundary(e);
        break;
      case "NonWordBoundary":
        this.visitNonWordBoundary(e);
        break;
      case "Lookahead":
        this.visitLookahead(e);
        break;
      case "NegativeLookahead":
        this.visitNegativeLookahead(e);
        break;
      case "Character":
        this.visitCharacter(e);
        break;
      case "Set":
        this.visitSet(e);
        break;
      case "Group":
        this.visitGroup(e);
        break;
      case "GroupBackReference":
        this.visitGroupBackReference(e);
        break;
      case "Quantifier":
        this.visitQuantifier(e);
        break;
    }
    this.visitChildren(e);
  }
  visitPattern(e) {
  }
  visitFlags(e) {
  }
  visitDisjunction(e) {
  }
  visitAlternative(e) {
  }
  // Assertion
  visitStartAnchor(e) {
  }
  visitEndAnchor(e) {
  }
  visitWordBoundary(e) {
  }
  visitNonWordBoundary(e) {
  }
  visitLookahead(e) {
  }
  visitNegativeLookahead(e) {
  }
  // atoms
  visitCharacter(e) {
  }
  visitSet(e) {
  }
  visitGroup(e) {
  }
  visitGroupBackReference(e) {
  }
  visitQuantifier(e) {
  }
}
let Kt = {};
const Rf = new vf();
function _n(t) {
  const e = t.toString();
  if (Kt.hasOwnProperty(e))
    return Kt[e];
  {
    const n = Rf.pattern(e);
    return Kt[e] = n, n;
  }
}
function Of() {
  Kt = {};
}
const Os = "Complement Sets are not supported for first char optimization", tn = `Unable to use "first char" lexer optimizations:
`;
function If(t, e = !1) {
  try {
    const n = _n(t);
    return Kn(n.value, {}, n.flags.ignoreCase);
  } catch (n) {
    if (n.message === Os)
      e && As(`${tn}	Unable to optimize: < ${t.toString()} >
	Complement Sets cannot be automatically optimized.
	This will disable the lexer's first char optimizations.
	See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.`);
    else {
      let r = "";
      e && (r = `
	This will disable the lexer's first char optimizations.
	See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.`), Vn(`${tn}
	Failed parsing: < ${t.toString()} >
	Using the @chevrotain/regexp-to-ast library
	Please open an issue at: https://github.com/chevrotain/chevrotain/issues` + r);
    }
  }
  return [];
}
function Kn(t, e, n) {
  switch (t.type) {
    case "Disjunction":
      for (let i = 0; i < t.value.length; i++)
        Kn(t.value[i], e, n);
      break;
    case "Alternative":
      const r = t.value;
      for (let i = 0; i < r.length; i++) {
        const s = r[i];
        switch (s.type) {
          case "EndAnchor":
          // A group back reference cannot affect potential starting char.
          // because if a back reference is the first production than automatically
          // the group being referenced has had to come BEFORE so its codes have already been added
          case "GroupBackReference":
          // assertions do not affect potential starting codes
          case "Lookahead":
          case "NegativeLookahead":
          case "StartAnchor":
          case "WordBoundary":
          case "NonWordBoundary":
            continue;
        }
        const a = s;
        switch (a.type) {
          case "Character":
            Ft(a.value, e, n);
            break;
          case "Set":
            if (a.complement === !0)
              throw Error(Os);
            I(a.value, (c) => {
              if (typeof c == "number")
                Ft(c, e, n);
              else {
                const u = c;
                if (n === !0)
                  for (let l = u.from; l <= u.to; l++)
                    Ft(l, e, n);
                else {
                  for (let l = u.from; l <= u.to && l < yt; l++)
                    Ft(l, e, n);
                  if (u.to >= yt) {
                    const l = u.from >= yt ? u.from : yt, h = u.to, f = Be(l), T = Be(h);
                    for (let d = f; d <= T; d++)
                      e[d] = d;
                  }
                }
              }
            });
            break;
          case "Group":
            Kn(a.value, e, n);
            break;
          /* istanbul ignore next */
          default:
            throw Error("Non Exhaustive Match");
        }
        const o = a.quantifier !== void 0 && a.quantifier.atLeast === 0;
        if (
          // A group may be optional due to empty contents /(?:)/
          // or if everything inside it is optional /((a)?)/
          a.type === "Group" && Hn(a) === !1 || // If this term is not a group it may only be optional if it has an optional quantifier
          a.type !== "Group" && o === !1
        )
          break;
      }
      break;
    /* istanbul ignore next */
    default:
      throw Error("non exhaustive match!");
  }
  return V(e);
}
function Ft(t, e, n) {
  const r = Be(t);
  e[r] = r, n === !0 && Sf(t, e);
}
function Sf(t, e) {
  const n = String.fromCharCode(t), r = n.toUpperCase();
  if (r !== n) {
    const i = Be(r.charCodeAt(0));
    e[i] = i;
  } else {
    const i = n.toLowerCase();
    if (i !== n) {
      const s = Be(i.charCodeAt(0));
      e[s] = s;
    }
  }
}
function yi(t, e) {
  return ht(t.value, (n) => {
    if (typeof n == "number")
      return q(e, n);
    {
      const r = n;
      return ht(e, (i) => r.from <= i && i <= r.to) !== void 0;
    }
  });
}
function Hn(t) {
  const e = t.quantifier;
  return e && e.atLeast === 0 ? !0 : t.value ? N(t.value) ? pe(t.value, Hn) : Hn(t.value) : !1;
}
class Lf extends Ir {
  constructor(e) {
    super(), this.targetCharCodes = e, this.found = !1;
  }
  visitChildren(e) {
    if (this.found !== !0) {
      switch (e.type) {
        case "Lookahead":
          this.visitLookahead(e);
          return;
        case "NegativeLookahead":
          this.visitNegativeLookahead(e);
          return;
      }
      super.visitChildren(e);
    }
  }
  visitCharacter(e) {
    q(this.targetCharCodes, e.value) && (this.found = !0);
  }
  visitSet(e) {
    e.complement ? yi(e, this.targetCharCodes) === void 0 && (this.found = !0) : yi(e, this.targetCharCodes) !== void 0 && (this.found = !0);
  }
}
function Sr(t, e) {
  if (e instanceof RegExp) {
    const n = _n(e), r = new Lf(t);
    return r.visit(n), r.found;
  } else
    return ht(e, (n) => q(t, n.charCodeAt(0))) !== void 0;
}
const Ze = "PATTERN", Tt = "defaultMode", $t = "modes";
let Is = typeof new RegExp("(?:)").sticky == "boolean";
function kf(t, e) {
  e = Rr(e, {
    useSticky: Is,
    debug: !1,
    safeMode: !1,
    positionTracking: "full",
    lineTerminatorCharacters: ["\r", `
`],
    tracer: (y, p) => p()
  });
  const n = e.tracer;
  n("initCharCodeToOptimizedIndexMap", () => {
    Qf();
  });
  let r;
  n("Reject Lexer.NA", () => {
    r = yn(t, (y) => y[Ze] === Y.NA);
  });
  let i = !1, s;
  n("Transform Patterns", () => {
    i = !1, s = v(r, (y) => {
      const p = y[Ze];
      if (xe(p)) {
        const m = p.source;
        return m.length === 1 && // only these regExp meta characters which can appear in a length one regExp
        m !== "^" && m !== "$" && m !== "." && !p.ignoreCase ? m : m.length === 2 && m[0] === "\\" && // not a meta character
        !q([
          "d",
          "D",
          "s",
          "S",
          "t",
          "r",
          "n",
          "t",
          "0",
          "c",
          "b",
          "B",
          "f",
          "v",
          "w",
          "W"
        ], m[1]) ? m[1] : e.useSticky ? _i(p) : Ai(p);
      } else {
        if (De(p))
          return i = !0, { exec: p };
        if (typeof p == "object")
          return i = !0, p;
        if (typeof p == "string") {
          if (p.length === 1)
            return p;
          {
            const m = p.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&"), L = new RegExp(m);
            return e.useSticky ? _i(L) : Ai(L);
          }
        } else
          throw Error("non exhaustive match");
      }
    });
  });
  let a, o, c, u, l;
  n("misc mapping", () => {
    a = v(r, (y) => y.tokenTypeIdx), o = v(r, (y) => {
      const p = y.GROUP;
      if (p !== Y.SKIPPED) {
        if (J(p))
          return p;
        if (we(p))
          return !1;
        throw Error("non exhaustive match");
      }
    }), c = v(r, (y) => {
      const p = y.LONGER_ALT;
      if (p)
        return N(p) ? v(p, (m) => di(r, m)) : [di(r, p)];
    }), u = v(r, (y) => y.PUSH_MODE), l = v(r, (y) => R(y, "POP_MODE"));
  });
  let h;
  n("Line Terminator Handling", () => {
    const y = ks(e.lineTerminatorCharacters);
    h = v(r, (p) => !1), e.positionTracking !== "onlyOffset" && (h = v(r, (p) => R(p, "LINE_BREAKS") ? !!p.LINE_BREAKS : Ls(p, y) === !1 && Sr(y, p.PATTERN)));
  });
  let f, T, d, _;
  n("Misc Mapping #2", () => {
    f = v(r, Ss), T = v(s, Yf), d = ne(r, (y, p) => {
      const m = p.GROUP;
      return J(m) && m !== Y.SKIPPED && (y[m] = []), y;
    }, {}), _ = v(s, (y, p) => ({
      pattern: s[p],
      longerAlt: c[p],
      canLineTerminator: h[p],
      isCustom: f[p],
      short: T[p],
      group: o[p],
      push: u[p],
      pop: l[p],
      tokenTypeIdx: a[p],
      tokenType: r[p]
    }));
  });
  let O = !0, A = [];
  return e.safeMode || n("First Char Optimization", () => {
    A = ne(r, (y, p, m) => {
      if (typeof p.PATTERN == "string") {
        const L = p.PATTERN.charCodeAt(0), z = Be(L);
        Nn(y, z, _[m]);
      } else if (N(p.START_CHARS_HINT)) {
        let L;
        I(p.START_CHARS_HINT, (z) => {
          const ie = typeof z == "string" ? z.charCodeAt(0) : z, ye = Be(ie);
          L !== ye && (L = ye, Nn(y, ye, _[m]));
        });
      } else if (xe(p.PATTERN))
        if (p.PATTERN.unicode)
          O = !1, e.ensureOptimizations && Vn(`${tn}	Unable to analyze < ${p.PATTERN.toString()} > pattern.
	The regexp unicode flag is not currently supported by the regexp-to-ast library.
	This will disable the lexer's first char optimizations.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE`);
        else {
          const L = If(p.PATTERN, e.ensureOptimizations);
          w(L) && (O = !1), I(L, (z) => {
            Nn(y, z, _[m]);
          });
        }
      else
        e.ensureOptimizations && Vn(`${tn}	TokenType: <${p.name}> is using a custom token pattern without providing <start_chars_hint> parameter.
	This will disable the lexer's first char optimizations.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE`), O = !1;
      return y;
    }, []);
  }), {
    emptyGroups: d,
    patternIdxToConfig: _,
    charCodeToPatternIdxToConfig: A,
    hasCustom: i,
    canBeOptimized: O
  };
}
function Cf(t, e) {
  let n = [];
  const r = Nf(t);
  n = n.concat(r.errors);
  const i = Mf(r.valid), s = i.valid;
  return n = n.concat(i.errors), n = n.concat(bf(s)), n = n.concat(jf(s)), n = n.concat(Gf(s, e)), n = n.concat(Bf(s)), n;
}
function bf(t) {
  let e = [];
  const n = he(t, (r) => xe(r[Ze]));
  return e = e.concat(xf(n)), e = e.concat(Df(n)), e = e.concat(Ff(n)), e = e.concat($f(n)), e = e.concat(wf(n)), e;
}
function Nf(t) {
  const e = he(t, (i) => !R(i, Ze)), n = v(e, (i) => ({
    message: "Token Type: ->" + i.name + "<- missing static 'PATTERN' property",
    type: j.MISSING_PATTERN,
    tokenTypes: [i]
  })), r = Tn(t, e);
  return { errors: n, valid: r };
}
function Mf(t) {
  const e = he(t, (i) => {
    const s = i[Ze];
    return !xe(s) && !De(s) && !R(s, "exec") && !J(s);
  }), n = v(e, (i) => ({
    message: "Token Type: ->" + i.name + "<- static 'PATTERN' can only be a RegExp, a Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.",
    type: j.INVALID_PATTERN,
    tokenTypes: [i]
  })), r = Tn(t, e);
  return { errors: n, valid: r };
}
const Pf = /[^\\][$]/;
function xf(t) {
  class e extends Ir {
    constructor() {
      super(...arguments), this.found = !1;
    }
    visitEndAnchor(i) {
      this.found = !0;
    }
  }
  const n = he(t, (r) => {
    const i = r.PATTERN;
    try {
      const s = _n(i), a = new e();
      return a.visit(s), a.found;
    } catch {
      return Pf.test(i.source);
    }
  });
  return v(n, (r) => ({
    message: `Unexpected RegExp Anchor Error:
	Token Type: ->` + r.name + `<- static 'PATTERN' cannot contain end of input anchor '$'
	See chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS	for details.`,
    type: j.EOI_ANCHOR_FOUND,
    tokenTypes: [r]
  }));
}
function wf(t) {
  const e = he(t, (n) => n.PATTERN.test(""));
  return v(e, (n) => ({
    message: "Token Type: ->" + n.name + "<- static 'PATTERN' must not match an empty string",
    type: j.EMPTY_MATCH_PATTERN,
    tokenTypes: [n]
  }));
}
const Uf = /[^\\[][\^]|^\^/;
function Df(t) {
  class e extends Ir {
    constructor() {
      super(...arguments), this.found = !1;
    }
    visitStartAnchor(i) {
      this.found = !0;
    }
  }
  const n = he(t, (r) => {
    const i = r.PATTERN;
    try {
      const s = _n(i), a = new e();
      return a.visit(s), a.found;
    } catch {
      return Uf.test(i.source);
    }
  });
  return v(n, (r) => ({
    message: `Unexpected RegExp Anchor Error:
	Token Type: ->` + r.name + `<- static 'PATTERN' cannot contain start of input anchor '^'
	See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS	for details.`,
    type: j.SOI_ANCHOR_FOUND,
    tokenTypes: [r]
  }));
}
function Ff(t) {
  const e = he(t, (n) => {
    const r = n[Ze];
    return r instanceof RegExp && (r.multiline || r.global);
  });
  return v(e, (n) => ({
    message: "Token Type: ->" + n.name + "<- static 'PATTERN' may NOT contain global('g') or multiline('m')",
    type: j.UNSUPPORTED_FLAGS_FOUND,
    tokenTypes: [n]
  }));
}
function $f(t) {
  const e = [];
  let n = v(t, (i) => ne(t, (s, a) => (i.PATTERN.source === a.PATTERN.source && !q(e, a) && a.PATTERN !== Y.NA && (e.push(a), s.push(a)), s), []));
  n = bt(n);
  const r = he(n, (i) => i.length > 1);
  return v(r, (i) => {
    const s = v(i, (a) => a.name);
    return {
      message: `The same RegExp pattern ->${me(i).PATTERN}<-has been used in all of the following Token Types: ${s.join(", ")} <-`,
      type: j.DUPLICATE_PATTERNS_FOUND,
      tokenTypes: i
    };
  });
}
function jf(t) {
  const e = he(t, (n) => {
    if (!R(n, "GROUP"))
      return !1;
    const r = n.GROUP;
    return r !== Y.SKIPPED && r !== Y.NA && !J(r);
  });
  return v(e, (n) => ({
    message: "Token Type: ->" + n.name + "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String",
    type: j.INVALID_GROUP_TYPE_FOUND,
    tokenTypes: [n]
  }));
}
function Gf(t, e) {
  const n = he(t, (r) => r.PUSH_MODE !== void 0 && !q(e, r.PUSH_MODE));
  return v(n, (r) => ({
    message: `Token Type: ->${r.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${r.PUSH_MODE}<-which does not exist`,
    type: j.PUSH_MODE_DOES_NOT_EXIST,
    tokenTypes: [r]
  }));
}
function Bf(t) {
  const e = [], n = ne(t, (r, i, s) => {
    const a = i.PATTERN;
    return a === Y.NA || (J(a) ? r.push({ str: a, idx: s, tokenType: i }) : xe(a) && Kf(a) && r.push({ str: a.source, idx: s, tokenType: i })), r;
  }, []);
  return I(t, (r, i) => {
    I(n, ({ str: s, idx: a, tokenType: o }) => {
      if (i < a && Vf(s, r.PATTERN)) {
        const c = `Token: ->${o.name}<- can never be matched.
Because it appears AFTER the Token Type ->${r.name}<-in the lexer's definition.
See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;
        e.push({
          message: c,
          type: j.UNREACHABLE_PATTERN,
          tokenTypes: [r, o]
        });
      }
    });
  }), e;
}
function Vf(t, e) {
  if (xe(e)) {
    const n = e.exec(t);
    return n !== null && n.index === 0;
  } else {
    if (De(e))
      return e(t, 0, [], {});
    if (R(e, "exec"))
      return e.exec(t, 0, [], {});
    if (typeof e == "string")
      return e === t;
    throw Error("non exhaustive match");
  }
}
function Kf(t) {
  return ht([
    ".",
    "\\",
    "[",
    "]",
    "|",
    "^",
    "$",
    "(",
    ")",
    "?",
    "*",
    "+",
    "{"
  ], (e) => t.source.indexOf(e) !== -1) === void 0;
}
function Ai(t) {
  const e = t.ignoreCase ? "i" : "";
  return new RegExp(`^(?:${t.source})`, e);
}
function _i(t) {
  const e = t.ignoreCase ? "iy" : "y";
  return new RegExp(`${t.source}`, e);
}
function Hf(t, e, n) {
  const r = [];
  return R(t, Tt) || r.push({
    message: "A MultiMode Lexer cannot be initialized without a <" + Tt + `> property in its definition
`,
    type: j.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE
  }), R(t, $t) || r.push({
    message: "A MultiMode Lexer cannot be initialized without a <" + $t + `> property in its definition
`,
    type: j.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY
  }), R(t, $t) && R(t, Tt) && !R(t.modes, t.defaultMode) && r.push({
    message: `A MultiMode Lexer cannot be initialized with a ${Tt}: <${t.defaultMode}>which does not exist
`,
    type: j.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST
  }), R(t, $t) && I(t.modes, (i, s) => {
    I(i, (a, o) => {
      if (we(a))
        r.push({
          message: `A Lexer cannot be initialized using an undefined Token Type. Mode:<${s}> at index: <${o}>
`,
          type: j.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED
        });
      else if (R(a, "LONGER_ALT")) {
        const c = N(a.LONGER_ALT) ? a.LONGER_ALT : [a.LONGER_ALT];
        I(c, (u) => {
          !we(u) && !q(i, u) && r.push({
            message: `A MultiMode Lexer cannot be initialized with a longer_alt <${u.name}> on token <${a.name}> outside of mode <${s}>
`,
            type: j.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE
          });
        });
      }
    });
  }), r;
}
function Wf(t, e, n) {
  const r = [];
  let i = !1;
  const s = bt(fe(V(t.modes))), a = yn(s, (c) => c[Ze] === Y.NA), o = ks(n);
  return e && I(a, (c) => {
    const u = Ls(c, o);
    if (u !== !1) {
      const l = {
        message: qf(c, u),
        type: u.issue,
        tokenType: c
      };
      r.push(l);
    } else
      R(c, "LINE_BREAKS") ? c.LINE_BREAKS === !0 && (i = !0) : Sr(o, c.PATTERN) && (i = !0);
  }), e && !i && r.push({
    message: `Warning: No LINE_BREAKS Found.
	This Lexer has been defined to track line and column information,
	But none of the Token Types can be identified as matching a line terminator.
	See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS 
	for details.`,
    type: j.NO_LINE_BREAKS_FLAGS
  }), r;
}
function zf(t) {
  const e = {}, n = le(t);
  return I(n, (r) => {
    const i = t[r];
    if (N(i))
      e[r] = [];
    else
      throw Error("non exhaustive match");
  }), e;
}
function Ss(t) {
  const e = t.PATTERN;
  if (xe(e))
    return !1;
  if (De(e) || R(e, "exec"))
    return !0;
  if (J(e))
    return !1;
  throw Error("non exhaustive match");
}
function Yf(t) {
  return J(t) && t.length === 1 ? t.charCodeAt(0) : !1;
}
const Xf = {
  // implements /\n|\r\n?/g.test
  test: function(t) {
    const e = t.length;
    for (let n = this.lastIndex; n < e; n++) {
      const r = t.charCodeAt(n);
      if (r === 10)
        return this.lastIndex = n + 1, !0;
      if (r === 13)
        return t.charCodeAt(n + 1) === 10 ? this.lastIndex = n + 2 : this.lastIndex = n + 1, !0;
    }
    return !1;
  },
  lastIndex: 0
};
function Ls(t, e) {
  if (R(t, "LINE_BREAKS"))
    return !1;
  if (xe(t.PATTERN)) {
    try {
      Sr(e, t.PATTERN);
    } catch (n) {
      return {
        issue: j.IDENTIFY_TERMINATOR,
        errMsg: n.message
      };
    }
    return !1;
  } else {
    if (J(t.PATTERN))
      return !1;
    if (Ss(t))
      return { issue: j.CUSTOM_LINE_BREAK };
    throw Error("non exhaustive match");
  }
}
function qf(t, e) {
  if (e.issue === j.IDENTIFY_TERMINATOR)
    return `Warning: unable to identify line terminator usage in pattern.
	The problem is in the <${t.name}> Token Type
	 Root cause: ${e.errMsg}.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR`;
  if (e.issue === j.CUSTOM_LINE_BREAK)
    return `Warning: A Custom Token Pattern should specify the <line_breaks> option.
	The problem is in the <${t.name}> Token Type
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK`;
  throw Error("non exhaustive match");
}
function ks(t) {
  return v(t, (e) => J(e) ? e.charCodeAt(0) : e);
}
function Nn(t, e, n) {
  t[e] === void 0 ? t[e] = [n] : t[e].push(n);
}
const yt = 256;
let Ht = [];
function Be(t) {
  return t < yt ? t : Ht[t];
}
function Qf() {
  if (w(Ht)) {
    Ht = new Array(65536);
    for (let t = 0; t < 65536; t++)
      Ht[t] = t > 255 ? 255 + ~~(t / 255) : t;
  }
}
function Mt(t, e) {
  const n = t.tokenTypeIdx;
  return n === e.tokenTypeIdx ? !0 : e.isParent === !0 && e.categoryMatchesMap[n] === !0;
}
function nn(t, e) {
  return t.tokenTypeIdx === e.tokenTypeIdx;
}
let vi = 1;
const Cs = {};
function Pt(t) {
  const e = Zf(t);
  Jf(e), tp(e), ep(e), I(e, (n) => {
    n.isParent = n.categoryMatches.length > 0;
  });
}
function Zf(t) {
  let e = W(t), n = t, r = !0;
  for (; r; ) {
    n = bt(fe(v(n, (s) => s.CATEGORIES)));
    const i = Tn(n, e);
    e = e.concat(i), w(i) ? r = !1 : n = i;
  }
  return e;
}
function Jf(t) {
  I(t, (e) => {
    Ns(e) || (Cs[vi] = e, e.tokenTypeIdx = vi++), Ri(e) && !N(e.CATEGORIES) && (e.CATEGORIES = [e.CATEGORIES]), Ri(e) || (e.CATEGORIES = []), np(e) || (e.categoryMatches = []), rp(e) || (e.categoryMatchesMap = {});
  });
}
function ep(t) {
  I(t, (e) => {
    e.categoryMatches = [], I(e.categoryMatchesMap, (n, r) => {
      e.categoryMatches.push(Cs[r].tokenTypeIdx);
    });
  });
}
function tp(t) {
  I(t, (e) => {
    bs([], e);
  });
}
function bs(t, e) {
  I(t, (n) => {
    e.categoryMatchesMap[n.tokenTypeIdx] = !0;
  }), I(e.CATEGORIES, (n) => {
    const r = t.concat(e);
    q(r, n) || bs(r, n);
  });
}
function Ns(t) {
  return R(t, "tokenTypeIdx");
}
function Ri(t) {
  return R(t, "CATEGORIES");
}
function np(t) {
  return R(t, "categoryMatches");
}
function rp(t) {
  return R(t, "categoryMatchesMap");
}
function ip(t) {
  return R(t, "tokenTypeIdx");
}
const sp = {
  buildUnableToPopLexerModeMessage(t) {
    return `Unable to pop Lexer Mode after encountering Token ->${t.image}<- The Mode Stack is empty`;
  },
  buildUnexpectedCharactersMessage(t, e, n, r, i) {
    return `unexpected character: ->${t.charAt(e)}<- at offset: ${e}, skipped ${n} characters.`;
  }
};
var j;
(function(t) {
  t[t.MISSING_PATTERN = 0] = "MISSING_PATTERN", t[t.INVALID_PATTERN = 1] = "INVALID_PATTERN", t[t.EOI_ANCHOR_FOUND = 2] = "EOI_ANCHOR_FOUND", t[t.UNSUPPORTED_FLAGS_FOUND = 3] = "UNSUPPORTED_FLAGS_FOUND", t[t.DUPLICATE_PATTERNS_FOUND = 4] = "DUPLICATE_PATTERNS_FOUND", t[t.INVALID_GROUP_TYPE_FOUND = 5] = "INVALID_GROUP_TYPE_FOUND", t[t.PUSH_MODE_DOES_NOT_EXIST = 6] = "PUSH_MODE_DOES_NOT_EXIST", t[t.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE = 7] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE", t[t.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY = 8] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY", t[t.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST = 9] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST", t[t.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED = 10] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED", t[t.SOI_ANCHOR_FOUND = 11] = "SOI_ANCHOR_FOUND", t[t.EMPTY_MATCH_PATTERN = 12] = "EMPTY_MATCH_PATTERN", t[t.NO_LINE_BREAKS_FLAGS = 13] = "NO_LINE_BREAKS_FLAGS", t[t.UNREACHABLE_PATTERN = 14] = "UNREACHABLE_PATTERN", t[t.IDENTIFY_TERMINATOR = 15] = "IDENTIFY_TERMINATOR", t[t.CUSTOM_LINE_BREAK = 16] = "CUSTOM_LINE_BREAK", t[t.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE = 17] = "MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE";
})(j || (j = {}));
const At = {
  deferDefinitionErrorsHandling: !1,
  positionTracking: "full",
  lineTerminatorsPattern: /\n|\r\n?/g,
  lineTerminatorCharacters: [`
`, "\r"],
  ensureOptimizations: !1,
  safeMode: !1,
  errorMessageProvider: sp,
  traceInitPerf: !1,
  skipValidations: !1,
  recoveryEnabled: !0
};
Object.freeze(At);
class Y {
  constructor(e, n = At) {
    if (this.lexerDefinition = e, this.lexerDefinitionErrors = [], this.lexerDefinitionWarning = [], this.patternIdxToConfig = {}, this.charCodeToPatternIdxToConfig = {}, this.modes = [], this.emptyGroups = {}, this.trackStartLines = !0, this.trackEndLines = !0, this.hasCustom = !1, this.canModeBeOptimized = {}, this.TRACE_INIT = (i, s) => {
      if (this.traceInitPerf === !0) {
        this.traceInitIndent++;
        const a = new Array(this.traceInitIndent + 1).join("	");
        this.traceInitIndent < this.traceInitMaxIdent && console.log(`${a}--> <${i}>`);
        const { time: o, value: c } = _s(s), u = o > 10 ? console.warn : console.log;
        return this.traceInitIndent < this.traceInitMaxIdent && u(`${a}<-- <${i}> time: ${o}ms`), this.traceInitIndent--, c;
      } else
        return s();
    }, typeof n == "boolean")
      throw Error(`The second argument to the Lexer constructor is now an ILexerConfig Object.
a boolean 2nd argument is no longer supported`);
    this.config = te({}, At, n);
    const r = this.config.traceInitPerf;
    r === !0 ? (this.traceInitMaxIdent = 1 / 0, this.traceInitPerf = !0) : typeof r == "number" && (this.traceInitMaxIdent = r, this.traceInitPerf = !0), this.traceInitIndent = -1, this.TRACE_INIT("Lexer Constructor", () => {
      let i, s = !0;
      this.TRACE_INIT("Lexer Config handling", () => {
        if (this.config.lineTerminatorsPattern === At.lineTerminatorsPattern)
          this.config.lineTerminatorsPattern = Xf;
        else if (this.config.lineTerminatorCharacters === At.lineTerminatorCharacters)
          throw Error(`Error: Missing <lineTerminatorCharacters> property on the Lexer config.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS`);
        if (n.safeMode && n.ensureOptimizations)
          throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
        this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking), this.trackEndLines = /full/i.test(this.config.positionTracking), N(e) ? i = {
          modes: { defaultMode: W(e) },
          defaultMode: Tt
        } : (s = !1, i = W(e));
      }), this.config.skipValidations === !1 && (this.TRACE_INIT("performRuntimeChecks", () => {
        this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(Hf(i, this.trackStartLines, this.config.lineTerminatorCharacters));
      }), this.TRACE_INIT("performWarningRuntimeChecks", () => {
        this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(Wf(i, this.trackStartLines, this.config.lineTerminatorCharacters));
      })), i.modes = i.modes ? i.modes : {}, I(i.modes, (o, c) => {
        i.modes[c] = yn(o, (u) => we(u));
      });
      const a = le(i.modes);
      if (I(i.modes, (o, c) => {
        this.TRACE_INIT(`Mode: <${c}> processing`, () => {
          if (this.modes.push(c), this.config.skipValidations === !1 && this.TRACE_INIT("validatePatterns", () => {
            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(Cf(o, a));
          }), w(this.lexerDefinitionErrors)) {
            Pt(o);
            let u;
            this.TRACE_INIT("analyzeTokenTypes", () => {
              u = kf(o, {
                lineTerminatorCharacters: this.config.lineTerminatorCharacters,
                positionTracking: n.positionTracking,
                ensureOptimizations: n.ensureOptimizations,
                safeMode: n.safeMode,
                tracer: this.TRACE_INIT
              });
            }), this.patternIdxToConfig[c] = u.patternIdxToConfig, this.charCodeToPatternIdxToConfig[c] = u.charCodeToPatternIdxToConfig, this.emptyGroups = te({}, this.emptyGroups, u.emptyGroups), this.hasCustom = u.hasCustom || this.hasCustom, this.canModeBeOptimized[c] = u.canBeOptimized;
          }
        });
      }), this.defaultMode = i.defaultMode, !w(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {
        const o = v(this.lexerDefinitionErrors, (c) => c.message).join(`-----------------------
`);
        throw new Error(`Errors detected in definition of Lexer:
` + o);
      }
      I(this.lexerDefinitionWarning, (o) => {
        As(o.message);
      }), this.TRACE_INIT("Choosing sub-methods implementations", () => {
        if (Is ? (this.chopInput = ct, this.match = this.matchWithTest) : (this.updateLastIndex = B, this.match = this.matchWithExec), s && (this.handleModes = B), this.trackStartLines === !1 && (this.computeNewColumn = ct), this.trackEndLines === !1 && (this.updateTokenEndLineColumnLocation = B), /full/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createFullToken;
        else if (/onlyStart/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createStartOnlyToken;
        else if (/onlyOffset/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createOffsetOnlyToken;
        else
          throw Error(`Invalid <positionTracking> config option: "${this.config.positionTracking}"`);
        this.hasCustom ? (this.addToken = this.addTokenUsingPush, this.handlePayload = this.handlePayloadWithCustom) : (this.addToken = this.addTokenUsingMemberAccess, this.handlePayload = this.handlePayloadNoCustom);
      }), this.TRACE_INIT("Failed Optimization Warnings", () => {
        const o = ne(this.canModeBeOptimized, (c, u, l) => (u === !1 && c.push(l), c), []);
        if (n.ensureOptimizations && !w(o))
          throw Error(`Lexer Modes: < ${o.join(", ")} > cannot be optimized.
	 Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.
	 Or inspect the console log for details on how to resolve these issues.`);
      }), this.TRACE_INIT("clearRegExpParserCache", () => {
        Of();
      }), this.TRACE_INIT("toFastProperties", () => {
        vs(this);
      });
    });
  }
  tokenize(e, n = this.defaultMode) {
    if (!w(this.lexerDefinitionErrors)) {
      const r = v(this.lexerDefinitionErrors, (i) => i.message).join(`-----------------------
`);
      throw new Error(`Unable to Tokenize because Errors detected in definition of Lexer:
` + r);
    }
    return this.tokenizeInternal(e, n);
  }
  // There is quite a bit of duplication between this and "tokenizeInternalLazy"
  // This is intentional due to performance considerations.
  // this method also used quite a bit of `!` none null assertions because it is too optimized
  // for `tsc` to always understand it is "safe"
  tokenizeInternal(e, n) {
    let r, i, s, a, o, c, u, l, h, f, T, d, _, O, A;
    const y = e, p = y.length;
    let m = 0, L = 0;
    const z = this.hasCustom ? 0 : Math.floor(e.length / 10), ie = new Array(z), ye = [];
    let He = this.trackStartLines ? 1 : void 0, Ae = this.trackStartLines ? 1 : void 0;
    const We = zf(this.emptyGroups), In = this.trackStartLines, dt = this.config.lineTerminatorsPattern;
    let rt = 0, _e = [], ze = [];
    const it = [], st = [];
    Object.freeze(st);
    let Ye;
    function wt() {
      return _e;
    }
    function g(P) {
      const G = Be(P), be = ze[G];
      return be === void 0 ? st : be;
    }
    const E = (P) => {
      if (it.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a "transition"
      // So no error should occur.
      P.tokenType.PUSH_MODE === void 0) {
        const G = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(P);
        ye.push({
          offset: P.startOffset,
          line: P.startLine,
          column: P.startColumn,
          length: P.image.length,
          message: G
        });
      } else {
        it.pop();
        const G = lt(it);
        _e = this.patternIdxToConfig[G], ze = this.charCodeToPatternIdxToConfig[G], rt = _e.length;
        const be = this.canModeBeOptimized[G] && this.config.safeMode === !1;
        ze && be ? Ye = g : Ye = wt;
      }
    };
    function k(P) {
      it.push(P), ze = this.charCodeToPatternIdxToConfig[P], _e = this.patternIdxToConfig[P], rt = _e.length, rt = _e.length;
      const G = this.canModeBeOptimized[P] && this.config.safeMode === !1;
      ze && G ? Ye = g : Ye = wt;
    }
    k.call(this, n);
    let C;
    const D = this.config.recoveryEnabled;
    for (; m < p; ) {
      c = null;
      const P = y.charCodeAt(m), G = Ye(P), be = G.length;
      for (r = 0; r < be; r++) {
        C = G[r];
        const Q = C.pattern;
        u = null;
        const Ne = C.short;
        if (Ne !== !1 ? P === Ne && (c = Q) : C.isCustom === !0 ? (A = Q.exec(y, m, ie, We), A !== null ? (c = A[0], A.payload !== void 0 && (u = A.payload)) : c = null) : (this.updateLastIndex(Q, m), c = this.match(Q, e, m)), c !== null) {
          if (o = C.longerAlt, o !== void 0) {
            const je = o.length;
            for (s = 0; s < je; s++) {
              const Me = _e[o[s]], Xe = Me.pattern;
              if (l = null, Me.isCustom === !0 ? (A = Xe.exec(y, m, ie, We), A !== null ? (a = A[0], A.payload !== void 0 && (l = A.payload)) : a = null) : (this.updateLastIndex(Xe, m), a = this.match(Xe, e, m)), a && a.length > c.length) {
                c = a, u = l, C = Me;
                break;
              }
            }
          }
          break;
        }
      }
      if (c !== null) {
        if (h = c.length, f = C.group, f !== void 0 && (T = C.tokenTypeIdx, d = this.createTokenInstance(c, m, T, C.tokenType, He, Ae, h), this.handlePayload(d, u), f === !1 ? L = this.addToken(ie, L, d) : We[f].push(d)), e = this.chopInput(e, h), m = m + h, Ae = this.computeNewColumn(Ae, h), In === !0 && C.canLineTerminator === !0) {
          let Q = 0, Ne, je;
          dt.lastIndex = 0;
          do
            Ne = dt.test(c), Ne === !0 && (je = dt.lastIndex - 1, Q++);
          while (Ne === !0);
          Q !== 0 && (He = He + Q, Ae = h - je, this.updateTokenEndLineColumnLocation(d, f, je, Q, He, Ae, h));
        }
        this.handleModes(C, E, k, d);
      } else {
        const Q = m, Ne = He, je = Ae;
        let Me = D === !1;
        for (; Me === !1 && m < p; )
          for (e = this.chopInput(e, 1), m++, i = 0; i < rt; i++) {
            const Xe = _e[i], Sn = Xe.pattern, wr = Xe.short;
            if (wr !== !1 ? y.charCodeAt(m) === wr && (Me = !0) : Xe.isCustom === !0 ? Me = Sn.exec(y, m, ie, We) !== null : (this.updateLastIndex(Sn, m), Me = Sn.exec(e) !== null), Me === !0)
              break;
          }
        if (_ = m - Q, Ae = this.computeNewColumn(Ae, _), O = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(y, Q, _, Ne, je), ye.push({
          offset: Q,
          line: Ne,
          column: je,
          length: _,
          message: O
        }), D === !1)
          break;
      }
    }
    return this.hasCustom || (ie.length = L), {
      tokens: ie,
      groups: We,
      errors: ye
    };
  }
  handleModes(e, n, r, i) {
    if (e.pop === !0) {
      const s = e.push;
      n(i), s !== void 0 && r.call(this, s);
    } else e.push !== void 0 && r.call(this, e.push);
  }
  chopInput(e, n) {
    return e.substring(n);
  }
  updateLastIndex(e, n) {
    e.lastIndex = n;
  }
  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler
  updateTokenEndLineColumnLocation(e, n, r, i, s, a, o) {
    let c, u;
    n !== void 0 && (c = r === o - 1, u = c ? -1 : 0, i === 1 && c === !0 || (e.endLine = s + u, e.endColumn = a - 1 + -u));
  }
  computeNewColumn(e, n) {
    return e + n;
  }
  createOffsetOnlyToken(e, n, r, i) {
    return {
      image: e,
      startOffset: n,
      tokenTypeIdx: r,
      tokenType: i
    };
  }
  createStartOnlyToken(e, n, r, i, s, a) {
    return {
      image: e,
      startOffset: n,
      startLine: s,
      startColumn: a,
      tokenTypeIdx: r,
      tokenType: i
    };
  }
  createFullToken(e, n, r, i, s, a, o) {
    return {
      image: e,
      startOffset: n,
      endOffset: n + o - 1,
      startLine: s,
      endLine: s,
      startColumn: a,
      endColumn: a + o - 1,
      tokenTypeIdx: r,
      tokenType: i
    };
  }
  addTokenUsingPush(e, n, r) {
    return e.push(r), n;
  }
  addTokenUsingMemberAccess(e, n, r) {
    return e[n] = r, n++, n;
  }
  handlePayloadNoCustom(e, n) {
  }
  handlePayloadWithCustom(e, n) {
    n !== null && (e.payload = n);
  }
  matchWithTest(e, n, r) {
    return e.test(n) === !0 ? n.substring(r, e.lastIndex) : null;
  }
  matchWithExec(e, n) {
    const r = e.exec(n);
    return r !== null ? r[0] : null;
  }
}
Y.SKIPPED = "This marks a skipped Token pattern, this means each token identified by it willbe consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.";
Y.NA = /NOT_APPLICABLE/;
function vt(t) {
  return Ms(t) ? t.LABEL : t.name;
}
function Ms(t) {
  return J(t.LABEL) && t.LABEL !== "";
}
const ap = "parent", Oi = "categories", Ii = "label", Si = "group", Li = "push_mode", ki = "pop_mode", Ci = "longer_alt", bi = "line_breaks", Ni = "start_chars_hint";
function M(t) {
  return op(t);
}
function op(t) {
  const e = t.pattern, n = {};
  if (n.name = t.name, we(e) || (n.PATTERN = e), R(t, ap))
    throw `The parent property is no longer supported.
See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.`;
  return R(t, Oi) && (n.CATEGORIES = t[Oi]), Pt([n]), R(t, Ii) && (n.LABEL = t[Ii]), R(t, Si) && (n.GROUP = t[Si]), R(t, ki) && (n.POP_MODE = t[ki]), R(t, Li) && (n.PUSH_MODE = t[Li]), R(t, Ci) && (n.LONGER_ALT = t[Ci]), R(t, bi) && (n.LINE_BREAKS = t[bi]), R(t, Ni) && (n.START_CHARS_HINT = t[Ni]), n;
}
const Je = M({ name: "EOF", pattern: Y.NA });
Pt([Je]);
function Lr(t, e, n, r, i, s, a, o) {
  return {
    image: e,
    startOffset: n,
    endOffset: r,
    startLine: i,
    endLine: s,
    startColumn: a,
    endColumn: o,
    tokenTypeIdx: t.tokenTypeIdx,
    tokenType: t
  };
}
function cp(t, e) {
  return Mt(t, e);
}
const Ps = {
  buildMismatchTokenMessage({ expected: t, actual: e, previous: n, ruleName: r }) {
    return `Expecting ${Ms(t) ? `--> ${vt(t)} <--` : `token of type --> ${t.name} <--`} but found --> '${e.image}' <--`;
  },
  buildNotAllInputParsedMessage({ firstRedundant: t, ruleName: e }) {
    return "Redundant input, expecting EOF but found: " + t.image;
  },
  buildNoViableAltMessage({ expectedPathsPerAlt: t, actual: e, previous: n, customUserDescription: r, ruleName: i }) {
    const s = "Expecting: ", a = `
but found: '` + me(e).image + "'";
    if (r)
      return s + r + a;
    {
      const o = ne(t, (l, h) => l.concat(h), []), c = v(o, (l) => `[${v(l, (h) => vt(h)).join(", ")}]`), u = `one of these possible Token sequences:
${v(c, (l, h) => `  ${h + 1}. ${l}`).join(`
`)}`;
      return s + u + a;
    }
  },
  buildEarlyExitMessage({ expectedIterationPaths: t, actual: e, customUserDescription: n, ruleName: r }) {
    const i = "Expecting: ", s = `
but found: '` + me(e).image + "'";
    if (n)
      return i + n + s;
    {
      const a = `expecting at least one iteration which starts with one of these possible Token sequences::
  <${v(t, (o) => `[${v(o, (c) => vt(c)).join(",")}]`).join(" ,")}>`;
      return i + a + s;
    }
  }
};
Object.freeze(Ps);
const up = {
  buildRuleNotFoundError(t, e) {
    return "Invalid grammar, reference to a rule which is not defined: ->" + e.nonTerminalName + `<-
inside top level rule: ->` + t.name + "<-";
  }
}, qe = {
  buildDuplicateFoundError(t, e) {
    function n(l) {
      return l instanceof F ? l.terminalType.name : l instanceof re ? l.nonTerminalName : "";
    }
    const r = t.name, i = me(e), s = i.idx, a = ve(i), o = n(i), c = s > 0;
    let u = `->${a}${c ? s : ""}<- ${o ? `with argument: ->${o}<-` : ""}
                  appears more than once (${e.length} times) in the top level rule: ->${r}<-.                  
                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES 
                  `;
    return u = u.replace(/[ \t]+/g, " "), u = u.replace(/\s\s+/g, `
`), u;
  },
  buildNamespaceConflictError(t) {
    return `Namespace conflict found in grammar.
The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${t.name}>.
To resolve this make sure each Terminal and Non-Terminal names are unique
This is easy to accomplish by using the convention that Terminal names start with an uppercase letter
and Non-Terminal names start with a lower case letter.`;
  },
  buildAlternationPrefixAmbiguityError(t) {
    const e = v(t.prefixPath, (r) => vt(r)).join(", "), n = t.alternation.idx === 0 ? "" : t.alternation.idx;
    return `Ambiguous alternatives: <${t.ambiguityIndices.join(" ,")}> due to common lookahead prefix
in <OR${n}> inside <${t.topLevelRule.name}> Rule,
<${e}> may appears as a prefix path in all these alternatives.
See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX
For Further details.`;
  },
  buildAlternationAmbiguityError(t) {
    const e = v(t.prefixPath, (i) => vt(i)).join(", "), n = t.alternation.idx === 0 ? "" : t.alternation.idx;
    let r = `Ambiguous Alternatives Detected: <${t.ambiguityIndices.join(" ,")}> in <OR${n}> inside <${t.topLevelRule.name}> Rule,
<${e}> may appears as a prefix path in all these alternatives.
`;
    return r = r + `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES
For Further details.`, r;
  },
  buildEmptyRepetitionError(t) {
    let e = ve(t.repetition);
    return t.repetition.idx !== 0 && (e += t.repetition.idx), `The repetition <${e}> within Rule <${t.topLevelRule.name}> can never consume any tokens.
This could lead to an infinite loop.`;
  },
  // TODO: remove - `errors_public` from nyc.config.js exclude
  //       once this method is fully removed from this file
  buildTokenNameError(t) {
    return "deprecated";
  },
  buildEmptyAlternationError(t) {
    return `Ambiguous empty alternative: <${t.emptyChoiceIdx + 1}> in <OR${t.alternation.idx}> inside <${t.topLevelRule.name}> Rule.
Only the last alternative may be an empty alternative.`;
  },
  buildTooManyAlternativesError(t) {
    return `An Alternation cannot have more than 256 alternatives:
<OR${t.alternation.idx}> inside <${t.topLevelRule.name}> Rule.
 has ${t.alternation.definition.length + 1} alternatives.`;
  },
  buildLeftRecursionError(t) {
    const e = t.topLevelRule.name, n = v(t.leftRecursionPath, (i) => i.name), r = `${e} --> ${n.concat([e]).join(" --> ")}`;
    return `Left Recursion found in grammar.
rule: <${e}> can be invoked from itself (directly or indirectly)
without consuming any Tokens. The grammar path that causes this is: 
 ${r}
 To fix this refactor your grammar to remove the left recursion.
see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;
  },
  // TODO: remove - `errors_public` from nyc.config.js exclude
  //       once this method is fully removed from this file
  buildInvalidRuleNameError(t) {
    return "deprecated";
  },
  buildDuplicateRuleNameError(t) {
    let e;
    return t.topLevelRule instanceof ft ? e = t.topLevelRule.name : e = t.topLevelRule, `Duplicate definition, rule: ->${e}<- is already defined in the grammar: ->${t.grammarName}<-`;
  }
};
function lp(t, e) {
  const n = new hp(t, e);
  return n.resolveRefs(), n.errors;
}
class hp extends pt {
  constructor(e, n) {
    super(), this.nameToTopRule = e, this.errMsgProvider = n, this.errors = [];
  }
  resolveRefs() {
    I(V(this.nameToTopRule), (e) => {
      this.currTopLevel = e, e.accept(this);
    });
  }
  visitNonTerminal(e) {
    const n = this.nameToTopRule[e.nonTerminalName];
    if (n)
      e.referencedRule = n;
    else {
      const r = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, e);
      this.errors.push({
        message: r,
        type: X.UNRESOLVED_SUBRULE_REF,
        ruleName: this.currTopLevel.name,
        unresolvedRefName: e.nonTerminalName
      });
    }
  }
}
class fp extends An {
  constructor(e, n) {
    super(), this.topProd = e, this.path = n, this.possibleTokTypes = [], this.nextProductionName = "", this.nextProductionOccurrence = 0, this.found = !1, this.isAtEndOfPath = !1;
  }
  startWalking() {
    if (this.found = !1, this.path.ruleStack[0] !== this.topProd.name)
      throw Error("The path does not start with the walker's top Rule!");
    return this.ruleStack = W(this.path.ruleStack).reverse(), this.occurrenceStack = W(this.path.occurrenceStack).reverse(), this.ruleStack.pop(), this.occurrenceStack.pop(), this.updateExpectedNext(), this.walk(this.topProd), this.possibleTokTypes;
  }
  walk(e, n = []) {
    this.found || super.walk(e, n);
  }
  walkProdRef(e, n, r) {
    if (e.referencedRule.name === this.nextProductionName && e.idx === this.nextProductionOccurrence) {
      const i = n.concat(r);
      this.updateExpectedNext(), this.walk(e.referencedRule, i);
    }
  }
  updateExpectedNext() {
    w(this.ruleStack) ? (this.nextProductionName = "", this.nextProductionOccurrence = 0, this.isAtEndOfPath = !0) : (this.nextProductionName = this.ruleStack.pop(), this.nextProductionOccurrence = this.occurrenceStack.pop());
  }
}
class pp extends fp {
  constructor(e, n) {
    super(e, n), this.path = n, this.nextTerminalName = "", this.nextTerminalOccurrence = 0, this.nextTerminalName = this.path.lastTok.name, this.nextTerminalOccurrence = this.path.lastTokOccurrence;
  }
  walkTerminal(e, n, r) {
    if (this.isAtEndOfPath && e.terminalType.name === this.nextTerminalName && e.idx === this.nextTerminalOccurrence && !this.found) {
      const i = n.concat(r), s = new ee({ definition: i });
      this.possibleTokTypes = Nt(s), this.found = !0;
    }
  }
}
class vn extends An {
  constructor(e, n) {
    super(), this.topRule = e, this.occurrence = n, this.result = {
      token: void 0,
      occurrence: void 0,
      isEndOfRule: void 0
    };
  }
  startWalking() {
    return this.walk(this.topRule), this.result;
  }
}
class dp extends vn {
  walkMany(e, n, r) {
    if (e.idx === this.occurrence) {
      const i = me(n.concat(r));
      this.result.isEndOfRule = i === void 0, i instanceof F && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkMany(e, n, r);
  }
}
class Mi extends vn {
  walkManySep(e, n, r) {
    if (e.idx === this.occurrence) {
      const i = me(n.concat(r));
      this.result.isEndOfRule = i === void 0, i instanceof F && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkManySep(e, n, r);
  }
}
class mp extends vn {
  walkAtLeastOne(e, n, r) {
    if (e.idx === this.occurrence) {
      const i = me(n.concat(r));
      this.result.isEndOfRule = i === void 0, i instanceof F && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkAtLeastOne(e, n, r);
  }
}
class Pi extends vn {
  walkAtLeastOneSep(e, n, r) {
    if (e.idx === this.occurrence) {
      const i = me(n.concat(r));
      this.result.isEndOfRule = i === void 0, i instanceof F && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkAtLeastOneSep(e, n, r);
  }
}
function Wn(t, e, n = []) {
  n = W(n);
  let r = [], i = 0;
  function s(o) {
    return o.concat(H(t, i + 1));
  }
  function a(o) {
    const c = Wn(s(o), e, n);
    return r.concat(c);
  }
  for (; n.length < e && i < t.length; ) {
    const o = t[i];
    if (o instanceof ee || o instanceof re)
      return a(o.definition);
    if (o instanceof Z)
      r = a(o.definition);
    else if (o instanceof ke) {
      const c = o.definition.concat([
        new K({
          definition: o.definition
        })
      ]);
      return a(c);
    } else if (o instanceof Ce) {
      const c = [
        new ee({ definition: o.definition }),
        new K({
          definition: [new F({ terminalType: o.separator })].concat(o.definition)
        })
      ];
      return a(c);
    } else if (o instanceof Ee) {
      const c = o.definition.concat([
        new K({
          definition: [new F({ terminalType: o.separator })].concat(o.definition)
        })
      ]);
      r = a(c);
    } else if (o instanceof K) {
      const c = o.definition.concat([
        new K({
          definition: o.definition
        })
      ]);
      r = a(c);
    } else {
      if (o instanceof Te)
        return I(o.definition, (c) => {
          w(c.definition) === !1 && (r = a(c.definition));
        }), r;
      if (o instanceof F)
        n.push(o.terminalType);
      else
        throw Error("non exhaustive match");
    }
    i++;
  }
  return r.push({
    partialPath: n,
    suffixDef: H(t, i)
  }), r;
}
function xs(t, e, n, r) {
  const i = "EXIT_NONE_TERMINAL", s = [i], a = "EXIT_ALTERNATIVE";
  let o = !1;
  const c = e.length, u = c - r - 1, l = [], h = [];
  for (h.push({
    idx: -1,
    def: t,
    ruleStack: [],
    occurrenceStack: []
  }); !w(h); ) {
    const f = h.pop();
    if (f === a) {
      o && lt(h).idx <= u && h.pop();
      continue;
    }
    const T = f.def, d = f.idx, _ = f.ruleStack, O = f.occurrenceStack;
    if (w(T))
      continue;
    const A = T[0];
    if (A === i) {
      const y = {
        idx: d,
        def: H(T),
        ruleStack: St(_),
        occurrenceStack: St(O)
      };
      h.push(y);
    } else if (A instanceof F)
      if (d < c - 1) {
        const y = d + 1, p = e[y];
        if (n(p, A.terminalType)) {
          const m = {
            idx: y,
            def: H(T),
            ruleStack: _,
            occurrenceStack: O
          };
          h.push(m);
        }
      } else if (d === c - 1)
        l.push({
          nextTokenType: A.terminalType,
          nextTokenOccurrence: A.idx,
          ruleStack: _,
          occurrenceStack: O
        }), o = !0;
      else
        throw Error("non exhaustive match");
    else if (A instanceof re) {
      const y = W(_);
      y.push(A.nonTerminalName);
      const p = W(O);
      p.push(A.idx);
      const m = {
        idx: d,
        def: A.definition.concat(s, H(T)),
        ruleStack: y,
        occurrenceStack: p
      };
      h.push(m);
    } else if (A instanceof Z) {
      const y = {
        idx: d,
        def: H(T),
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(y), h.push(a);
      const p = {
        idx: d,
        def: A.definition.concat(H(T)),
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(p);
    } else if (A instanceof ke) {
      const y = new K({
        definition: A.definition,
        idx: A.idx
      }), p = A.definition.concat([y], H(T)), m = {
        idx: d,
        def: p,
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(m);
    } else if (A instanceof Ce) {
      const y = new F({
        terminalType: A.separator
      }), p = new K({
        definition: [y].concat(A.definition),
        idx: A.idx
      }), m = A.definition.concat([p], H(T)), L = {
        idx: d,
        def: m,
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(L);
    } else if (A instanceof Ee) {
      const y = {
        idx: d,
        def: H(T),
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(y), h.push(a);
      const p = new F({
        terminalType: A.separator
      }), m = new K({
        definition: [p].concat(A.definition),
        idx: A.idx
      }), L = A.definition.concat([m], H(T)), z = {
        idx: d,
        def: L,
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(z);
    } else if (A instanceof K) {
      const y = {
        idx: d,
        def: H(T),
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(y), h.push(a);
      const p = new K({
        definition: A.definition,
        idx: A.idx
      }), m = A.definition.concat([p], H(T)), L = {
        idx: d,
        def: m,
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(L);
    } else if (A instanceof Te)
      for (let y = A.definition.length - 1; y >= 0; y--) {
        const p = A.definition[y], m = {
          idx: d,
          def: p.definition.concat(H(T)),
          ruleStack: _,
          occurrenceStack: O
        };
        h.push(m), h.push(a);
      }
    else if (A instanceof ee)
      h.push({
        idx: d,
        def: A.definition.concat(H(T)),
        ruleStack: _,
        occurrenceStack: O
      });
    else if (A instanceof ft)
      h.push(gp(A, d, _, O));
    else
      throw Error("non exhaustive match");
  }
  return l;
}
function gp(t, e, n, r) {
  const i = W(n);
  i.push(t.name);
  const s = W(r);
  return s.push(1), {
    idx: e,
    def: t.definition,
    ruleStack: i,
    occurrenceStack: s
  };
}
var $;
(function(t) {
  t[t.OPTION = 0] = "OPTION", t[t.REPETITION = 1] = "REPETITION", t[t.REPETITION_MANDATORY = 2] = "REPETITION_MANDATORY", t[t.REPETITION_MANDATORY_WITH_SEPARATOR = 3] = "REPETITION_MANDATORY_WITH_SEPARATOR", t[t.REPETITION_WITH_SEPARATOR = 4] = "REPETITION_WITH_SEPARATOR", t[t.ALTERNATION = 5] = "ALTERNATION";
})($ || ($ = {}));
function ws(t) {
  if (t instanceof Z || t === "Option")
    return $.OPTION;
  if (t instanceof K || t === "Repetition")
    return $.REPETITION;
  if (t instanceof ke || t === "RepetitionMandatory")
    return $.REPETITION_MANDATORY;
  if (t instanceof Ce || t === "RepetitionMandatoryWithSeparator")
    return $.REPETITION_MANDATORY_WITH_SEPARATOR;
  if (t instanceof Ee || t === "RepetitionWithSeparator")
    return $.REPETITION_WITH_SEPARATOR;
  if (t instanceof Te || t === "Alternation")
    return $.ALTERNATION;
  throw Error("non exhaustive match");
}
function Ep(t, e, n, r, i, s) {
  const a = kr(t, e, n), o = Fs(a) ? nn : Mt;
  return s(a, r, o, i);
}
function Tp(t, e, n, r, i, s) {
  const a = Cr(t, e, i, n), o = Fs(a) ? nn : Mt;
  return s(a[0], o, r);
}
function yp(t, e, n, r) {
  const i = t.length, s = pe(t, (a) => pe(a, (o) => o.length === 1));
  if (e)
    return function(a) {
      const o = v(a, (c) => c.GATE);
      for (let c = 0; c < i; c++) {
        const u = t[c], l = u.length, h = o[c];
        if (!(h !== void 0 && h.call(this) === !1))
          e: for (let f = 0; f < l; f++) {
            const T = u[f], d = T.length;
            for (let _ = 0; _ < d; _++) {
              const O = this.LA(_ + 1);
              if (n(O, T[_]) === !1)
                continue e;
            }
            return c;
          }
      }
    };
  if (s && !r) {
    const a = v(t, (c) => fe(c)), o = ne(a, (c, u, l) => (I(u, (h) => {
      R(c, h.tokenTypeIdx) || (c[h.tokenTypeIdx] = l), I(h.categoryMatches, (f) => {
        R(c, f) || (c[f] = l);
      });
    }), c), {});
    return function() {
      const c = this.LA(1);
      return o[c.tokenTypeIdx];
    };
  } else
    return function() {
      for (let a = 0; a < i; a++) {
        const o = t[a], c = o.length;
        e: for (let u = 0; u < c; u++) {
          const l = o[u], h = l.length;
          for (let f = 0; f < h; f++) {
            const T = this.LA(f + 1);
            if (n(T, l[f]) === !1)
              continue e;
          }
          return a;
        }
      }
    };
}
function Ap(t, e, n) {
  const r = pe(t, (s) => s.length === 1), i = t.length;
  if (r && !n) {
    const s = fe(t);
    if (s.length === 1 && w(s[0].categoryMatches)) {
      const a = s[0].tokenTypeIdx;
      return function() {
        return this.LA(1).tokenTypeIdx === a;
      };
    } else {
      const a = ne(s, (o, c, u) => (o[c.tokenTypeIdx] = !0, I(c.categoryMatches, (l) => {
        o[l] = !0;
      }), o), []);
      return function() {
        const o = this.LA(1);
        return a[o.tokenTypeIdx] === !0;
      };
    }
  } else
    return function() {
      e: for (let s = 0; s < i; s++) {
        const a = t[s], o = a.length;
        for (let c = 0; c < o; c++) {
          const u = this.LA(c + 1);
          if (e(u, a[c]) === !1)
            continue e;
        }
        return !0;
      }
      return !1;
    };
}
class _p extends An {
  constructor(e, n, r) {
    super(), this.topProd = e, this.targetOccurrence = n, this.targetProdType = r;
  }
  startWalking() {
    return this.walk(this.topProd), this.restDef;
  }
  checkIsTarget(e, n, r, i) {
    return e.idx === this.targetOccurrence && this.targetProdType === n ? (this.restDef = r.concat(i), !0) : !1;
  }
  walkOption(e, n, r) {
    this.checkIsTarget(e, $.OPTION, n, r) || super.walkOption(e, n, r);
  }
  walkAtLeastOne(e, n, r) {
    this.checkIsTarget(e, $.REPETITION_MANDATORY, n, r) || super.walkOption(e, n, r);
  }
  walkAtLeastOneSep(e, n, r) {
    this.checkIsTarget(e, $.REPETITION_MANDATORY_WITH_SEPARATOR, n, r) || super.walkOption(e, n, r);
  }
  walkMany(e, n, r) {
    this.checkIsTarget(e, $.REPETITION, n, r) || super.walkOption(e, n, r);
  }
  walkManySep(e, n, r) {
    this.checkIsTarget(e, $.REPETITION_WITH_SEPARATOR, n, r) || super.walkOption(e, n, r);
  }
}
class Us extends pt {
  constructor(e, n, r) {
    super(), this.targetOccurrence = e, this.targetProdType = n, this.targetRef = r, this.result = [];
  }
  checkIsTarget(e, n) {
    e.idx === this.targetOccurrence && this.targetProdType === n && (this.targetRef === void 0 || e === this.targetRef) && (this.result = e.definition);
  }
  visitOption(e) {
    this.checkIsTarget(e, $.OPTION);
  }
  visitRepetition(e) {
    this.checkIsTarget(e, $.REPETITION);
  }
  visitRepetitionMandatory(e) {
    this.checkIsTarget(e, $.REPETITION_MANDATORY);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.checkIsTarget(e, $.REPETITION_MANDATORY_WITH_SEPARATOR);
  }
  visitRepetitionWithSeparator(e) {
    this.checkIsTarget(e, $.REPETITION_WITH_SEPARATOR);
  }
  visitAlternation(e) {
    this.checkIsTarget(e, $.ALTERNATION);
  }
}
function xi(t) {
  const e = new Array(t);
  for (let n = 0; n < t; n++)
    e[n] = [];
  return e;
}
function Mn(t) {
  let e = [""];
  for (let n = 0; n < t.length; n++) {
    const r = t[n], i = [];
    for (let s = 0; s < e.length; s++) {
      const a = e[s];
      i.push(a + "_" + r.tokenTypeIdx);
      for (let o = 0; o < r.categoryMatches.length; o++) {
        const c = "_" + r.categoryMatches[o];
        i.push(a + c);
      }
    }
    e = i;
  }
  return e;
}
function vp(t, e, n) {
  for (let r = 0; r < t.length; r++) {
    if (r === n)
      continue;
    const i = t[r];
    for (let s = 0; s < e.length; s++) {
      const a = e[s];
      if (i[a] === !0)
        return !1;
    }
  }
  return !0;
}
function Ds(t, e) {
  const n = v(t, (a) => Wn([a], 1)), r = xi(n.length), i = v(n, (a) => {
    const o = {};
    return I(a, (c) => {
      const u = Mn(c.partialPath);
      I(u, (l) => {
        o[l] = !0;
      });
    }), o;
  });
  let s = n;
  for (let a = 1; a <= e; a++) {
    const o = s;
    s = xi(o.length);
    for (let c = 0; c < o.length; c++) {
      const u = o[c];
      for (let l = 0; l < u.length; l++) {
        const h = u[l].partialPath, f = u[l].suffixDef, T = Mn(h);
        if (vp(i, T, c) || w(f) || h.length === e) {
          const d = r[c];
          if (zn(d, h) === !1) {
            d.push(h);
            for (let _ = 0; _ < T.length; _++) {
              const O = T[_];
              i[c][O] = !0;
            }
          }
        } else {
          const d = Wn(f, a + 1, h);
          s[c] = s[c].concat(d), I(d, (_) => {
            const O = Mn(_.partialPath);
            I(O, (A) => {
              i[c][A] = !0;
            });
          });
        }
      }
    }
  }
  return r;
}
function kr(t, e, n, r) {
  const i = new Us(t, $.ALTERNATION, r);
  return e.accept(i), Ds(i.result, n);
}
function Cr(t, e, n, r) {
  const i = new Us(t, n);
  e.accept(i);
  const s = i.result, a = new _p(e, t, n).startWalking(), o = new ee({ definition: s }), c = new ee({ definition: a });
  return Ds([o, c], r);
}
function zn(t, e) {
  e: for (let n = 0; n < t.length; n++) {
    const r = t[n];
    if (r.length === e.length) {
      for (let i = 0; i < r.length; i++) {
        const s = e[i], a = r[i];
        if (!(s === a || a.categoryMatchesMap[s.tokenTypeIdx] !== void 0))
          continue e;
      }
      return !0;
    }
  }
  return !1;
}
function Rp(t, e) {
  return t.length < e.length && pe(t, (n, r) => {
    const i = e[r];
    return n === i || i.categoryMatchesMap[n.tokenTypeIdx];
  });
}
function Fs(t) {
  return pe(t, (e) => pe(e, (n) => pe(n, (r) => w(r.categoryMatches))));
}
function Op(t) {
  const e = t.lookaheadStrategy.validate({
    rules: t.rules,
    tokenTypes: t.tokenTypes,
    grammarName: t.grammarName
  });
  return v(e, (n) => Object.assign({ type: X.CUSTOM_LOOKAHEAD_VALIDATION }, n));
}
function Ip(t, e, n, r) {
  const i = oe(t, (c) => Sp(c, n)), s = Fp(t, e, n), a = oe(t, (c) => xp(c, n)), o = oe(t, (c) => Cp(c, t, r, n));
  return i.concat(s, a, o);
}
function Sp(t, e) {
  const n = new kp();
  t.accept(n);
  const r = n.allProductions, i = Fh(r, Lp), s = ge(i, (a) => a.length > 1);
  return v(V(s), (a) => {
    const o = me(a), c = e.buildDuplicateFoundError(t, a), u = ve(o), l = {
      message: c,
      type: X.DUPLICATE_PRODUCTIONS,
      ruleName: t.name,
      dslName: u,
      occurrence: o.idx
    }, h = $s(o);
    return h && (l.parameter = h), l;
  });
}
function Lp(t) {
  return `${ve(t)}_#_${t.idx}_#_${$s(t)}`;
}
function $s(t) {
  return t instanceof F ? t.terminalType.name : t instanceof re ? t.nonTerminalName : "";
}
class kp extends pt {
  constructor() {
    super(...arguments), this.allProductions = [];
  }
  visitNonTerminal(e) {
    this.allProductions.push(e);
  }
  visitOption(e) {
    this.allProductions.push(e);
  }
  visitRepetitionWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatory(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetition(e) {
    this.allProductions.push(e);
  }
  visitAlternation(e) {
    this.allProductions.push(e);
  }
  visitTerminal(e) {
    this.allProductions.push(e);
  }
}
function Cp(t, e, n, r) {
  const i = [];
  if (ne(e, (s, a) => a.name === t.name ? s + 1 : s, 0) > 1) {
    const s = r.buildDuplicateRuleNameError({
      topLevelRule: t,
      grammarName: n
    });
    i.push({
      message: s,
      type: X.DUPLICATE_RULE_NAME,
      ruleName: t.name
    });
  }
  return i;
}
function bp(t, e, n) {
  const r = [];
  let i;
  return q(e, t) || (i = `Invalid rule override, rule: ->${t}<- cannot be overridden in the grammar: ->${n}<-as it is not defined in any of the super grammars `, r.push({
    message: i,
    type: X.INVALID_RULE_OVERRIDE,
    ruleName: t
  })), r;
}
function js(t, e, n, r = []) {
  const i = [], s = Wt(e.definition);
  if (w(s))
    return [];
  {
    const a = t.name;
    q(s, t) && i.push({
      message: n.buildLeftRecursionError({
        topLevelRule: t,
        leftRecursionPath: r
      }),
      type: X.LEFT_RECURSION,
      ruleName: a
    });
    const o = Tn(s, r.concat([t])), c = oe(o, (u) => {
      const l = W(r);
      return l.push(u), js(t, u, n, l);
    });
    return i.concat(c);
  }
}
function Wt(t) {
  let e = [];
  if (w(t))
    return e;
  const n = me(t);
  if (n instanceof re)
    e.push(n.referencedRule);
  else if (n instanceof ee || n instanceof Z || n instanceof ke || n instanceof Ce || n instanceof Ee || n instanceof K)
    e = e.concat(Wt(n.definition));
  else if (n instanceof Te)
    e = fe(v(n.definition, (s) => Wt(s.definition)));
  else if (!(n instanceof F)) throw Error("non exhaustive match");
  const r = Zt(n), i = t.length > 1;
  if (r && i) {
    const s = H(t);
    return e.concat(Wt(s));
  } else
    return e;
}
class br extends pt {
  constructor() {
    super(...arguments), this.alternations = [];
  }
  visitAlternation(e) {
    this.alternations.push(e);
  }
}
function Np(t, e) {
  const n = new br();
  t.accept(n);
  const r = n.alternations;
  return oe(r, (i) => {
    const s = St(i.definition);
    return oe(s, (a, o) => {
      const c = xs([a], [], Mt, 1);
      return w(c) ? [
        {
          message: e.buildEmptyAlternationError({
            topLevelRule: t,
            alternation: i,
            emptyChoiceIdx: o
          }),
          type: X.NONE_LAST_EMPTY_ALT,
          ruleName: t.name,
          occurrence: i.idx,
          alternative: o + 1
        }
      ] : [];
    });
  });
}
function Mp(t, e, n) {
  const r = new br();
  t.accept(r);
  let i = r.alternations;
  return i = yn(i, (s) => s.ignoreAmbiguities === !0), oe(i, (s) => {
    const a = s.idx, o = s.maxLookahead || e, c = kr(a, t, o, s), u = Up(c, s, t, n), l = Dp(c, s, t, n);
    return u.concat(l);
  });
}
class Pp extends pt {
  constructor() {
    super(...arguments), this.allProductions = [];
  }
  visitRepetitionWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatory(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetition(e) {
    this.allProductions.push(e);
  }
}
function xp(t, e) {
  const n = new br();
  t.accept(n);
  const r = n.alternations;
  return oe(r, (i) => i.definition.length > 255 ? [
    {
      message: e.buildTooManyAlternativesError({
        topLevelRule: t,
        alternation: i
      }),
      type: X.TOO_MANY_ALTS,
      ruleName: t.name,
      occurrence: i.idx
    }
  ] : []);
}
function wp(t, e, n) {
  const r = [];
  return I(t, (i) => {
    const s = new Pp();
    i.accept(s);
    const a = s.allProductions;
    I(a, (o) => {
      const c = ws(o), u = o.maxLookahead || e, l = o.idx, h = Cr(l, i, c, u)[0];
      if (w(fe(h))) {
        const f = n.buildEmptyRepetitionError({
          topLevelRule: i,
          repetition: o
        });
        r.push({
          message: f,
          type: X.NO_NON_EMPTY_LOOKAHEAD,
          ruleName: i.name
        });
      }
    });
  }), r;
}
function Up(t, e, n, r) {
  const i = [], s = ne(t, (a, o, c) => (e.definition[c].ignoreAmbiguities === !0 || I(o, (u) => {
    const l = [c];
    I(t, (h, f) => {
      c !== f && zn(h, u) && // ignore (skip) ambiguities with this "other" alternative
      e.definition[f].ignoreAmbiguities !== !0 && l.push(f);
    }), l.length > 1 && !zn(i, u) && (i.push(u), a.push({
      alts: l,
      path: u
    }));
  }), a), []);
  return v(s, (a) => {
    const o = v(a.alts, (c) => c + 1);
    return {
      message: r.buildAlternationAmbiguityError({
        topLevelRule: n,
        alternation: e,
        ambiguityIndices: o,
        prefixPath: a.path
      }),
      type: X.AMBIGUOUS_ALTS,
      ruleName: n.name,
      occurrence: e.idx,
      alternatives: a.alts
    };
  });
}
function Dp(t, e, n, r) {
  const i = ne(t, (s, a, o) => {
    const c = v(a, (u) => ({ idx: o, path: u }));
    return s.concat(c);
  }, []);
  return bt(oe(i, (s) => {
    if (e.definition[s.idx].ignoreAmbiguities === !0)
      return [];
    const a = s.idx, o = s.path, c = he(i, (u) => (
      // ignore (skip) ambiguities with this "other" alternative
      e.definition[u.idx].ignoreAmbiguities !== !0 && u.idx < a && // checking for strict prefix because identical lookaheads
      // will be be detected using a different validation.
      Rp(u.path, o)
    ));
    return v(c, (u) => {
      const l = [u.idx + 1, a + 1], h = e.idx === 0 ? "" : e.idx;
      return {
        message: r.buildAlternationPrefixAmbiguityError({
          topLevelRule: n,
          alternation: e,
          ambiguityIndices: l,
          prefixPath: u.path
        }),
        type: X.AMBIGUOUS_PREFIX_ALTS,
        ruleName: n.name,
        occurrence: h,
        alternatives: l
      };
    });
  }));
}
function Fp(t, e, n) {
  const r = [], i = v(e, (s) => s.name);
  return I(t, (s) => {
    const a = s.name;
    if (q(i, a)) {
      const o = n.buildNamespaceConflictError(s);
      r.push({
        message: o,
        type: X.CONFLICT_TOKENS_RULES_NAMESPACE,
        ruleName: a
      });
    }
  }), r;
}
function $p(t) {
  const e = Rr(t, {
    errMsgProvider: up
  }), n = {};
  return I(t.rules, (r) => {
    n[r.name] = r;
  }), lp(n, e.errMsgProvider);
}
function jp(t) {
  return t = Rr(t, {
    errMsgProvider: qe
  }), Ip(t.rules, t.tokenTypes, t.errMsgProvider, t.grammarName);
}
const Gs = "MismatchedTokenException", Bs = "NoViableAltException", Vs = "EarlyExitException", Ks = "NotAllInputParsedException", Hs = [
  Gs,
  Bs,
  Vs,
  Ks
];
Object.freeze(Hs);
function rn(t) {
  return q(Hs, t.name);
}
class Rn extends Error {
  constructor(e, n) {
    super(e), this.token = n, this.resyncedTokens = [], Object.setPrototypeOf(this, new.target.prototype), Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
  }
}
class Ws extends Rn {
  constructor(e, n, r) {
    super(e, n), this.previousToken = r, this.name = Gs;
  }
}
class Gp extends Rn {
  constructor(e, n, r) {
    super(e, n), this.previousToken = r, this.name = Bs;
  }
}
class Bp extends Rn {
  constructor(e, n) {
    super(e, n), this.name = Ks;
  }
}
class Vp extends Rn {
  constructor(e, n, r) {
    super(e, n), this.previousToken = r, this.name = Vs;
  }
}
const Pn = {}, zs = "InRuleRecoveryException";
class Kp extends Error {
  constructor(e) {
    super(e), this.name = zs;
  }
}
class Hp {
  initRecoverable(e) {
    this.firstAfterRepMap = {}, this.resyncFollows = {}, this.recoveryEnabled = R(e, "recoveryEnabled") ? e.recoveryEnabled : Ue.recoveryEnabled, this.recoveryEnabled && (this.attemptInRepetitionRecovery = Wp);
  }
  getTokenToInsert(e) {
    const n = Lr(e, "", NaN, NaN, NaN, NaN, NaN, NaN);
    return n.isInsertedInRecovery = !0, n;
  }
  canTokenTypeBeInsertedInRecovery(e) {
    return !0;
  }
  canTokenTypeBeDeletedInRecovery(e) {
    return !0;
  }
  tryInRepetitionRecovery(e, n, r, i) {
    const s = this.findReSyncTokenType(), a = this.exportLexerState(), o = [];
    let c = !1;
    const u = this.LA(1);
    let l = this.LA(1);
    const h = () => {
      const f = this.LA(0), T = this.errorMessageProvider.buildMismatchTokenMessage({
        expected: i,
        actual: u,
        previous: f,
        ruleName: this.getCurrRuleFullName()
      }), d = new Ws(T, u, this.LA(0));
      d.resyncedTokens = St(o), this.SAVE_ERROR(d);
    };
    for (; !c; )
      if (this.tokenMatcher(l, i)) {
        h();
        return;
      } else if (r.call(this)) {
        h(), e.apply(this, n);
        return;
      } else this.tokenMatcher(l, s) ? c = !0 : (l = this.SKIP_TOKEN(), this.addToResyncTokens(l, o));
    this.importLexerState(a);
  }
  shouldInRepetitionRecoveryBeTried(e, n, r) {
    return !(r === !1 || this.tokenMatcher(this.LA(1), e) || this.isBackTracking() || this.canPerformInRuleRecovery(e, this.getFollowsForInRuleRecovery(e, n)));
  }
  // Error Recovery functionality
  getFollowsForInRuleRecovery(e, n) {
    const r = this.getCurrentGrammarPath(e, n);
    return this.getNextPossibleTokenTypes(r);
  }
  tryInRuleRecovery(e, n) {
    if (this.canRecoverWithSingleTokenInsertion(e, n))
      return this.getTokenToInsert(e);
    if (this.canRecoverWithSingleTokenDeletion(e)) {
      const r = this.SKIP_TOKEN();
      return this.consumeToken(), r;
    }
    throw new Kp("sad sad panda");
  }
  canPerformInRuleRecovery(e, n) {
    return this.canRecoverWithSingleTokenInsertion(e, n) || this.canRecoverWithSingleTokenDeletion(e);
  }
  canRecoverWithSingleTokenInsertion(e, n) {
    if (!this.canTokenTypeBeInsertedInRecovery(e) || w(n))
      return !1;
    const r = this.LA(1);
    return ht(n, (i) => this.tokenMatcher(r, i)) !== void 0;
  }
  canRecoverWithSingleTokenDeletion(e) {
    return this.canTokenTypeBeDeletedInRecovery(e) ? this.tokenMatcher(this.LA(2), e) : !1;
  }
  isInCurrentRuleReSyncSet(e) {
    const n = this.getCurrFollowKey(), r = this.getFollowSetFromFollowKey(n);
    return q(r, e);
  }
  findReSyncTokenType() {
    const e = this.flattenFollowSet();
    let n = this.LA(1), r = 2;
    for (; ; ) {
      const i = ht(e, (s) => cp(n, s));
      if (i !== void 0)
        return i;
      n = this.LA(r), r++;
    }
  }
  getCurrFollowKey() {
    if (this.RULE_STACK.length === 1)
      return Pn;
    const e = this.getLastExplicitRuleShortName(), n = this.getLastExplicitRuleOccurrenceIndex(), r = this.getPreviousExplicitRuleShortName();
    return {
      ruleName: this.shortRuleNameToFullName(e),
      idxInCallingRule: n,
      inRule: this.shortRuleNameToFullName(r)
    };
  }
  buildFullFollowKeyStack() {
    const e = this.RULE_STACK, n = this.RULE_OCCURRENCE_STACK;
    return v(e, (r, i) => i === 0 ? Pn : {
      ruleName: this.shortRuleNameToFullName(r),
      idxInCallingRule: n[i],
      inRule: this.shortRuleNameToFullName(e[i - 1])
    });
  }
  flattenFollowSet() {
    const e = v(this.buildFullFollowKeyStack(), (n) => this.getFollowSetFromFollowKey(n));
    return fe(e);
  }
  getFollowSetFromFollowKey(e) {
    if (e === Pn)
      return [Je];
    const n = e.ruleName + e.idxInCallingRule + Rs + e.inRule;
    return this.resyncFollows[n];
  }
  // It does not make any sense to include a virtual EOF token in the list of resynced tokens
  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)
  addToResyncTokens(e, n) {
    return this.tokenMatcher(e, Je) || n.push(e), n;
  }
  reSyncTo(e) {
    const n = [];
    let r = this.LA(1);
    for (; this.tokenMatcher(r, e) === !1; )
      r = this.SKIP_TOKEN(), this.addToResyncTokens(r, n);
    return St(n);
  }
  attemptInRepetitionRecovery(e, n, r, i, s, a, o) {
  }
  getCurrentGrammarPath(e, n) {
    const r = this.getHumanReadableRuleStack(), i = W(this.RULE_OCCURRENCE_STACK);
    return {
      ruleStack: r,
      occurrenceStack: i,
      lastTok: e,
      lastTokOccurrence: n
    };
  }
  getHumanReadableRuleStack() {
    return v(this.RULE_STACK, (e) => this.shortRuleNameToFullName(e));
  }
}
function Wp(t, e, n, r, i, s, a) {
  const o = this.getKeyForAutomaticLookahead(r, i);
  let c = this.firstAfterRepMap[o];
  if (c === void 0) {
    const f = this.getCurrRuleFullName(), T = this.getGAstProductions()[f];
    c = new s(T, i).startWalking(), this.firstAfterRepMap[o] = c;
  }
  let u = c.token, l = c.occurrence;
  const h = c.isEndOfRule;
  this.RULE_STACK.length === 1 && h && u === void 0 && (u = Je, l = 1), !(u === void 0 || l === void 0) && this.shouldInRepetitionRecoveryBeTried(u, l, a) && this.tryInRepetitionRecovery(t, e, n, u);
}
const zp = 4, Ke = 8, Ys = 1 << Ke, Xs = 2 << Ke, Yn = 3 << Ke, Xn = 4 << Ke, qn = 5 << Ke, zt = 6 << Ke;
function xn(t, e, n) {
  return n | e | t;
}
class Yp {
  constructor(e) {
    var n;
    this.maxLookahead = (n = e == null ? void 0 : e.maxLookahead) !== null && n !== void 0 ? n : Ue.maxLookahead;
  }
  validate(e) {
    const n = this.validateNoLeftRecursion(e.rules);
    if (w(n)) {
      const r = this.validateEmptyOrAlternatives(e.rules), i = this.validateAmbiguousAlternationAlternatives(e.rules, this.maxLookahead), s = this.validateSomeNonEmptyLookaheadPath(e.rules, this.maxLookahead);
      return [
        ...n,
        ...r,
        ...i,
        ...s
      ];
    }
    return n;
  }
  validateNoLeftRecursion(e) {
    return oe(e, (n) => js(n, n, qe));
  }
  validateEmptyOrAlternatives(e) {
    return oe(e, (n) => Np(n, qe));
  }
  validateAmbiguousAlternationAlternatives(e, n) {
    return oe(e, (r) => Mp(r, n, qe));
  }
  validateSomeNonEmptyLookaheadPath(e, n) {
    return wp(e, n, qe);
  }
  buildLookaheadForAlternation(e) {
    return Ep(e.prodOccurrence, e.rule, e.maxLookahead, e.hasPredicates, e.dynamicTokensEnabled, yp);
  }
  buildLookaheadForOptional(e) {
    return Tp(e.prodOccurrence, e.rule, e.maxLookahead, e.dynamicTokensEnabled, ws(e.prodType), Ap);
  }
}
class Xp {
  initLooksAhead(e) {
    this.dynamicTokensEnabled = R(e, "dynamicTokensEnabled") ? e.dynamicTokensEnabled : Ue.dynamicTokensEnabled, this.maxLookahead = R(e, "maxLookahead") ? e.maxLookahead : Ue.maxLookahead, this.lookaheadStrategy = R(e, "lookaheadStrategy") ? e.lookaheadStrategy : new Yp({ maxLookahead: this.maxLookahead }), this.lookAheadFuncsCache = /* @__PURE__ */ new Map();
  }
  preComputeLookaheadFunctions(e) {
    I(e, (n) => {
      this.TRACE_INIT(`${n.name} Rule Lookahead`, () => {
        const { alternation: r, repetition: i, option: s, repetitionMandatory: a, repetitionMandatoryWithSeparator: o, repetitionWithSeparator: c } = Qp(n);
        I(r, (u) => {
          const l = u.idx === 0 ? "" : u.idx;
          this.TRACE_INIT(`${ve(u)}${l}`, () => {
            const h = this.lookaheadStrategy.buildLookaheadForAlternation({
              prodOccurrence: u.idx,
              rule: n,
              maxLookahead: u.maxLookahead || this.maxLookahead,
              hasPredicates: u.hasPredicates,
              dynamicTokensEnabled: this.dynamicTokensEnabled
            }), f = xn(this.fullRuleNameToShort[n.name], Ys, u.idx);
            this.setLaFuncCache(f, h);
          });
        }), I(i, (u) => {
          this.computeLookaheadFunc(n, u.idx, Yn, "Repetition", u.maxLookahead, ve(u));
        }), I(s, (u) => {
          this.computeLookaheadFunc(n, u.idx, Xs, "Option", u.maxLookahead, ve(u));
        }), I(a, (u) => {
          this.computeLookaheadFunc(n, u.idx, Xn, "RepetitionMandatory", u.maxLookahead, ve(u));
        }), I(o, (u) => {
          this.computeLookaheadFunc(n, u.idx, zt, "RepetitionMandatoryWithSeparator", u.maxLookahead, ve(u));
        }), I(c, (u) => {
          this.computeLookaheadFunc(n, u.idx, qn, "RepetitionWithSeparator", u.maxLookahead, ve(u));
        });
      });
    });
  }
  computeLookaheadFunc(e, n, r, i, s, a) {
    this.TRACE_INIT(`${a}${n === 0 ? "" : n}`, () => {
      const o = this.lookaheadStrategy.buildLookaheadForOptional({
        prodOccurrence: n,
        rule: e,
        maxLookahead: s || this.maxLookahead,
        dynamicTokensEnabled: this.dynamicTokensEnabled,
        prodType: i
      }), c = xn(this.fullRuleNameToShort[e.name], r, n);
      this.setLaFuncCache(c, o);
    });
  }
  // this actually returns a number, but it is always used as a string (object prop key)
  getKeyForAutomaticLookahead(e, n) {
    const r = this.getLastExplicitRuleShortName();
    return xn(r, e, n);
  }
  getLaFuncFromCache(e) {
    return this.lookAheadFuncsCache.get(e);
  }
  /* istanbul ignore next */
  setLaFuncCache(e, n) {
    this.lookAheadFuncsCache.set(e, n);
  }
}
class qp extends pt {
  constructor() {
    super(...arguments), this.dslMethods = {
      option: [],
      alternation: [],
      repetition: [],
      repetitionWithSeparator: [],
      repetitionMandatory: [],
      repetitionMandatoryWithSeparator: []
    };
  }
  reset() {
    this.dslMethods = {
      option: [],
      alternation: [],
      repetition: [],
      repetitionWithSeparator: [],
      repetitionMandatory: [],
      repetitionMandatoryWithSeparator: []
    };
  }
  visitOption(e) {
    this.dslMethods.option.push(e);
  }
  visitRepetitionWithSeparator(e) {
    this.dslMethods.repetitionWithSeparator.push(e);
  }
  visitRepetitionMandatory(e) {
    this.dslMethods.repetitionMandatory.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.dslMethods.repetitionMandatoryWithSeparator.push(e);
  }
  visitRepetition(e) {
    this.dslMethods.repetition.push(e);
  }
  visitAlternation(e) {
    this.dslMethods.alternation.push(e);
  }
}
const jt = new qp();
function Qp(t) {
  jt.reset(), t.accept(jt);
  const e = jt.dslMethods;
  return jt.reset(), e;
}
function wi(t, e) {
  isNaN(t.startOffset) === !0 ? (t.startOffset = e.startOffset, t.endOffset = e.endOffset) : t.endOffset < e.endOffset && (t.endOffset = e.endOffset);
}
function Ui(t, e) {
  isNaN(t.startOffset) === !0 ? (t.startOffset = e.startOffset, t.startColumn = e.startColumn, t.startLine = e.startLine, t.endOffset = e.endOffset, t.endColumn = e.endColumn, t.endLine = e.endLine) : t.endOffset < e.endOffset && (t.endOffset = e.endOffset, t.endColumn = e.endColumn, t.endLine = e.endLine);
}
function Zp(t, e, n) {
  t.children[n] === void 0 ? t.children[n] = [e] : t.children[n].push(e);
}
function Jp(t, e, n) {
  t.children[e] === void 0 ? t.children[e] = [n] : t.children[e].push(n);
}
const ed = "name";
function qs(t, e) {
  Object.defineProperty(t, ed, {
    enumerable: !1,
    configurable: !0,
    writable: !1,
    value: e
  });
}
function td(t, e) {
  const n = le(t), r = n.length;
  for (let i = 0; i < r; i++) {
    const s = n[i], a = t[s], o = a.length;
    for (let c = 0; c < o; c++) {
      const u = a[c];
      u.tokenTypeIdx === void 0 && this[u.name](u.children, e);
    }
  }
}
function nd(t, e) {
  const n = function() {
  };
  qs(n, t + "BaseSemantics");
  const r = {
    visit: function(i, s) {
      if (N(i) && (i = i[0]), !we(i))
        return this[i.name](i.children, s);
    },
    validateVisitor: function() {
      const i = id(this, e);
      if (!w(i)) {
        const s = v(i, (a) => a.msg);
        throw Error(`Errors Detected in CST Visitor <${this.constructor.name}>:
	${s.join(`

`).replace(/\n/g, `
	`)}`);
      }
    }
  };
  return n.prototype = r, n.prototype.constructor = n, n._RULE_NAMES = e, n;
}
function rd(t, e, n) {
  const r = function() {
  };
  qs(r, t + "BaseSemanticsWithDefaults");
  const i = Object.create(n.prototype);
  return I(e, (s) => {
    i[s] = td;
  }), r.prototype = i, r.prototype.constructor = r, r;
}
var Qn;
(function(t) {
  t[t.REDUNDANT_METHOD = 0] = "REDUNDANT_METHOD", t[t.MISSING_METHOD = 1] = "MISSING_METHOD";
})(Qn || (Qn = {}));
function id(t, e) {
  return sd(t, e);
}
function sd(t, e) {
  const n = he(e, (i) => De(t[i]) === !1), r = v(n, (i) => ({
    msg: `Missing visitor method: <${i}> on ${t.constructor.name} CST Visitor.`,
    type: Qn.MISSING_METHOD,
    methodName: i
  }));
  return bt(r);
}
class ad {
  initTreeBuilder(e) {
    if (this.CST_STACK = [], this.outputCst = e.outputCst, this.nodeLocationTracking = R(e, "nodeLocationTracking") ? e.nodeLocationTracking : Ue.nodeLocationTracking, !this.outputCst)
      this.cstInvocationStateUpdate = B, this.cstFinallyStateUpdate = B, this.cstPostTerminal = B, this.cstPostNonTerminal = B, this.cstPostRule = B;
    else if (/full/i.test(this.nodeLocationTracking))
      this.recoveryEnabled ? (this.setNodeLocationFromToken = Ui, this.setNodeLocationFromNode = Ui, this.cstPostRule = B, this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery) : (this.setNodeLocationFromToken = B, this.setNodeLocationFromNode = B, this.cstPostRule = this.cstPostRuleFull, this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular);
    else if (/onlyOffset/i.test(this.nodeLocationTracking))
      this.recoveryEnabled ? (this.setNodeLocationFromToken = wi, this.setNodeLocationFromNode = wi, this.cstPostRule = B, this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery) : (this.setNodeLocationFromToken = B, this.setNodeLocationFromNode = B, this.cstPostRule = this.cstPostRuleOnlyOffset, this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular);
    else if (/none/i.test(this.nodeLocationTracking))
      this.setNodeLocationFromToken = B, this.setNodeLocationFromNode = B, this.cstPostRule = B, this.setInitialNodeLocation = B;
    else
      throw Error(`Invalid <nodeLocationTracking> config option: "${e.nodeLocationTracking}"`);
  }
  setInitialNodeLocationOnlyOffsetRecovery(e) {
    e.location = {
      startOffset: NaN,
      endOffset: NaN
    };
  }
  setInitialNodeLocationOnlyOffsetRegular(e) {
    e.location = {
      // without error recovery the starting Location of a new CstNode is guaranteed
      // To be the next Token's startOffset (for valid inputs).
      // For invalid inputs there won't be any CSTOutput so this potential
      // inaccuracy does not matter
      startOffset: this.LA(1).startOffset,
      endOffset: NaN
    };
  }
  setInitialNodeLocationFullRecovery(e) {
    e.location = {
      startOffset: NaN,
      startLine: NaN,
      startColumn: NaN,
      endOffset: NaN,
      endLine: NaN,
      endColumn: NaN
    };
  }
  /**
       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work
  
       * @param cstNode
       */
  setInitialNodeLocationFullRegular(e) {
    const n = this.LA(1);
    e.location = {
      startOffset: n.startOffset,
      startLine: n.startLine,
      startColumn: n.startColumn,
      endOffset: NaN,
      endLine: NaN,
      endColumn: NaN
    };
  }
  cstInvocationStateUpdate(e) {
    const n = {
      name: e,
      children: /* @__PURE__ */ Object.create(null)
    };
    this.setInitialNodeLocation(n), this.CST_STACK.push(n);
  }
  cstFinallyStateUpdate() {
    this.CST_STACK.pop();
  }
  cstPostRuleFull(e) {
    const n = this.LA(0), r = e.location;
    r.startOffset <= n.startOffset ? (r.endOffset = n.endOffset, r.endLine = n.endLine, r.endColumn = n.endColumn) : (r.startOffset = NaN, r.startLine = NaN, r.startColumn = NaN);
  }
  cstPostRuleOnlyOffset(e) {
    const n = this.LA(0), r = e.location;
    r.startOffset <= n.startOffset ? r.endOffset = n.endOffset : r.startOffset = NaN;
  }
  cstPostTerminal(e, n) {
    const r = this.CST_STACK[this.CST_STACK.length - 1];
    Zp(r, n, e), this.setNodeLocationFromToken(r.location, n);
  }
  cstPostNonTerminal(e, n) {
    const r = this.CST_STACK[this.CST_STACK.length - 1];
    Jp(r, n, e), this.setNodeLocationFromNode(r.location, e.location);
  }
  getBaseCstVisitorConstructor() {
    if (we(this.baseCstVisitorConstructor)) {
      const e = nd(this.className, le(this.gastProductionsCache));
      return this.baseCstVisitorConstructor = e, e;
    }
    return this.baseCstVisitorConstructor;
  }
  getBaseCstVisitorConstructorWithDefaults() {
    if (we(this.baseCstVisitorWithDefaultsConstructor)) {
      const e = rd(this.className, le(this.gastProductionsCache), this.getBaseCstVisitorConstructor());
      return this.baseCstVisitorWithDefaultsConstructor = e, e;
    }
    return this.baseCstVisitorWithDefaultsConstructor;
  }
  getLastExplicitRuleShortName() {
    const e = this.RULE_STACK;
    return e[e.length - 1];
  }
  getPreviousExplicitRuleShortName() {
    const e = this.RULE_STACK;
    return e[e.length - 2];
  }
  getLastExplicitRuleOccurrenceIndex() {
    const e = this.RULE_OCCURRENCE_STACK;
    return e[e.length - 1];
  }
}
class od {
  initLexerAdapter() {
    this.tokVector = [], this.tokVectorLength = 0, this.currIdx = -1;
  }
  set input(e) {
    if (this.selfAnalysisDone !== !0)
      throw Error("Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.");
    this.reset(), this.tokVector = e, this.tokVectorLength = e.length;
  }
  get input() {
    return this.tokVector;
  }
  // skips a token and returns the next token
  SKIP_TOKEN() {
    return this.currIdx <= this.tokVector.length - 2 ? (this.consumeToken(), this.LA(1)) : an;
  }
  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers
  // or lexers dependent on parser context.
  LA(e) {
    const n = this.currIdx + e;
    return n < 0 || this.tokVectorLength <= n ? an : this.tokVector[n];
  }
  consumeToken() {
    this.currIdx++;
  }
  exportLexerState() {
    return this.currIdx;
  }
  importLexerState(e) {
    this.currIdx = e;
  }
  resetLexerState() {
    this.currIdx = -1;
  }
  moveToTerminatedState() {
    this.currIdx = this.tokVector.length - 1;
  }
  getLexerPosition() {
    return this.exportLexerState();
  }
}
class cd {
  ACTION(e) {
    return e.call(this);
  }
  consume(e, n, r) {
    return this.consumeInternal(n, e, r);
  }
  subrule(e, n, r) {
    return this.subruleInternal(n, e, r);
  }
  option(e, n) {
    return this.optionInternal(n, e);
  }
  or(e, n) {
    return this.orInternal(n, e);
  }
  many(e, n) {
    return this.manyInternal(e, n);
  }
  atLeastOne(e, n) {
    return this.atLeastOneInternal(e, n);
  }
  CONSUME(e, n) {
    return this.consumeInternal(e, 0, n);
  }
  CONSUME1(e, n) {
    return this.consumeInternal(e, 1, n);
  }
  CONSUME2(e, n) {
    return this.consumeInternal(e, 2, n);
  }
  CONSUME3(e, n) {
    return this.consumeInternal(e, 3, n);
  }
  CONSUME4(e, n) {
    return this.consumeInternal(e, 4, n);
  }
  CONSUME5(e, n) {
    return this.consumeInternal(e, 5, n);
  }
  CONSUME6(e, n) {
    return this.consumeInternal(e, 6, n);
  }
  CONSUME7(e, n) {
    return this.consumeInternal(e, 7, n);
  }
  CONSUME8(e, n) {
    return this.consumeInternal(e, 8, n);
  }
  CONSUME9(e, n) {
    return this.consumeInternal(e, 9, n);
  }
  SUBRULE(e, n) {
    return this.subruleInternal(e, 0, n);
  }
  SUBRULE1(e, n) {
    return this.subruleInternal(e, 1, n);
  }
  SUBRULE2(e, n) {
    return this.subruleInternal(e, 2, n);
  }
  SUBRULE3(e, n) {
    return this.subruleInternal(e, 3, n);
  }
  SUBRULE4(e, n) {
    return this.subruleInternal(e, 4, n);
  }
  SUBRULE5(e, n) {
    return this.subruleInternal(e, 5, n);
  }
  SUBRULE6(e, n) {
    return this.subruleInternal(e, 6, n);
  }
  SUBRULE7(e, n) {
    return this.subruleInternal(e, 7, n);
  }
  SUBRULE8(e, n) {
    return this.subruleInternal(e, 8, n);
  }
  SUBRULE9(e, n) {
    return this.subruleInternal(e, 9, n);
  }
  OPTION(e) {
    return this.optionInternal(e, 0);
  }
  OPTION1(e) {
    return this.optionInternal(e, 1);
  }
  OPTION2(e) {
    return this.optionInternal(e, 2);
  }
  OPTION3(e) {
    return this.optionInternal(e, 3);
  }
  OPTION4(e) {
    return this.optionInternal(e, 4);
  }
  OPTION5(e) {
    return this.optionInternal(e, 5);
  }
  OPTION6(e) {
    return this.optionInternal(e, 6);
  }
  OPTION7(e) {
    return this.optionInternal(e, 7);
  }
  OPTION8(e) {
    return this.optionInternal(e, 8);
  }
  OPTION9(e) {
    return this.optionInternal(e, 9);
  }
  OR(e) {
    return this.orInternal(e, 0);
  }
  OR1(e) {
    return this.orInternal(e, 1);
  }
  OR2(e) {
    return this.orInternal(e, 2);
  }
  OR3(e) {
    return this.orInternal(e, 3);
  }
  OR4(e) {
    return this.orInternal(e, 4);
  }
  OR5(e) {
    return this.orInternal(e, 5);
  }
  OR6(e) {
    return this.orInternal(e, 6);
  }
  OR7(e) {
    return this.orInternal(e, 7);
  }
  OR8(e) {
    return this.orInternal(e, 8);
  }
  OR9(e) {
    return this.orInternal(e, 9);
  }
  MANY(e) {
    this.manyInternal(0, e);
  }
  MANY1(e) {
    this.manyInternal(1, e);
  }
  MANY2(e) {
    this.manyInternal(2, e);
  }
  MANY3(e) {
    this.manyInternal(3, e);
  }
  MANY4(e) {
    this.manyInternal(4, e);
  }
  MANY5(e) {
    this.manyInternal(5, e);
  }
  MANY6(e) {
    this.manyInternal(6, e);
  }
  MANY7(e) {
    this.manyInternal(7, e);
  }
  MANY8(e) {
    this.manyInternal(8, e);
  }
  MANY9(e) {
    this.manyInternal(9, e);
  }
  MANY_SEP(e) {
    this.manySepFirstInternal(0, e);
  }
  MANY_SEP1(e) {
    this.manySepFirstInternal(1, e);
  }
  MANY_SEP2(e) {
    this.manySepFirstInternal(2, e);
  }
  MANY_SEP3(e) {
    this.manySepFirstInternal(3, e);
  }
  MANY_SEP4(e) {
    this.manySepFirstInternal(4, e);
  }
  MANY_SEP5(e) {
    this.manySepFirstInternal(5, e);
  }
  MANY_SEP6(e) {
    this.manySepFirstInternal(6, e);
  }
  MANY_SEP7(e) {
    this.manySepFirstInternal(7, e);
  }
  MANY_SEP8(e) {
    this.manySepFirstInternal(8, e);
  }
  MANY_SEP9(e) {
    this.manySepFirstInternal(9, e);
  }
  AT_LEAST_ONE(e) {
    this.atLeastOneInternal(0, e);
  }
  AT_LEAST_ONE1(e) {
    return this.atLeastOneInternal(1, e);
  }
  AT_LEAST_ONE2(e) {
    this.atLeastOneInternal(2, e);
  }
  AT_LEAST_ONE3(e) {
    this.atLeastOneInternal(3, e);
  }
  AT_LEAST_ONE4(e) {
    this.atLeastOneInternal(4, e);
  }
  AT_LEAST_ONE5(e) {
    this.atLeastOneInternal(5, e);
  }
  AT_LEAST_ONE6(e) {
    this.atLeastOneInternal(6, e);
  }
  AT_LEAST_ONE7(e) {
    this.atLeastOneInternal(7, e);
  }
  AT_LEAST_ONE8(e) {
    this.atLeastOneInternal(8, e);
  }
  AT_LEAST_ONE9(e) {
    this.atLeastOneInternal(9, e);
  }
  AT_LEAST_ONE_SEP(e) {
    this.atLeastOneSepFirstInternal(0, e);
  }
  AT_LEAST_ONE_SEP1(e) {
    this.atLeastOneSepFirstInternal(1, e);
  }
  AT_LEAST_ONE_SEP2(e) {
    this.atLeastOneSepFirstInternal(2, e);
  }
  AT_LEAST_ONE_SEP3(e) {
    this.atLeastOneSepFirstInternal(3, e);
  }
  AT_LEAST_ONE_SEP4(e) {
    this.atLeastOneSepFirstInternal(4, e);
  }
  AT_LEAST_ONE_SEP5(e) {
    this.atLeastOneSepFirstInternal(5, e);
  }
  AT_LEAST_ONE_SEP6(e) {
    this.atLeastOneSepFirstInternal(6, e);
  }
  AT_LEAST_ONE_SEP7(e) {
    this.atLeastOneSepFirstInternal(7, e);
  }
  AT_LEAST_ONE_SEP8(e) {
    this.atLeastOneSepFirstInternal(8, e);
  }
  AT_LEAST_ONE_SEP9(e) {
    this.atLeastOneSepFirstInternal(9, e);
  }
  RULE(e, n, r = on) {
    if (q(this.definedRulesNames, e)) {
      const s = {
        message: qe.buildDuplicateRuleNameError({
          topLevelRule: e,
          grammarName: this.className
        }),
        type: X.DUPLICATE_RULE_NAME,
        ruleName: e
      };
      this.definitionErrors.push(s);
    }
    this.definedRulesNames.push(e);
    const i = this.defineRule(e, n, r);
    return this[e] = i, i;
  }
  OVERRIDE_RULE(e, n, r = on) {
    const i = bp(e, this.definedRulesNames, this.className);
    this.definitionErrors = this.definitionErrors.concat(i);
    const s = this.defineRule(e, n, r);
    return this[e] = s, s;
  }
  BACKTRACK(e, n) {
    return function() {
      this.isBackTrackingStack.push(1);
      const r = this.saveRecogState();
      try {
        return e.apply(this, n), !0;
      } catch (i) {
        if (rn(i))
          return !1;
        throw i;
      } finally {
        this.reloadRecogState(r), this.isBackTrackingStack.pop();
      }
    };
  }
  // GAST export APIs
  getGAstProductions() {
    return this.gastProductionsCache;
  }
  getSerializedGastProductions() {
    return lf(V(this.gastProductionsCache));
  }
}
class ud {
  initRecognizerEngine(e, n) {
    if (this.className = this.constructor.name, this.shortRuleNameToFull = {}, this.fullRuleNameToShort = {}, this.ruleShortNameIdx = 256, this.tokenMatcher = nn, this.subruleIdx = 0, this.definedRulesNames = [], this.tokensMap = {}, this.isBackTrackingStack = [], this.RULE_STACK = [], this.RULE_OCCURRENCE_STACK = [], this.gastProductionsCache = {}, R(n, "serializedGrammar"))
      throw Error(`The Parser's configuration can no longer contain a <serializedGrammar> property.
	See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0
	For Further details.`);
    if (N(e)) {
      if (w(e))
        throw Error(`A Token Vocabulary cannot be empty.
	Note that the first argument for the parser constructor
	is no longer a Token vector (since v4.0).`);
      if (typeof e[0].startOffset == "number")
        throw Error(`The Parser constructor no longer accepts a token vector as the first argument.
	See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0
	For Further details.`);
    }
    if (N(e))
      this.tokensMap = ne(e, (s, a) => (s[a.name] = a, s), {});
    else if (R(e, "modes") && pe(fe(V(e.modes)), ip)) {
      const s = fe(V(e.modes)), a = Or(s);
      this.tokensMap = ne(a, (o, c) => (o[c.name] = c, o), {});
    } else if (ue(e))
      this.tokensMap = W(e);
    else
      throw new Error("<tokensDictionary> argument must be An Array of Token constructors, A dictionary of Token constructors or an IMultiModeLexerDefinition");
    this.tokensMap.EOF = Je;
    const r = R(e, "modes") ? fe(V(e.modes)) : V(e), i = pe(r, (s) => w(s.categoryMatches));
    this.tokenMatcher = i ? nn : Mt, Pt(V(this.tokensMap));
  }
  defineRule(e, n, r) {
    if (this.selfAnalysisDone)
      throw Error(`Grammar rule <${e}> may not be defined after the 'performSelfAnalysis' method has been called'
Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`);
    const i = R(r, "resyncEnabled") ? r.resyncEnabled : on.resyncEnabled, s = R(r, "recoveryValueFunc") ? r.recoveryValueFunc : on.recoveryValueFunc, a = this.ruleShortNameIdx << zp + Ke;
    this.ruleShortNameIdx++, this.shortRuleNameToFull[a] = e, this.fullRuleNameToShort[e] = a;
    let o;
    return this.outputCst === !0 ? o = function(...c) {
      try {
        this.ruleInvocationStateUpdate(a, e, this.subruleIdx), n.apply(this, c);
        const u = this.CST_STACK[this.CST_STACK.length - 1];
        return this.cstPostRule(u), u;
      } catch (u) {
        return this.invokeRuleCatch(u, i, s);
      } finally {
        this.ruleFinallyStateUpdate();
      }
    } : o = function(...c) {
      try {
        return this.ruleInvocationStateUpdate(a, e, this.subruleIdx), n.apply(this, c);
      } catch (u) {
        return this.invokeRuleCatch(u, i, s);
      } finally {
        this.ruleFinallyStateUpdate();
      }
    }, Object.assign(o, { ruleName: e, originalGrammarAction: n });
  }
  invokeRuleCatch(e, n, r) {
    const i = this.RULE_STACK.length === 1, s = n && !this.isBackTracking() && this.recoveryEnabled;
    if (rn(e)) {
      const a = e;
      if (s) {
        const o = this.findReSyncTokenType();
        if (this.isInCurrentRuleReSyncSet(o))
          if (a.resyncedTokens = this.reSyncTo(o), this.outputCst) {
            const c = this.CST_STACK[this.CST_STACK.length - 1];
            return c.recoveredNode = !0, c;
          } else
            return r(e);
        else {
          if (this.outputCst) {
            const c = this.CST_STACK[this.CST_STACK.length - 1];
            c.recoveredNode = !0, a.partialCstResult = c;
          }
          throw a;
        }
      } else {
        if (i)
          return this.moveToTerminatedState(), r(e);
        throw a;
      }
    } else
      throw e;
  }
  // Implementation of parsing DSL
  optionInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(Xs, n);
    return this.optionInternalLogic(e, n, r);
  }
  optionInternalLogic(e, n, r) {
    let i = this.getLaFuncFromCache(r), s;
    if (typeof e != "function") {
      s = e.DEF;
      const a = e.GATE;
      if (a !== void 0) {
        const o = i;
        i = () => a.call(this) && o.call(this);
      }
    } else
      s = e;
    if (i.call(this) === !0)
      return s.call(this);
  }
  atLeastOneInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(Xn, e);
    return this.atLeastOneInternalLogic(e, n, r);
  }
  atLeastOneInternalLogic(e, n, r) {
    let i = this.getLaFuncFromCache(r), s;
    if (typeof n != "function") {
      s = n.DEF;
      const a = n.GATE;
      if (a !== void 0) {
        const o = i;
        i = () => a.call(this) && o.call(this);
      }
    } else
      s = n;
    if (i.call(this) === !0) {
      let a = this.doSingleRepetition(s);
      for (; i.call(this) === !0 && a === !0; )
        a = this.doSingleRepetition(s);
    } else
      throw this.raiseEarlyExitException(e, $.REPETITION_MANDATORY, n.ERR_MSG);
    this.attemptInRepetitionRecovery(this.atLeastOneInternal, [e, n], i, Xn, e, mp);
  }
  atLeastOneSepFirstInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(zt, e);
    this.atLeastOneSepFirstInternalLogic(e, n, r);
  }
  atLeastOneSepFirstInternalLogic(e, n, r) {
    const i = n.DEF, s = n.SEP;
    if (this.getLaFuncFromCache(r).call(this) === !0) {
      i.call(this);
      const a = () => this.tokenMatcher(this.LA(1), s);
      for (; this.tokenMatcher(this.LA(1), s) === !0; )
        this.CONSUME(s), i.call(this);
      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
        e,
        s,
        a,
        i,
        Pi
      ], a, zt, e, Pi);
    } else
      throw this.raiseEarlyExitException(e, $.REPETITION_MANDATORY_WITH_SEPARATOR, n.ERR_MSG);
  }
  manyInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(Yn, e);
    return this.manyInternalLogic(e, n, r);
  }
  manyInternalLogic(e, n, r) {
    let i = this.getLaFuncFromCache(r), s;
    if (typeof n != "function") {
      s = n.DEF;
      const o = n.GATE;
      if (o !== void 0) {
        const c = i;
        i = () => o.call(this) && c.call(this);
      }
    } else
      s = n;
    let a = !0;
    for (; i.call(this) === !0 && a === !0; )
      a = this.doSingleRepetition(s);
    this.attemptInRepetitionRecovery(
      this.manyInternal,
      [e, n],
      i,
      Yn,
      e,
      dp,
      // The notStuck parameter is only relevant when "attemptInRepetitionRecovery"
      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]
      // An infinite loop cannot occur as:
      // - Either the lookahead is guaranteed to consume something (Single Token Separator)
      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).
      a
    );
  }
  manySepFirstInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(qn, e);
    this.manySepFirstInternalLogic(e, n, r);
  }
  manySepFirstInternalLogic(e, n, r) {
    const i = n.DEF, s = n.SEP;
    if (this.getLaFuncFromCache(r).call(this) === !0) {
      i.call(this);
      const a = () => this.tokenMatcher(this.LA(1), s);
      for (; this.tokenMatcher(this.LA(1), s) === !0; )
        this.CONSUME(s), i.call(this);
      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
        e,
        s,
        a,
        i,
        Mi
      ], a, qn, e, Mi);
    }
  }
  repetitionSepSecondInternal(e, n, r, i, s) {
    for (; r(); )
      this.CONSUME(n), i.call(this);
    this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
      e,
      n,
      r,
      i,
      s
    ], r, zt, e, s);
  }
  doSingleRepetition(e) {
    const n = this.getLexerPosition();
    return e.call(this), this.getLexerPosition() > n;
  }
  orInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(Ys, n), i = N(e) ? e : e.DEF, s = this.getLaFuncFromCache(r).call(this, i);
    if (s !== void 0)
      return i[s].ALT.call(this);
    this.raiseNoAltException(n, e.ERR_MSG);
  }
  ruleFinallyStateUpdate() {
    if (this.RULE_STACK.pop(), this.RULE_OCCURRENCE_STACK.pop(), this.cstFinallyStateUpdate(), this.RULE_STACK.length === 0 && this.isAtEndOfInput() === !1) {
      const e = this.LA(1), n = this.errorMessageProvider.buildNotAllInputParsedMessage({
        firstRedundant: e,
        ruleName: this.getCurrRuleFullName()
      });
      this.SAVE_ERROR(new Bp(n, e));
    }
  }
  subruleInternal(e, n, r) {
    let i;
    try {
      const s = r !== void 0 ? r.ARGS : void 0;
      return this.subruleIdx = n, i = e.apply(this, s), this.cstPostNonTerminal(i, r !== void 0 && r.LABEL !== void 0 ? r.LABEL : e.ruleName), i;
    } catch (s) {
      throw this.subruleInternalError(s, r, e.ruleName);
    }
  }
  subruleInternalError(e, n, r) {
    throw rn(e) && e.partialCstResult !== void 0 && (this.cstPostNonTerminal(e.partialCstResult, n !== void 0 && n.LABEL !== void 0 ? n.LABEL : r), delete e.partialCstResult), e;
  }
  consumeInternal(e, n, r) {
    let i;
    try {
      const s = this.LA(1);
      this.tokenMatcher(s, e) === !0 ? (this.consumeToken(), i = s) : this.consumeInternalError(e, s, r);
    } catch (s) {
      i = this.consumeInternalRecovery(e, n, s);
    }
    return this.cstPostTerminal(r !== void 0 && r.LABEL !== void 0 ? r.LABEL : e.name, i), i;
  }
  consumeInternalError(e, n, r) {
    let i;
    const s = this.LA(0);
    throw r !== void 0 && r.ERR_MSG ? i = r.ERR_MSG : i = this.errorMessageProvider.buildMismatchTokenMessage({
      expected: e,
      actual: n,
      previous: s,
      ruleName: this.getCurrRuleFullName()
    }), this.SAVE_ERROR(new Ws(i, n, s));
  }
  consumeInternalRecovery(e, n, r) {
    if (this.recoveryEnabled && // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?
    r.name === "MismatchedTokenException" && !this.isBackTracking()) {
      const i = this.getFollowsForInRuleRecovery(e, n);
      try {
        return this.tryInRuleRecovery(e, i);
      } catch (s) {
        throw s.name === zs ? r : s;
      }
    } else
      throw r;
  }
  saveRecogState() {
    const e = this.errors, n = W(this.RULE_STACK);
    return {
      errors: e,
      lexerState: this.exportLexerState(),
      RULE_STACK: n,
      CST_STACK: this.CST_STACK
    };
  }
  reloadRecogState(e) {
    this.errors = e.errors, this.importLexerState(e.lexerState), this.RULE_STACK = e.RULE_STACK;
  }
  ruleInvocationStateUpdate(e, n, r) {
    this.RULE_OCCURRENCE_STACK.push(r), this.RULE_STACK.push(e), this.cstInvocationStateUpdate(n);
  }
  isBackTracking() {
    return this.isBackTrackingStack.length !== 0;
  }
  getCurrRuleFullName() {
    const e = this.getLastExplicitRuleShortName();
    return this.shortRuleNameToFull[e];
  }
  shortRuleNameToFullName(e) {
    return this.shortRuleNameToFull[e];
  }
  isAtEndOfInput() {
    return this.tokenMatcher(this.LA(1), Je);
  }
  reset() {
    this.resetLexerState(), this.subruleIdx = 0, this.isBackTrackingStack = [], this.errors = [], this.RULE_STACK = [], this.CST_STACK = [], this.RULE_OCCURRENCE_STACK = [];
  }
}
class ld {
  initErrorHandler(e) {
    this._errors = [], this.errorMessageProvider = R(e, "errorMessageProvider") ? e.errorMessageProvider : Ue.errorMessageProvider;
  }
  SAVE_ERROR(e) {
    if (rn(e))
      return e.context = {
        ruleStack: this.getHumanReadableRuleStack(),
        ruleOccurrenceStack: W(this.RULE_OCCURRENCE_STACK)
      }, this._errors.push(e), e;
    throw Error("Trying to save an Error which is not a RecognitionException");
  }
  get errors() {
    return W(this._errors);
  }
  set errors(e) {
    this._errors = e;
  }
  // TODO: consider caching the error message computed information
  raiseEarlyExitException(e, n, r) {
    const i = this.getCurrRuleFullName(), s = this.getGAstProductions()[i], a = Cr(e, s, n, this.maxLookahead)[0], o = [];
    for (let u = 1; u <= this.maxLookahead; u++)
      o.push(this.LA(u));
    const c = this.errorMessageProvider.buildEarlyExitMessage({
      expectedIterationPaths: a,
      actual: o,
      previous: this.LA(0),
      customUserDescription: r,
      ruleName: i
    });
    throw this.SAVE_ERROR(new Vp(c, this.LA(1), this.LA(0)));
  }
  // TODO: consider caching the error message computed information
  raiseNoAltException(e, n) {
    const r = this.getCurrRuleFullName(), i = this.getGAstProductions()[r], s = kr(e, i, this.maxLookahead), a = [];
    for (let u = 1; u <= this.maxLookahead; u++)
      a.push(this.LA(u));
    const o = this.LA(0), c = this.errorMessageProvider.buildNoViableAltMessage({
      expectedPathsPerAlt: s,
      actual: a,
      previous: o,
      customUserDescription: n,
      ruleName: this.getCurrRuleFullName()
    });
    throw this.SAVE_ERROR(new Gp(c, this.LA(1), o));
  }
}
class hd {
  initContentAssist() {
  }
  computeContentAssist(e, n) {
    const r = this.gastProductionsCache[e];
    if (we(r))
      throw Error(`Rule ->${e}<- does not exist in this grammar.`);
    return xs([r], n, this.tokenMatcher, this.maxLookahead);
  }
  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...
  // TODO: should this be more explicitly part of the public API?
  getNextPossibleTokenTypes(e) {
    const n = me(e.ruleStack), r = this.getGAstProductions()[n];
    return new pp(r, e).startWalking();
  }
}
const On = {
  description: "This Object indicates the Parser is during Recording Phase"
};
Object.freeze(On);
const Di = !0, Fi = Math.pow(2, Ke) - 1, Qs = M({ name: "RECORDING_PHASE_TOKEN", pattern: Y.NA });
Pt([Qs]);
const Zs = Lr(
  Qs,
  `This IToken indicates the Parser is in Recording Phase
	See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details`,
  // Using "-1" instead of NaN (as in EOF) because an actual number is less likely to
  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.
  -1,
  -1,
  -1,
  -1,
  -1,
  -1
);
Object.freeze(Zs);
const fd = {
  name: `This CSTNode indicates the Parser is in Recording Phase
	See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details`,
  children: {}
};
class pd {
  initGastRecorder(e) {
    this.recordingProdStack = [], this.RECORDING_PHASE = !1;
  }
  enableRecording() {
    this.RECORDING_PHASE = !0, this.TRACE_INIT("Enable Recording", () => {
      for (let e = 0; e < 10; e++) {
        const n = e > 0 ? e : "";
        this[`CONSUME${n}`] = function(r, i) {
          return this.consumeInternalRecord(r, e, i);
        }, this[`SUBRULE${n}`] = function(r, i) {
          return this.subruleInternalRecord(r, e, i);
        }, this[`OPTION${n}`] = function(r) {
          return this.optionInternalRecord(r, e);
        }, this[`OR${n}`] = function(r) {
          return this.orInternalRecord(r, e);
        }, this[`MANY${n}`] = function(r) {
          this.manyInternalRecord(e, r);
        }, this[`MANY_SEP${n}`] = function(r) {
          this.manySepFirstInternalRecord(e, r);
        }, this[`AT_LEAST_ONE${n}`] = function(r) {
          this.atLeastOneInternalRecord(e, r);
        }, this[`AT_LEAST_ONE_SEP${n}`] = function(r) {
          this.atLeastOneSepFirstInternalRecord(e, r);
        };
      }
      this.consume = function(e, n, r) {
        return this.consumeInternalRecord(n, e, r);
      }, this.subrule = function(e, n, r) {
        return this.subruleInternalRecord(n, e, r);
      }, this.option = function(e, n) {
        return this.optionInternalRecord(n, e);
      }, this.or = function(e, n) {
        return this.orInternalRecord(n, e);
      }, this.many = function(e, n) {
        this.manyInternalRecord(e, n);
      }, this.atLeastOne = function(e, n) {
        this.atLeastOneInternalRecord(e, n);
      }, this.ACTION = this.ACTION_RECORD, this.BACKTRACK = this.BACKTRACK_RECORD, this.LA = this.LA_RECORD;
    });
  }
  disableRecording() {
    this.RECORDING_PHASE = !1, this.TRACE_INIT("Deleting Recording methods", () => {
      const e = this;
      for (let n = 0; n < 10; n++) {
        const r = n > 0 ? n : "";
        delete e[`CONSUME${r}`], delete e[`SUBRULE${r}`], delete e[`OPTION${r}`], delete e[`OR${r}`], delete e[`MANY${r}`], delete e[`MANY_SEP${r}`], delete e[`AT_LEAST_ONE${r}`], delete e[`AT_LEAST_ONE_SEP${r}`];
      }
      delete e.consume, delete e.subrule, delete e.option, delete e.or, delete e.many, delete e.atLeastOne, delete e.ACTION, delete e.BACKTRACK, delete e.LA;
    });
  }
  //   Parser methods are called inside an ACTION?
  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?
  // @ts-expect-error -- noop place holder
  ACTION_RECORD(e) {
  }
  // Executing backtracking logic will break our recording logic assumptions
  BACKTRACK_RECORD(e, n) {
    return () => !0;
  }
  // LA is part of the official API and may be used for custom lookahead logic
  // by end users who may forget to wrap it in ACTION or inside a GATE
  LA_RECORD(e) {
    return an;
  }
  topLevelRuleRecord(e, n) {
    try {
      const r = new ft({ definition: [], name: e });
      return r.name = e, this.recordingProdStack.push(r), n.call(this), this.recordingProdStack.pop(), r;
    } catch (r) {
      if (r.KNOWN_RECORDER_ERROR !== !0)
        try {
          r.message = r.message + `
	 This error was thrown during the "grammar recording phase" For more info see:
	https://chevrotain.io/docs/guide/internals.html#grammar-recording`;
        } catch {
          throw r;
        }
      throw r;
    }
  }
  // Implementation of parsing DSL
  optionInternalRecord(e, n) {
    return Et.call(this, Z, e, n);
  }
  atLeastOneInternalRecord(e, n) {
    Et.call(this, ke, n, e);
  }
  atLeastOneSepFirstInternalRecord(e, n) {
    Et.call(this, Ce, n, e, Di);
  }
  manyInternalRecord(e, n) {
    Et.call(this, K, n, e);
  }
  manySepFirstInternalRecord(e, n) {
    Et.call(this, Ee, n, e, Di);
  }
  orInternalRecord(e, n) {
    return dd.call(this, e, n);
  }
  subruleInternalRecord(e, n, r) {
    if (sn(n), !e || R(e, "ruleName") === !1) {
      const o = new Error(`<SUBRULE${$i(n)}> argument is invalid expecting a Parser method reference but got: <${JSON.stringify(e)}>
 inside top level rule: <${this.recordingProdStack[0].name}>`);
      throw o.KNOWN_RECORDER_ERROR = !0, o;
    }
    const i = lt(this.recordingProdStack), s = e.ruleName, a = new re({
      idx: n,
      nonTerminalName: s,
      label: r == null ? void 0 : r.LABEL,
      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created
      referencedRule: void 0
    });
    return i.definition.push(a), this.outputCst ? fd : On;
  }
  consumeInternalRecord(e, n, r) {
    if (sn(n), !Ns(e)) {
      const a = new Error(`<CONSUME${$i(n)}> argument is invalid expecting a TokenType reference but got: <${JSON.stringify(e)}>
 inside top level rule: <${this.recordingProdStack[0].name}>`);
      throw a.KNOWN_RECORDER_ERROR = !0, a;
    }
    const i = lt(this.recordingProdStack), s = new F({
      idx: n,
      terminalType: e,
      label: r == null ? void 0 : r.LABEL
    });
    return i.definition.push(s), Zs;
  }
}
function Et(t, e, n, r = !1) {
  sn(n);
  const i = lt(this.recordingProdStack), s = De(e) ? e : e.DEF, a = new t({ definition: [], idx: n });
  return r && (a.separator = e.SEP), R(e, "MAX_LOOKAHEAD") && (a.maxLookahead = e.MAX_LOOKAHEAD), this.recordingProdStack.push(a), s.call(this), i.definition.push(a), this.recordingProdStack.pop(), On;
}
function dd(t, e) {
  sn(e);
  const n = lt(this.recordingProdStack), r = N(t) === !1, i = r === !1 ? t : t.DEF, s = new Te({
    definition: [],
    idx: e,
    ignoreAmbiguities: r && t.IGNORE_AMBIGUITIES === !0
  });
  R(t, "MAX_LOOKAHEAD") && (s.maxLookahead = t.MAX_LOOKAHEAD);
  const a = ys(i, (o) => De(o.GATE));
  return s.hasPredicates = a, n.definition.push(s), I(i, (o) => {
    const c = new ee({ definition: [] });
    s.definition.push(c), R(o, "IGNORE_AMBIGUITIES") ? c.ignoreAmbiguities = o.IGNORE_AMBIGUITIES : R(o, "GATE") && (c.ignoreAmbiguities = !0), this.recordingProdStack.push(c), o.ALT.call(this), this.recordingProdStack.pop();
  }), On;
}
function $i(t) {
  return t === 0 ? "" : `${t}`;
}
function sn(t) {
  if (t < 0 || t > Fi) {
    const e = new Error(
      // The stack trace will contain all the needed details
      `Invalid DSL Method idx value: <${t}>
	Idx value must be a none negative value smaller than ${Fi + 1}`
    );
    throw e.KNOWN_RECORDER_ERROR = !0, e;
  }
}
class md {
  initPerformanceTracer(e) {
    if (R(e, "traceInitPerf")) {
      const n = e.traceInitPerf, r = typeof n == "number";
      this.traceInitMaxIdent = r ? n : 1 / 0, this.traceInitPerf = r ? n > 0 : n;
    } else
      this.traceInitMaxIdent = 0, this.traceInitPerf = Ue.traceInitPerf;
    this.traceInitIndent = -1;
  }
  TRACE_INIT(e, n) {
    if (this.traceInitPerf === !0) {
      this.traceInitIndent++;
      const r = new Array(this.traceInitIndent + 1).join("	");
      this.traceInitIndent < this.traceInitMaxIdent && console.log(`${r}--> <${e}>`);
      const { time: i, value: s } = _s(n), a = i > 10 ? console.warn : console.log;
      return this.traceInitIndent < this.traceInitMaxIdent && a(`${r}<-- <${e}> time: ${i}ms`), this.traceInitIndent--, s;
    } else
      return n();
  }
}
function gd(t, e) {
  e.forEach((n) => {
    const r = n.prototype;
    Object.getOwnPropertyNames(r).forEach((i) => {
      if (i === "constructor")
        return;
      const s = Object.getOwnPropertyDescriptor(r, i);
      s && (s.get || s.set) ? Object.defineProperty(t.prototype, i, s) : t.prototype[i] = n.prototype[i];
    });
  });
}
const an = Lr(Je, "", NaN, NaN, NaN, NaN, NaN, NaN);
Object.freeze(an);
const Ue = Object.freeze({
  recoveryEnabled: !1,
  maxLookahead: 3,
  dynamicTokensEnabled: !1,
  outputCst: !0,
  errorMessageProvider: Ps,
  nodeLocationTracking: "none",
  traceInitPerf: !1,
  skipValidations: !1
}), on = Object.freeze({
  recoveryValueFunc: () => {
  },
  resyncEnabled: !0
});
var X;
(function(t) {
  t[t.INVALID_RULE_NAME = 0] = "INVALID_RULE_NAME", t[t.DUPLICATE_RULE_NAME = 1] = "DUPLICATE_RULE_NAME", t[t.INVALID_RULE_OVERRIDE = 2] = "INVALID_RULE_OVERRIDE", t[t.DUPLICATE_PRODUCTIONS = 3] = "DUPLICATE_PRODUCTIONS", t[t.UNRESOLVED_SUBRULE_REF = 4] = "UNRESOLVED_SUBRULE_REF", t[t.LEFT_RECURSION = 5] = "LEFT_RECURSION", t[t.NONE_LAST_EMPTY_ALT = 6] = "NONE_LAST_EMPTY_ALT", t[t.AMBIGUOUS_ALTS = 7] = "AMBIGUOUS_ALTS", t[t.CONFLICT_TOKENS_RULES_NAMESPACE = 8] = "CONFLICT_TOKENS_RULES_NAMESPACE", t[t.INVALID_TOKEN_NAME = 9] = "INVALID_TOKEN_NAME", t[t.NO_NON_EMPTY_LOOKAHEAD = 10] = "NO_NON_EMPTY_LOOKAHEAD", t[t.AMBIGUOUS_PREFIX_ALTS = 11] = "AMBIGUOUS_PREFIX_ALTS", t[t.TOO_MANY_ALTS = 12] = "TOO_MANY_ALTS", t[t.CUSTOM_LOOKAHEAD_VALIDATION = 13] = "CUSTOM_LOOKAHEAD_VALIDATION";
})(X || (X = {}));
class xt {
  /**
   *  @deprecated use the **instance** method with the same name instead
   */
  static performSelfAnalysis(e) {
    throw Error("The **static** `performSelfAnalysis` method has been deprecated.	\nUse the **instance** method with the same name instead.");
  }
  performSelfAnalysis() {
    this.TRACE_INIT("performSelfAnalysis", () => {
      let e;
      this.selfAnalysisDone = !0;
      const n = this.className;
      this.TRACE_INIT("toFastProps", () => {
        vs(this);
      }), this.TRACE_INIT("Grammar Recording", () => {
        try {
          this.enableRecording(), I(this.definedRulesNames, (i) => {
            const s = this[i].originalGrammarAction;
            let a;
            this.TRACE_INIT(`${i} Rule`, () => {
              a = this.topLevelRuleRecord(i, s);
            }), this.gastProductionsCache[i] = a;
          });
        } finally {
          this.disableRecording();
        }
      });
      let r = [];
      if (this.TRACE_INIT("Grammar Resolving", () => {
        r = $p({
          rules: V(this.gastProductionsCache)
        }), this.definitionErrors = this.definitionErrors.concat(r);
      }), this.TRACE_INIT("Grammar Validations", () => {
        if (w(r) && this.skipValidations === !1) {
          const i = jp({
            rules: V(this.gastProductionsCache),
            tokenTypes: V(this.tokensMap),
            errMsgProvider: qe,
            grammarName: n
          }), s = Op({
            lookaheadStrategy: this.lookaheadStrategy,
            rules: V(this.gastProductionsCache),
            tokenTypes: V(this.tokensMap),
            grammarName: n
          });
          this.definitionErrors = this.definitionErrors.concat(i, s);
        }
      }), w(this.definitionErrors) && (this.recoveryEnabled && this.TRACE_INIT("computeAllProdsFollows", () => {
        const i = Ef(V(this.gastProductionsCache));
        this.resyncFollows = i;
      }), this.TRACE_INIT("ComputeLookaheadFunctions", () => {
        var i, s;
        (s = (i = this.lookaheadStrategy).initialize) === null || s === void 0 || s.call(i, {
          rules: V(this.gastProductionsCache)
        }), this.preComputeLookaheadFunctions(V(this.gastProductionsCache));
      })), !xt.DEFER_DEFINITION_ERRORS_HANDLING && !w(this.definitionErrors))
        throw e = v(this.definitionErrors, (i) => i.message), new Error(`Parser Definition Errors detected:
 ${e.join(`
-------------------------------
`)}`);
    });
  }
  constructor(e, n) {
    this.definitionErrors = [], this.selfAnalysisDone = !1;
    const r = this;
    if (r.initErrorHandler(n), r.initLexerAdapter(), r.initLooksAhead(n), r.initRecognizerEngine(e, n), r.initRecoverable(n), r.initTreeBuilder(n), r.initContentAssist(), r.initGastRecorder(n), r.initPerformanceTracer(n), R(n, "ignoredIssues"))
      throw new Error(`The <ignoredIssues> IParserConfig property has been deprecated.
	Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.
	See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES
	For further details.`);
    this.skipValidations = R(n, "skipValidations") ? n.skipValidations : Ue.skipValidations;
  }
}
xt.DEFER_DEFINITION_ERRORS_HANDLING = !1;
gd(xt, [
  Hp,
  Xp,
  ad,
  od,
  ud,
  cd,
  ld,
  hd,
  pd,
  md
]);
class Ed extends xt {
  constructor(e, n = Ue) {
    const r = W(n);
    r.outputCst = !0, super(e, r);
  }
}
const Js = M({
  name: "HTML_COMMENT",
  pattern: /<!--[\s\S]*?-->/,
  line_breaks: !0
}), ea = M({
  name: "HTML_CONDITIONAL_COMMENT",
  pattern: /<!\[[\s\S]*?\]>/,
  line_breaks: !0
}), Td = M({
  name: "XML",
  pattern: /<\?xml(?:.|\s)*?\?>/
}), ta = M({
  name: "CDATA",
  pattern: /<!\[CDATA\[[\s\S]*?]]>/
}), na = M({
  name: "DTD",
  pattern: /<!.*?>/
}), ra = M({
  name: "SCRIPTLET",
  pattern: /<%(.*?)%>|<\?(.*?)\?>/
}), yd = M({
  name: "SEA_WS",
  pattern: /[ \t]+/,
  group: Y.SKIPPED
}), ia = M({
  name: "LINE_BREAK",
  pattern: /\r?\n/
}), sa = M({
  name: "SCRIPT_OPEN",
  pattern: /<script\b[^>]*>/,
  push_mode: "SCRIPT"
}), aa = M({
  name: "STYLE_OPEN",
  pattern: /<style\b[^>]*>/,
  push_mode: "STYLE"
}), Zn = M({
  name: "TAG_OPEN",
  pattern: /</,
  push_mode: "TAG"
}), oa = M({
  name: "HTML_TEXT",
  pattern: /[^<@]+/,
  line_breaks: !0
}), Jn = M({
  name: "TAG_CLOSE",
  pattern: />/,
  pop_mode: !0
}), ca = M({
  name: "TAG_SLASH_CLOSE",
  pattern: /\/>/,
  pop_mode: !0
}), ua = M({
  name: "TAG_SLASH",
  pattern: /\//
}), la = M({
  name: "TAG_EQUALS",
  pattern: /=/,
  push_mode: "ATTVALUE"
}), Yt = M({
  name: "TAG_NAME",
  pattern: /[:@a-zA-Z\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:\.\-@\u00B7\u0300-\u036F\u203F-\u2040.0-9a-zA-Z]*/
}), Ad = M({
  name: "TAG_WHITESPACE",
  pattern: /[ \t\r\n]+/,
  group: Y.SKIPPED
}), ha = M({
  name: "SCRIPT_BODY",
  pattern: /[\s\S]*?<\/script>/,
  pop_mode: !0
}), fa = M({
  name: "STYLE_BODY",
  pattern: /[\s\S]*?<\/style>/,
  pop_mode: !0
}), pa = M({
  name: "ATTVALUE_VALUE",
  pattern: / *("[^<"]*"|'[^<']*'|[-_./+,?=:#;0-9a-zA-Z]+ ?|#[0-9a-fA-F]+|[0-9]+%?)/,
  pop_mode: !0
}), er = M({
  name: "EDGE_COMMENT",
  pattern: /{{--[\s\S]*?--}}/,
  line_breaks: !0
}), tr = M({
  name: "EDGE_MUSTACHE",
  pattern: /{{[\s\S]*?}}\s*/
}), nr = M({
  name: "EDGE_SAFE_MUSTACHE",
  pattern: /{{{[\s\S]*?}}}\s*/
}), da = M({
  name: "EDGE_ESCAPED_MUSTACHE",
  pattern: /@{{[\s\S]*?}}\s*/
}), ma = M({
  name: "EDGE_TAG",
  pattern: /@(?:!?\w+(?:\.\w+)*)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?/
}), ga = M({
  name: "EDGE_TAG_PROP",
  pattern: /@(if|elseif|else|each|flashMessage)\([^)]*\)\s*([\s\S]*?)@end/
}), rr = {
  defaultMode: "default",
  modes: {
    default: [
      Js,
      ea,
      Td,
      ta,
      na,
      ra,
      ia,
      yd,
      sa,
      aa,
      Zn,
      er,
      da,
      nr,
      tr,
      ma,
      oa
    ],
    TAG: [
      Jn,
      ca,
      ua,
      la,
      er,
      nr,
      tr,
      ga,
      Yt,
      Ad
    ],
    SCRIPT: [ha],
    STYLE: [fa],
    ATTVALUE: [pa]
  }
}, _d = () => {
  const t = [];
  for (const e in rr.modes)
    t.push(...rr.modes[e]);
  return t;
}, vd = new Y(rr);
class Ea extends Ed {
  constructor() {
    super(_d());
    const e = this;
    e.RULE("document", () => {
      e.MANY(() => {
        e.SUBRULE(e.content);
      });
    }), e.RULE("content", () => {
      e.OR([
        { ALT: () => e.CONSUME(oa) },
        { ALT: () => e.CONSUME(ia) },
        { ALT: () => e.SUBRULE(e.element) },
        { ALT: () => e.SUBRULE(e.scriptlet) },
        { ALT: () => e.SUBRULE(e.htmlComment) },
        { ALT: () => e.SUBRULE(e.htmlConditionalComment) },
        { ALT: () => e.SUBRULE(e.cdata) },
        { ALT: () => e.SUBRULE(e.dtd) },
        { ALT: () => e.SUBRULE(e.scriptElement) },
        { ALT: () => e.SUBRULE(e.styleElement) },
        { ALT: () => e.SUBRULE(e.edgeComment) },
        { ALT: () => e.SUBRULE(e.edgeSafeMustache) },
        { ALT: () => e.SUBRULE(e.edgeMustache) },
        { ALT: () => e.SUBRULE(e.edgeEscapedMustache) },
        { ALT: () => e.SUBRULE(e.edgeTag) }
      ]);
    }), e.RULE("element", () => {
      e.OR([
        {
          ALT: () => e.SUBRULE(e.openingTag)
        },
        {
          ALT: () => e.SUBRULE(e.closingTag)
        }
      ]);
    }), e.RULE("openingTag", () => {
      e.CONSUME(Zn), e.CONSUME(Yt), e.MANY(() => {
        e.OR([
          { ALT: () => e.SUBRULE(e.edgeTagProp) },
          { ALT: () => e.SUBRULE(e.attribute) },
          { ALT: () => e.SUBRULE(e.edgeSafeMustache) },
          { ALT: () => e.SUBRULE(e.edgeMustache) },
          { ALT: () => e.SUBRULE(e.edgeComment) }
        ]);
      }), e.OR1([
        { ALT: () => e.CONSUME1(ca) },
        { ALT: () => e.CONSUME1(Jn) }
      ]);
    }), e.RULE("attribute", () => {
      e.CONSUME(Yt), e.OPTION(() => {
        e.CONSUME(la), e.CONSUME(pa);
      });
    }), e.RULE("closingTag", () => {
      e.CONSUME(Zn), e.CONSUME(ua), e.CONSUME(Yt), e.CONSUME(Jn);
    }), e.RULE("scriptlet", () => {
      e.CONSUME(ra);
    }), e.RULE("htmlComment", () => {
      e.CONSUME(Js);
    }), e.RULE("htmlConditionalComment", () => {
      e.CONSUME(ea);
    }), e.RULE("cdata", () => {
      e.CONSUME(ta);
    }), e.RULE("dtd", () => {
      e.CONSUME(na);
    }), e.RULE("scriptElement", () => {
      e.CONSUME(sa), e.CONSUME(ha);
    }), e.RULE("styleElement", () => {
      e.CONSUME(aa), e.CONSUME(fa);
    }), e.RULE("edgeComment", () => {
      e.CONSUME(er);
    }), e.RULE("edgeMustache", () => {
      e.CONSUME(tr);
    }), e.RULE("edgeSafeMustache", () => {
      e.CONSUME(nr);
    }), e.RULE("edgeEscapedMustache", () => {
      e.CONSUME(da);
    }), e.RULE("edgeTag", () => {
      e.CONSUME(ma);
    }), e.RULE("edgeTagProp", () => {
      e.CONSUME(ga);
    }), this.performSelfAnalysis();
  }
}
const Rd = new Ea(), Od = Rd.getBaseCstVisitorConstructor();
var ir, Xt, sr;
class Id extends Od {
  constructor() {
    super(), Ur(this, Xt), Ur(this, ir, /* @__PURE__ */ new Set([
      "area",
      "base",
      "br",
      "col",
      "embed",
      "hr",
      "img",
      "input",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr",
      // Below are for SVGs
      "animateMotion",
      "animateTransform",
      "animate",
      "circle",
      "ellipse",
      "feGaussianBlur",
      "feDropShadow",
      "feOffset",
      "feBlend",
      "feColorMatrix",
      "feComposite",
      "feDisplacementMap",
      "feFlood",
      "feImage",
      "feMergeNode",
      "feMorphology",
      "fePointLight",
      "feSpotLight",
      "feTile",
      "feTurbulence",
      "image",
      "line",
      "mpath",
      "path",
      "polygon",
      "polyline",
      "rect",
      "set",
      "stop",
      "use",
      "view"
    ])), this.validateVisitor();
  }
  document(e) {
    const n = e.content[0].startOffset, r = e.content[e.content.length - 1].endOffset;
    return {
      type: "document",
      children: e.content.map((i) => this.visit(i)),
      start: n,
      end: r
    };
  }
  content(e) {
    if (e.HTML_TEXT)
      return {
        type: "htmlText",
        value: e.HTML_TEXT[0].image,
        start: e.HTML_TEXT[0].startOffset,
        end: e.HTML_TEXT[0].endOffset
      };
    if (e.LINE_BREAK)
      return {
        type: "linebreak",
        value: e.LINE_BREAK[0].image,
        start: e.LINE_BREAK[0].startOffset,
        end: e.LINE_BREAK[0].endOffset
      };
    const n = e.element || e.scriptlet || e.htmlComment || e.htmlConditionalComment || e.cdata || e.dtd || e.scriptElement || e.styleElement || e.edgeComment || e.edgeMustache || e.edgeSafeMustache || e.edgeEscapedMustache || e.edgeTag || e.htmlText;
    return this.visit(n);
  }
  element(e) {
    return e.openingTag ? this.visit(e.openingTag) : e.selfClosingTag ? this.visit(e.selfClosingTag) : this.visit(e.closingTag);
  }
  openingTag(e) {
    const n = e.TAG_NAME[0].image, r = e.edgeSafeMustache ? e.edgeSafeMustache.map((l) => this.visit(l)) : [], i = e.edgeMustache ? e.edgeMustache.map((l) => this.visit(l)) : [], s = e.edgeTagProp ? e.edgeTagProp.map((l) => this.visit(l)) : [], a = e.attribute ? e.attribute.map((l) => this.visit(l)) : [], o = e.edgeComment ? e.edgeComment.map((l) => this.visit(l)) : [], c = e.TAG_NAME[0].startOffset, u = e.TAG_NAME[0].endOffset;
    return Dr(this, Xt, sr).call(this, n) || e.TAG_SLASH_CLOSE ? {
      type: "voidTag",
      tagName: n,
      edgeSafeMustaches: r,
      edgeMustaches: i,
      edgeTagProps: s,
      attributes: a,
      comments: o,
      start: c,
      end: u
    } : {
      type: "openingTag",
      tagName: n,
      edgeSafeMustaches: r,
      edgeMustaches: i,
      edgeTagProps: s,
      attributes: a,
      comments: o,
      start: c,
      end: u
    };
  }
  attribute(e) {
    var n, r, i;
    const s = e.TAG_NAME[0].image, a = (i = (r = (n = e.ATTVALUE_VALUE) == null ? void 0 : n[0]) == null ? void 0 : r.image) == null ? void 0 : i.trim(), o = e.TAG_NAME[0].startOffset, c = e.ATTVALUE_VALUE ? e.ATTVALUE_VALUE[0].endOffset : e.TAG_NAME[0].endOffset;
    return { type: "attribute", attributeName: s, attributeValue: a, start: o, end: c };
  }
  closingTag(e) {
    const n = e.TAG_NAME[0].image, r = e.TAG_OPEN[0].startOffset, i = e.TAG_CLOSE[0].endOffset;
    return Dr(this, Xt, sr).call(this, n) ? {
      type: "doNotPrint"
    } : { type: "closingTag", tagName: n, start: r, end: i };
  }
  scriptlet(e) {
    const n = e.SCRIPTLET[0].image, r = e.SCRIPTLET[0].startOffset, i = e.SCRIPTLET[0].endOffset;
    return { type: "scriptlet", value: n, start: r, end: i };
  }
  htmlComment(e) {
    const n = e.HTML_COMMENT[0].image, r = e.HTML_COMMENT[0].startOffset, i = e.HTML_COMMENT[0].endOffset;
    return { type: "htmlComment", value: n, start: r, end: i };
  }
  htmlConditionalComment(e) {
    const n = e.HTML_CONDITIONAL_COMMENT[0].image, r = e.HTML_CONDITIONAL_COMMENT[0].startOffset, i = e.HTML_CONDITIONAL_COMMENT[0].endOffset;
    return { type: "htmlConditionalComment", value: n, start: r, end: i };
  }
  cdata(e) {
    const n = e.CDATA[0].image, r = e.CDATA[0].startOffset, i = e.CDATA[0].endOffset;
    return { type: "cdata", value: n, start: r, end: i };
  }
  dtd(e) {
    const n = e.DTD[0].image, r = e.DTD[0].startOffset, i = e.DTD[0].endOffset;
    return { type: "dtd", value: n, start: r, end: i };
  }
  scriptElement(e) {
    const n = e.SCRIPT_OPEN[0].image + e.SCRIPT_BODY[0].image, r = e.SCRIPT_OPEN[0].startOffset, i = e.SCRIPT_BODY[0].endOffset;
    return { type: "scriptElement", value: n, start: r, end: i };
  }
  styleElement(e) {
    const n = e.STYLE_OPEN[0].image + e.STYLE_BODY[0].image, r = e.STYLE_OPEN[0].startOffset, i = e.STYLE_BODY[0].endOffset;
    return { type: "styleElement", value: n, start: r, end: i };
  }
  edgeComment(e) {
    const n = e.EDGE_COMMENT[0].image, r = e.EDGE_COMMENT[0].startOffset, i = e.EDGE_COMMENT[0].endOffset;
    return { type: "edgeComment", value: n, start: r, end: i };
  }
  edgeMustache(e) {
    const n = e.EDGE_MUSTACHE[0].image, r = e.EDGE_MUSTACHE[0].startOffset, i = e.EDGE_MUSTACHE[0].endOffset;
    return { type: "edgeMustache", value: n, start: r, end: i };
  }
  edgeSafeMustache(e) {
    const n = e.EDGE_SAFE_MUSTACHE[0].image, r = e.EDGE_SAFE_MUSTACHE[0].startOffset, i = e.EDGE_SAFE_MUSTACHE[0].endOffset;
    return { type: "edgeSafeMustache", value: n, start: r, end: i };
  }
  edgeEscapedMustache(e) {
    const n = e.EDGE_ESCAPED_MUSTACHE[0].image, r = e.EDGE_ESCAPED_MUSTACHE[0].startOffset, i = e.EDGE_ESCAPED_MUSTACHE[0].endOffset;
    return { type: "edgeEscapedMustache", value: n, start: r, end: i };
  }
  edgeTag(e) {
    const n = e.EDGE_TAG[0].image, r = e.EDGE_TAG[0].startOffset, i = e.EDGE_TAG[0].endOffset;
    return { type: "edgeTag", value: n, start: r, end: i };
  }
  edgeTagProp(e) {
    const n = e.EDGE_TAG_PROP[0].image, r = e.EDGE_TAG_PROP[0].startOffset, i = e.EDGE_TAG_PROP[0].endOffset;
    return { type: "edgeTagProp", value: n, start: r, end: i };
  }
}
ir = /* @__PURE__ */ new WeakMap(), Xt = /* @__PURE__ */ new WeakSet(), sr = function(t) {
  return ka(this, ir).has(t);
};
const Gt = new Ea(), Sd = new Id();
function Nr(t) {
  const e = vd.tokenize(t);
  Gt.input = e.tokens;
  const n = Gt.document();
  if (Gt.errors.length > 0)
    throw new Error(
      `Parsing Errors Detected: ${JSON.stringify(Gt.errors)}`
    );
  return Sd.visit(n);
}
function Ta(t) {
  Object.defineProperty(t, "__esModule", { value: !0, configurable: !0 });
}
function Mr(t, e, n, r) {
  Object.defineProperty(t, e, { get: n, set: r, enumerable: !0, configurable: !0 });
}
var ya = {};
Ta(ya);
Mr(ya, "default", () => Aa);
class Aa extends Error {
  constructor(e, n, r, i, s) {
    super(e + ":" + r + ":" + i + ": " + n), this.reason = n, this.filename = e, this.line = r, this.column = i, this.source = s;
  }
}
var _a = {};
Ta(_a);
Mr(_a, "default", () => va);
class va {
  constructor(e, n, r) {
    this.start = e, this.end = n, this.source = r;
  }
}
var Ld = {};
Mr(Ld, "CssTypes", () => b);
var b = /* @__PURE__ */ function(t) {
  return t.stylesheet = "stylesheet", t.rule = "rule", t.declaration = "declaration", t.comment = "comment", t.container = "container", t.charset = "charset", t.document = "document", t.customMedia = "custom-media", t.fontFace = "font-face", t.host = "host", t.import = "import", t.keyframes = "keyframes", t.keyframe = "keyframe", t.layer = "layer", t.media = "media", t.namespace = "namespace", t.page = "page", t.startingStyle = "starting-style", t.supports = "supports", t;
}({});
const Ra = 1e4, ji = (t, e, n) => {
  let r = n, i = Ra;
  do {
    const s = e.map((c) => t.indexOf(c, r));
    s.push(t.indexOf("\\", r));
    const a = s.filter((c) => c !== -1);
    if (a.length === 0) return -1;
    const o = Math.min(...a);
    if (t[o] === "\\")
      r = o + 2, i--;
    else return o;
  } while (i > 0);
  throw new Error("Too many escaping");
}, Pr = (t, e, n) => {
  let r = n, i = Ra;
  do {
    const s = e.map((u) => t.indexOf(u, r));
    s.push(t.indexOf("(", r)), s.push(t.indexOf('"', r)), s.push(t.indexOf("'", r)), s.push(t.indexOf("\\", r));
    const a = s.filter((u) => u !== -1);
    if (a.length === 0) return -1;
    const o = Math.min(...a);
    switch (t[o]) {
      case "\\":
        r = o + 2;
        break;
      case "(":
        {
          const u = Pr(t, [
            ")"
          ], o + 1);
          if (u === -1) return -1;
          r = u + 1;
        }
        break;
      case '"':
        {
          const u = ji(t, [
            '"'
          ], o + 1);
          if (u === -1) return -1;
          r = u + 1;
        }
        break;
      case "'":
        {
          const u = ji(t, [
            "'"
          ], o + 1);
          if (u === -1) return -1;
          r = u + 1;
        }
        break;
      default:
        return o;
    }
    i--;
  } while (i > 0);
  throw new Error("Too many escaping");
}, kd = (t, e) => {
  const n = [];
  let r = 0;
  for (; r < t.length; ) {
    const i = Pr(t, e, r);
    if (i === -1)
      return n.push(t.substring(r)), n;
    n.push(t.substring(r, i)), r = i + 1;
  }
  return n;
}, wn = /\/\*[^]*?(?:\*\/|$)/g, Cd = (t, e) => {
  e = e || {};
  let n = 1, r = 1;
  function i(g) {
    const E = g.match(/\n/g);
    E && (n += E.length);
    const k = g.lastIndexOf(`
`);
    r = ~k ? g.length - k : r + g.length;
  }
  function s() {
    const g = {
      line: n,
      column: r
    };
    return function(E) {
      return E.position = new va(g, {
        line: n,
        column: r
      }, (e == null ? void 0 : e.source) || ""), T(), E;
    };
  }
  const a = [];
  function o(g) {
    const E = new Aa((e == null ? void 0 : e.source) || "", g, n, r, t);
    if (e != null && e.silent) a.push(E);
    else throw E;
  }
  function c() {
    const g = h();
    return {
      type: b.stylesheet,
      stylesheet: {
        source: e == null ? void 0 : e.source,
        rules: g,
        parsingErrors: a
      }
    };
  }
  function u() {
    const g = /^{\s*/.exec(t);
    return g ? (f(g), !0) : !1;
  }
  function l() {
    const g = /^}/.exec(t);
    return g ? (f(g), !0) : !1;
  }
  function h() {
    let g;
    const E = [];
    for (T(), d(E); t.length && t.charAt(0) !== "}" && (g = Ye() || wt()); ) g && (E.push(g), d(E));
    return E;
  }
  function f(g) {
    const E = g[0];
    return i(E), t = t.slice(E.length), g;
  }
  function T() {
    const g = /^\s*/.exec(t);
    g && f(g);
  }
  function d(g) {
    let E;
    for (g = g || []; E = _(); ) E && g.push(E);
    return g;
  }
  function _() {
    const g = s();
    if (t.charAt(0) !== "/" || t.charAt(1) !== "*") return;
    const E = /^\/\*[^]*?\*\//.exec(t);
    return E ? (f(E), g({
      type: b.comment,
      comment: E[0].slice(2, -2)
    })) : o("End of comment missing");
  }
  function O() {
    const g = /^([^{]+)/.exec(t);
    if (!g) return;
    f(g);
    const E = se(g[0]).replace(wn, "");
    return kd(E, [
      ","
    ]).map((k) => se(k));
  }
  function A() {
    const g = s(), E = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/.exec(t);
    if (!E) return;
    f(E);
    const k = se(E[0]), C = /^:\s*/.exec(t);
    if (!C) return o("property missing ':'");
    f(C);
    let D = "";
    const P = Pr(t, [
      ";",
      "}"
    ]);
    P !== -1 && (D = t.substring(0, P), f([
      D
    ]), D = se(D).replace(wn, ""));
    const G = g({
      type: b.declaration,
      property: k.replace(wn, ""),
      value: D
    }), be = /^[;\s]*/.exec(t);
    return be && f(be), G;
  }
  function y() {
    const g = [];
    if (!u()) return o("missing '{'");
    d(g);
    let E;
    for (; E = A(); ) E && (g.push(E), d(g));
    return l() ? g : o("missing '}'");
  }
  function p() {
    let g;
    const E = [], k = s();
    for (; g = /^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/.exec(t); ) {
      const C = f(g);
      E.push(C[1]);
      const D = /^,\s*/.exec(t);
      D && f(D);
    }
    if (E.length)
      return k({
        type: b.keyframe,
        values: E,
        declarations: y() || []
      });
  }
  function m() {
    const g = s(), E = /^@([-\w]+)?keyframes\s*/.exec(t);
    if (!E) return;
    const k = f(E)[1], C = /^([-\w]+)\s*/.exec(t);
    if (!C) return o("@keyframes missing name");
    const D = f(C)[1];
    if (!u()) return o("@keyframes missing '{'");
    let P, G = d();
    for (; P = p(); )
      G.push(P), G = G.concat(d());
    return l() ? g({
      type: b.keyframes,
      name: D,
      vendor: k,
      keyframes: G
    }) : o("@keyframes missing '}'");
  }
  function L() {
    const g = s(), E = /^@supports *([^{]+)/.exec(t);
    if (!E) return;
    const k = se(f(E)[1]);
    if (!u()) return o("@supports missing '{'");
    const C = d().concat(h());
    return l() ? g({
      type: b.supports,
      supports: k,
      rules: C
    }) : o("@supports missing '}'");
  }
  function z() {
    const g = s(), E = /^@host\s*/.exec(t);
    if (!E) return;
    if (f(E), !u()) return o("@host missing '{'");
    const k = d().concat(h());
    return l() ? g({
      type: b.host,
      rules: k
    }) : o("@host missing '}'");
  }
  function ie() {
    const g = s(), E = /^@container *([^{]+)/.exec(t);
    if (!E) return;
    const k = se(f(E)[1]);
    if (!u()) return o("@container missing '{'");
    const C = d().concat(h());
    return l() ? g({
      type: b.container,
      container: k,
      rules: C
    }) : o("@container missing '}'");
  }
  function ye() {
    const g = s(), E = /^@layer *([^{;@]+)/.exec(t);
    if (!E) return;
    const k = se(f(E)[1]);
    if (!u()) {
      const D = /^[;\s]*/.exec(t);
      return D && f(D), g({
        type: b.layer,
        layer: k
      });
    }
    const C = d().concat(h());
    return l() ? g({
      type: b.layer,
      layer: k,
      rules: C
    }) : o("@layer missing '}'");
  }
  function He() {
    const g = s(), E = /^@media *([^{]+)/.exec(t);
    if (!E) return;
    const k = se(f(E)[1]);
    if (!u()) return o("@media missing '{'");
    const C = d().concat(h());
    return l() ? g({
      type: b.media,
      media: k,
      rules: C
    }) : o("@media missing '}'");
  }
  function Ae() {
    const g = s(), E = /^@custom-media\s+(--\S+)\s+([^{;\s][^{;]*);/.exec(t);
    if (!E) return;
    const k = f(E);
    return g({
      type: b.customMedia,
      name: se(k[1]),
      media: se(k[2])
    });
  }
  function We() {
    const g = s(), E = /^@page */.exec(t);
    if (!E) return;
    f(E);
    const k = O() || [];
    if (!u()) return o("@page missing '{'");
    let C = d(), D;
    for (; D = A(); )
      C.push(D), C = C.concat(d());
    return l() ? g({
      type: b.page,
      selectors: k,
      declarations: C
    }) : o("@page missing '}'");
  }
  function In() {
    const g = s(), E = /^@([-\w]+)?document *([^{]+)/.exec(t);
    if (!E) return;
    const k = f(E), C = se(k[1]), D = se(k[2]);
    if (!u()) return o("@document missing '{'");
    const P = d().concat(h());
    return l() ? g({
      type: b.document,
      document: D,
      vendor: C,
      rules: P
    }) : o("@document missing '}'");
  }
  function dt() {
    const g = s(), E = /^@font-face\s*/.exec(t);
    if (!E) return;
    if (f(E), !u()) return o("@font-face missing '{'");
    let k = d(), C;
    for (; C = A(); )
      k.push(C), k = k.concat(d());
    return l() ? g({
      type: b.fontFace,
      declarations: k
    }) : o("@font-face missing '}'");
  }
  function rt() {
    const g = s(), E = /^@starting-style\s*/.exec(t);
    if (!E) return;
    if (f(E), !u()) return o("@starting-style missing '{'");
    const k = d().concat(h());
    return l() ? g({
      type: b.startingStyle,
      rules: k
    }) : o("@starting-style missing '}'");
  }
  const _e = st("import"), ze = st("charset"), it = st("namespace");
  function st(g) {
    const E = new RegExp("^@" + g + `\\s*((?::?[^;'"]|"(?:\\\\"|[^"])*?"|'(?:\\\\'|[^'])*?')+)(?:;|$)`);
    return function() {
      const k = s(), C = E.exec(t);
      if (!C) return;
      const D = f(C), P = {
        type: g
      };
      return P[g] = D[1].trim(), k(P);
    };
  }
  function Ye() {
    if (t[0] === "@")
      return m() || He() || Ae() || L() || _e() || ze() || it() || In() || We() || z() || dt() || ie() || rt() || ye();
  }
  function wt() {
    const g = s(), E = O();
    return E ? (d(), g({
      type: b.rule,
      selectors: E,
      declarations: y() || []
    })) : o("selector missing");
  }
  return ar(c());
};
function se(t) {
  return t ? t.trim() : "";
}
function ar(t, e) {
  const n = t && typeof t.type == "string", r = n ? t : e;
  for (const i in t) {
    const s = t[i];
    Array.isArray(s) ? s.forEach((a) => {
      ar(a, r);
    }) : s && typeof s == "object" && ar(s, r);
  }
  return n && Object.defineProperty(t, "parent", {
    configurable: !0,
    writable: !0,
    enumerable: !1,
    value: e || null
  }), t;
}
var bd = Cd;
class Nd {
  constructor(e) {
    this.level = 0, this.indentation = "  ", this.compress = !1, typeof (e == null ? void 0 : e.indent) == "string" && (this.indentation = e == null ? void 0 : e.indent), e != null && e.compress && (this.compress = !0);
  }
  // We disable no-unused-vars for _position. We keep position for potential reintroduction of source-map
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  emit(e, n) {
    return e;
  }
  /**
  * Increase, decrease or return current indentation.
  */
  indent(e) {
    return this.level = this.level || 1, e ? (this.level += e, "") : Array(this.level).join(this.indentation);
  }
  visit(e) {
    switch (e.type) {
      case b.stylesheet:
        return this.stylesheet(e);
      case b.rule:
        return this.rule(e);
      case b.declaration:
        return this.declaration(e);
      case b.comment:
        return this.comment(e);
      case b.container:
        return this.container(e);
      case b.charset:
        return this.charset(e);
      case b.document:
        return this.document(e);
      case b.customMedia:
        return this.customMedia(e);
      case b.fontFace:
        return this.fontFace(e);
      case b.host:
        return this.host(e);
      case b.import:
        return this.import(e);
      case b.keyframes:
        return this.keyframes(e);
      case b.keyframe:
        return this.keyframe(e);
      case b.layer:
        return this.layer(e);
      case b.media:
        return this.media(e);
      case b.namespace:
        return this.namespace(e);
      case b.page:
        return this.page(e);
      case b.startingStyle:
        return this.startingStyle(e);
      case b.supports:
        return this.supports(e);
    }
  }
  mapVisit(e, n) {
    let r = "";
    n = n || "";
    for (let i = 0, s = e.length; i < s; i++)
      r += this.visit(e[i]), n && i < s - 1 && (r += this.emit(n));
    return r;
  }
  compile(e) {
    return this.compress ? e.stylesheet.rules.map(this.visit, this).join("") : this.stylesheet(e);
  }
  /**
  * Visit stylesheet node.
  */
  stylesheet(e) {
    return this.mapVisit(e.stylesheet.rules, `

`);
  }
  /**
  * Visit comment node.
  */
  comment(e) {
    return this.compress ? this.emit("", e.position) : this.emit(this.indent() + "/*" + e.comment + "*/", e.position);
  }
  /**
  * Visit container node.
  */
  container(e) {
    return this.compress ? this.emit("@container " + e.container, e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit(this.indent() + "@container " + e.container, e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(`
` + this.indent(-1) + this.indent() + "}");
  }
  /**
  * Visit container node.
  */
  layer(e) {
    return this.compress ? this.emit("@layer " + e.layer, e.position) + (e.rules ? this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : ";") : this.emit(this.indent() + "@layer " + e.layer, e.position) + (e.rules ? this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(`
` + this.indent(-1) + this.indent() + "}") : ";");
  }
  /**
  * Visit import node.
  */
  import(e) {
    return this.emit("@import " + e.import + ";", e.position);
  }
  /**
  * Visit media node.
  */
  media(e) {
    return this.compress ? this.emit("@media " + e.media, e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit(this.indent() + "@media " + e.media, e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(`
` + this.indent(-1) + this.indent() + "}");
  }
  /**
  * Visit document node.
  */
  document(e) {
    const n = "@" + (e.vendor || "") + "document " + e.document;
    return this.compress ? this.emit(n, e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit(n, e.position) + this.emit(`  {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(this.indent(-1) + `
}`);
  }
  /**
  * Visit charset node.
  */
  charset(e) {
    return this.emit("@charset " + e.charset + ";", e.position);
  }
  /**
  * Visit namespace node.
  */
  namespace(e) {
    return this.emit("@namespace " + e.namespace + ";", e.position);
  }
  /**
  * Visit container node.
  */
  startingStyle(e) {
    return this.compress ? this.emit("@starting-style", e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit(this.indent() + "@starting-style", e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(`
` + this.indent(-1) + this.indent() + "}");
  }
  /**
  * Visit supports node.
  */
  supports(e) {
    return this.compress ? this.emit("@supports " + e.supports, e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit(this.indent() + "@supports " + e.supports, e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(`
` + this.indent(-1) + this.indent() + "}");
  }
  /**
  * Visit keyframes node.
  */
  keyframes(e) {
    return this.compress ? this.emit("@" + (e.vendor || "") + "keyframes " + e.name, e.position) + this.emit("{") + this.mapVisit(e.keyframes) + this.emit("}") : this.emit("@" + (e.vendor || "") + "keyframes " + e.name, e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.keyframes, `
`) + this.emit(this.indent(-1) + "}");
  }
  /**
  * Visit keyframe node.
  */
  keyframe(e) {
    const n = e.declarations;
    return this.compress ? this.emit(e.values.join(","), e.position) + this.emit("{") + this.mapVisit(n) + this.emit("}") : this.emit(this.indent()) + this.emit(e.values.join(", "), e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(n, `
`) + this.emit(this.indent(-1) + `
` + this.indent() + `}
`);
  }
  /**
  * Visit page node.
  */
  page(e) {
    if (this.compress) {
      const r = e.selectors.length ? e.selectors.join(", ") : "";
      return this.emit("@page " + r, e.position) + this.emit("{") + this.mapVisit(e.declarations) + this.emit("}");
    }
    const n = e.selectors.length ? e.selectors.join(", ") + " " : "";
    return this.emit("@page " + n, e.position) + this.emit(`{
`) + this.emit(this.indent(1)) + this.mapVisit(e.declarations, `
`) + this.emit(this.indent(-1)) + this.emit(`
}`);
  }
  /**
  * Visit font-face node.
  */
  fontFace(e) {
    return this.compress ? this.emit("@font-face", e.position) + this.emit("{") + this.mapVisit(e.declarations) + this.emit("}") : this.emit("@font-face ", e.position) + this.emit(`{
`) + this.emit(this.indent(1)) + this.mapVisit(e.declarations, `
`) + this.emit(this.indent(-1)) + this.emit(`
}`);
  }
  /**
  * Visit host node.
  */
  host(e) {
    return this.compress ? this.emit("@host", e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit("@host", e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(this.indent(-1) + `
}`);
  }
  /**
  * Visit custom-media node.
  */
  customMedia(e) {
    return this.emit("@custom-media " + e.name + " " + e.media + ";", e.position);
  }
  /**
  * Visit rule node.
  */
  rule(e) {
    const n = e.declarations;
    if (!n.length) return "";
    if (this.compress) return this.emit(e.selectors.join(","), e.position) + this.emit("{") + this.mapVisit(n) + this.emit("}");
    const r = this.indent();
    return this.emit(e.selectors.map((i) => r + i).join(`,
`), e.position) + this.emit(` {
`) + this.emit(this.indent(1)) + this.mapVisit(n, `
`) + this.emit(this.indent(-1)) + this.emit(`
` + this.indent() + "}");
  }
  /**
  * Visit declaration node.
  */
  declaration(e) {
    return this.compress ? this.emit(e.property + ":" + e.value, e.position) + this.emit(";") : e.property === "grid-template-areas" ? this.emit(this.indent()) + this.emit(e.property + ": " + e.value.split(`
`).join(`
`.padEnd(22) + this.indent()), e.position) + this.emit(";") : this.emit(this.indent()) + this.emit(e.property + ": " + e.value, e.position) + this.emit(";");
  }
}
var Md = Nd, Pd = (t, e) => new Md(e || {}).compile(t);
const xd = bd, wd = Pd;
var Gi = {
  parse: xd,
  stringify: wd
};
const Ud = 2;
let Un = 0;
function Dd(t) {
  return t.type !== "linebreak" ? (Un = 0, !0) : (Un++, Un <= Ud);
}
function Fd(t) {
  return t.replace(/{{--(?![\s\n\r\t])/g, "{{-- ").replace(new RegExp("(?<![\\s\\n\\r\\t])--}}", "g"), " --}}");
}
function Dn(t) {
  const e = /{{{[^{}]*}}}/g, n = "__TRIPLE_CURLY__", r = [];
  return t = t.replace(e, (i) => {
    const s = `${n}${r.length}`;
    return r.push(i), s;
  }), t = t.replace(/{{\s*/g, "{{ ").replace(/\s*}}/g, " }}"), r.forEach((i, s) => {
    t = t.replace(`${n}${s}`, i);
  }), t;
}
function Fn(t) {
  return t.replace(/{{{\s*/g, "{{{ ").replace(/\s*}}}/g, " }}}");
}
function $d(t, e, n, r, i, s) {
  const a = /<style\b[^>]*>([\s\S]*?)<\/style>/gi, o = /{{.*?}}/g, c = /{{{.*?}}}/g, u = /@(?!media|keyframes|supports|font-face|viewport|counter-style|page|document|font-feature-values)(?:!?\w+(?:\.\w+)*)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?[\s\S]*?@end/g, l = /@(assign|!component|debugger|eval|include|includeIf|inject|stack|svg|let|newError|vite|inertia|dd|dump)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?/g;
  return t.value.replace(a, (f, T) => {
    let d = [], _ = 0;
    T = T.replace(
      c,
      (p) => {
        const m = `__SAFE_MUSTACHE_TAG_${_++}__;`;
        return d.push(p), m;
      }
    ), T = T.replace(
      o,
      (p) => {
        const m = `__MUSTACHE_TAG_${_++}__;`;
        return d.push(p), m;
      }
    ), T = T.replace(
      u,
      (p) => {
        const m = `/*__EDGE_TAG_BLOCK_${_++}__*/`;
        return d.push(p), m;
      }
    ), T = T.replace(
      l,
      (p) => {
        const m = `/*__SINGLE_EDGE_TAG_${_++}__*/`;
        return d.push(p), m;
      }
    );
    const O = Gi.parse(T), A = Gi.stringify(O, { indent: r });
    return `${e}<style>
${A.split(`
`).map((p) => `${n}${p}`).join(`
`)}
${e}</style>`.replace(/\/\*__EDGE_TAG_BLOCK_\d+__\*\//g, (p) => {
      const m = d[parseInt(p.match(/\d+/)[0], 10)], L = new Nr(m);
      return new xr(
        {
          ...i
        },
        s + 2
      ).handlePrint(L).trim();
    }).replace(/__MUSTACHE_TAG_\d+__;/g, (p) => d[parseInt(p.match(/\d+/)[0], 10)]).replace(/__SAFE_MUSTACHE_TAG_\d+__;/g, (p) => d[parseInt(p.match(/\d+/)[0], 10)]).replace(/\/\*__SINGLE_EDGE_TAG_\d+__\*\//g, (p) => d[parseInt(p.match(/\d+/)[0], 10)]);
  });
}
function jd(t, e, n, r, i, s) {
  const a = /<script\b([^>]*)>([\s\S]*?)<\/script>/i, o = /{{.*?}}/g, c = /{{{.*?}}}/g, u = /@(!?\w+(?:\.\w+)*)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?[\s\S]*?@end/g, l = /@(assign|!component|debugger|eval|include|includeIf|inject|stack|svg|let|newError|vite|inertia|dd|dump)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?/g, h = t.value.match(a);
  if (!h)
    throw new Error("Invalid <script> tag format");
  const [f, T, d] = h;
  let _ = [], O = 0, A = d.replace(c, (m) => {
    const L = `__SAFE_MUSTACHE_TAG_${O++}__`;
    return _.push(m), L;
  }).replace(o, (m) => {
    const L = `__MUSTACHE_TAG_${O++}__`;
    return _.push(m), L;
  }).replace(u, (m) => {
    const L = `/*__EDGE_TAG_BLOCK_${O++}__*/`;
    return _.push(m), L;
  }).replace(l, (m) => {
    const L = `/*__SINGLE_EDGE_TAG_${O++}__*/`;
    return _.push(m), L;
  });
  const y = La.minify(
    {
      "file1.js": A
    },
    {
      compress: !1,
      keep_fnames: !0,
      mangle: !1,
      output: {
        beautify: !0,
        comments: "all",
        indent_level: e
      }
    }
  );
  if (y.error)
    throw new Error(JSON.stringify(y.error));
  const p = y.code.replace(/\/\*__EDGE_TAG_BLOCK_\d+__\*\//g, (m) => {
    const L = parseInt(m.match(/\d+/)[0], 10), z = _[L], ie = new Nr(z);
    return new xr(
      {
        ...i
      },
      0
    ).handlePrint(ie);
  }).replace(/\/\*__SINGLE_EDGE_TAG_\d+__\*\//g, (m) => {
    const L = parseInt(m.match(/\d+/)[0], 10);
    return _[L];
  }).replace(/__SAFE_MUSTACHE_TAG_\d+__/g, (m) => {
    const L = parseInt(m.match(/\d+/)[0], 10);
    return _[L];
  }).replace(/__MUSTACHE_TAG_\d+__/g, (m) => {
    const L = parseInt(m.match(/\d+/)[0], 10);
    return _[L];
  });
  return `${n}<script${T}>
${p.split(`
`).map((m) => `${r}${m}`).join(`
`)}
${n}<\/script>`;
}
function Oa(t) {
  const e = t.match(/^\s*/);
  return e ? e[0].length : 0;
}
function Gd(t, e, n) {
  return `${e}${t.value.split(`
`).map((r, i) => {
    if (i === 0)
      return `${r.trim()}`;
    if (i === t.value.split(`
`).length - 1)
      return `${e}${r.trim()}`;
    const s = Oa(r);
    return `${" ".repeat(Math.max(e.length, s))}${r.trim()}`;
  }).join(`
`).replace(/[^\S\r\n]+$/g, "")}${n ? `
` : ""}`;
}
class xr {
  constructor(e, n = void 0) {
    Pe(this, "options");
    Pe(this, "level");
    Pe(this, "skipLevelOverride");
    Pe(this, "useTabs");
    Pe(this, "printWidth");
    Pe(this, "tabWidth");
    Pe(this, "singleAttributePerLine");
    Pe(this, "inlineTags", /* @__PURE__ */ new Set([
      "a",
      "abbr",
      "acronym",
      "b",
      "bdi",
      "bdo",
      "big",
      "br",
      "button",
      "cite",
      "code",
      "data",
      "dfn",
      "em",
      "i",
      "img",
      "input",
      "kbd",
      "label",
      "mark",
      "meter",
      "q",
      "ruby",
      "rp",
      "rt",
      "s",
      "samp",
      "select",
      "small",
      "span",
      "strong",
      "sub",
      "sup",
      "textarea",
      "time",
      "u",
      "var",
      "wbr",
      "feFuncR",
      "feFuncG",
      "feFuncB",
      "feFuncA"
    ]));
    this.options = e, this.level = n ?? 0, this.skipLevelOverride = !!n, this.useTabs = e.useTabs ?? !1, this.printWidth = e.printWidth ?? 80, this.tabWidth = e.tabWidth ?? 4, this.singleAttributePerLine = e.singleAttributePerLine ?? !1;
  }
  isInlineTag(e) {
    return this.inlineTags.has(e);
  }
  getIndent(e, n = "none") {
    const r = e !== void 0 ? Math.max(e, 0) : this.level;
    return this.adjustIndentLevel(n), `${this.useTabs ? "	" : " ".repeat(this.tabWidth * r)}`;
  }
  adjustIndentLevel(e) {
    e === "increase" ? this.level++ : e === "decrease" && this.level--;
  }
  formatMultilineValue(e, n, r = !0) {
    return e.split(`
`).map((i, s, a) => {
      if (s === 0)
        return `${r ? n : ""}${i.trim()}`;
      if (s === a.length - 1) return `${n}${i.trim()}`;
      const o = Oa(i);
      return `${" ".repeat(Math.max(n.length, o))}${i.trim()}`;
    }).join(`
`);
  }
  formatAttributes(e, n = "") {
    return e.map(
      (r) => r.attributeValue ? `${n}${r.attributeName}=${Fn(Dn(r.attributeValue)).trim()}` : `${n}${r.attributeName.trim()}`
    ).join(n ? `
` : " ");
  }
  formatEdgeSafeMustacheProps(e, n = "") {
    return e.map(
      (r) => `${n}${Fn(r.value).trim()}`
    ).join(n ? `
` : " ");
  }
  formatEdgeMustacheProps(e, n = "") {
    return e.map((r) => `${n}${Dn(r.value).trim()}`).join(n ? `
` : " ");
  }
  formatEdgeTagProps(e, n = "") {
    return e.map((r) => `${n}${r.value.trim()}`).join(n ? `
` : " ");
  }
  formatComments(e, n = "") {
    return e.map((r) => `${n}${r.value}`).join(n ? `
` : " ");
  }
  printDocumentNode(e) {
    return this.skipLevelOverride || (this.level = 0), e.children.filter(Dd).map(
      (n, r, i) => this.handlePrint(n, i[r - 1], i[r + 1])
    ).join("");
  }
  printDTDNode(e) {
    return `${this.getIndent()}${e.value}`;
  }
  printStandardNode(e) {
    const n = e.type === "scriptlet";
    return this.formatMultilineValue(
      e.value,
      n ? "" : this.getIndent()
    );
  }
  printScriptElementNode(e) {
    return jd(
      e,
      this.tabWidth,
      this.getIndent(),
      this.getIndent(this.level + 1),
      this.options,
      this.level
    );
  }
  printStyleElementNode(e) {
    return $d(
      e,
      this.getIndent(),
      this.getIndent(this.level + 1),
      this.getIndent(1),
      this.options,
      this.level
    );
  }
  printEdgeComment(e) {
    return this.formatMultilineValue(
      Fd(e.value.trim()),
      this.getIndent()
    );
  }
  printEdgeMustacheNode(e, n, r) {
    const i = !((n == null ? void 0 : n.type) === "htmlText" || (n == null ? void 0 : n.type) === "edgeMustache" || (n == null ? void 0 : n.type) === "edgeEscapedMustache" || (n == null ? void 0 : n.type) === "edgeSafeMustache" || ((n == null ? void 0 : n.type) === "openingTag" || (n == null ? void 0 : n.type) === "voidTag" || (n == null ? void 0 : n.type) === "closingTag") && this.isInlineTag(n.tagName)), s = !((r == null ? void 0 : r.type) === "htmlText" || (r == null ? void 0 : r.type) === "edgeMustache" || (r == null ? void 0 : r.type) === "edgeEscapedMustache" || (r == null ? void 0 : r.type) === "edgeSafeMustache" || ((r == null ? void 0 : r.type) === "openingTag" || (r == null ? void 0 : r.type) === "voidTag" || (r == null ? void 0 : r.type) === "closingTag") && this.isInlineTag(r.tagName));
    let a = `${i ? this.getIndent() : ""}`;
    const o = e.type === "edgeSafeMustache" ? Fn(e.value) : Dn(e.value);
    return a += s ? o.replace(/[\r\n]+/g, "").trimEnd() + `
` : o, a;
  }
  printOpeningNode(e, n, r) {
    let i = this.formatAttributes(e.attributes), s = this.formatEdgeTagProps(e.edgeTagProps), a = this.formatEdgeSafeMustacheProps(
      e.edgeSafeMustaches
    ), o = this.formatEdgeMustacheProps(e.edgeMustaches), c = this.formatComments(e.comments);
    const u = `${i} ${a} ${o} ${s} ${c}`.length, l = this.getIndent(this.level + 1), h = this.getIndent(
      void 0,
      e.type === "openingTag" ? "increase" : "none"
    ), f = this.getIndent(
      e.type === "openingTag" ? this.level - 1 : this.level
    ), T = !this.isInlineTag(e.tagName) && (r == null ? void 0 : r.type) !== "linebreak", d = !(((n == null ? void 0 : n.type) === "htmlText" || (n == null ? void 0 : n.type) === "edgeMustache" || (n == null ? void 0 : n.type) === "edgeEscapedMustache" || (n == null ? void 0 : n.type) === "edgeSafeMustache") && this.isInlineTag(e.tagName));
    if (u > this.printWidth || this.singleAttributePerLine) {
      const O = e.type == "voidTag" ? "/>" : ">";
      i = this.formatAttributes(e.attributes, l), s = this.formatEdgeTagProps(e.edgeTagProps, l), a = this.formatEdgeSafeMustacheProps(
        e.edgeSafeMustaches,
        l
      ), o = this.formatEdgeMustacheProps(
        e.edgeMustaches,
        l
      ), c = this.formatComments(e.comments, l);
      const A = u - 2 > 0 ? `
${f}` : "";
      return `${d ? h : ""}<${e.tagName}${i ? `
${i}` : ""}${o ? `
${o}` : ""}${a ? `
${a}` : ""}${s ? `
${this.formatMultilineValue(s, l)}` : ""}${c ? `
${this.formatMultilineValue(c, l)}` : ""}${A}${O}${T ? `
` : ""}`;
    }
    const _ = e.type == "voidTag" ? " />" : ">";
    return `${d ? h : ""}<${e.tagName}${i ? ` ${i}` : ""}${o ? ` ${o}` : ""}${a ? ` ${a}` : ""}${s ? ` ${this.formatMultilineValue(s, "")}` : ""}${c ? ` ${this.formatMultilineValue(c, "")}` : ""}${_}${T ? `
` : ""}`;
  }
  printClosingNode(e, n, r) {
    const i = !this.isInlineTag(e.tagName) || (n == null ? void 0 : n.type) === "linebreak" || (n == null ? void 0 : n.type) === "edgeTag", s = (n == null ? void 0 : n.type) !== "linebreak" && (n == null ? void 0 : n.type) === "closingTag" && this.isInlineTag(n.tagName) && !this.isInlineTag(e.tagName), a = !this.isInlineTag(e.tagName) && (r == null ? void 0 : r.type) !== "linebreak" && !(((r == null ? void 0 : r.type) === "openingTag" || (r == null ? void 0 : r.type) === "voidTag" || (r == null ? void 0 : r.type) === "closingTag") && this.isInlineTag(r.tagName));
    return `${s ? `
` : ""}${i ? this.getIndent(this.level - 1, "decrease") : this.getIndent(0, "decrease")}</${e.tagName}>${a ? `
` : ""}`;
  }
  printEdgeTagNode(e, n) {
    var a, o;
    let r = "none", i = this.level;
    e.value.includes("@end") ? (r = "decrease", i--) : e.value.includes("@else") ? i-- : e.value.includes("@!") || e.value.includes("@let") || e.value.includes("@svg") || e.value.includes("@assign") || e.value.includes("@inject") || e.value.includes("@eval") || e.value.includes("@debugger") || e.value.includes("@newError") || e.value.includes("@vite") || e.value.includes("@inertia") || e.value.includes("@stack") || e.value.includes("@dd") || e.value.includes("@dump") || (a = e.value.match(/^@include\(.*/)) != null && a.length || (o = e.value.match(/^@includeIf\(.*/)) != null && o.length || !e.value.includes("(") ? r = "none" : r = "increase";
    const s = (n == null ? void 0 : n.type) !== "linebreak" && !e.value.includes(`
`);
    return Gd(
      e,
      this.getIndent(i, r),
      s
    );
  }
  printHtmlTextNode(e, n, r) {
    const i = !((n == null ? void 0 : n.type) === "scriptlet" || (n == null ? void 0 : n.type) === "edgeMustache" || (n == null ? void 0 : n.type) === "edgeSafeMustache" || (n == null ? void 0 : n.type) === "edgeEscapedMustache" || ((n == null ? void 0 : n.type) === "openingTag" || (n == null ? void 0 : n.type) === "voidTag" || (n == null ? void 0 : n.type) === "closingTag") && this.isInlineTag(n.tagName)), s = !((r == null ? void 0 : r.type) === "edgeMustache" || (r == null ? void 0 : r.type) === "edgeSafeMustache" || (r == null ? void 0 : r.type) === "edgeEscapedMustache" || (r == null ? void 0 : r.type) === "htmlText" || ((r == null ? void 0 : r.type) === "openingTag" || (r == null ? void 0 : r.type) === "voidTag" || (r == null ? void 0 : r.type) === "closingTag") && this.isInlineTag(r.tagName) || (r == null ? void 0 : r.type) === "scriptlet"), a = i ? this.getIndent() + e.value : e.value;
    return s ? `${a.trimEnd()}
` : a;
  }
  printLineBreak(e) {
    return e.value;
  }
  handlePrint(e, n = void 0, r = void 0) {
    switch (e.type) {
      case "document":
        return this.printDocumentNode(e);
      case "dtd":
        return this.printDTDNode(e);
      case "htmlComment":
      case "htmlConditionalComment":
      case "cdata":
      case "scriptlet":
        return this.printStandardNode(e);
      case "scriptElement":
        return this.printScriptElementNode(e);
      case "styleElement":
        return this.printStyleElementNode(e);
      case "edgeComment":
        return this.printEdgeComment(e);
      case "edgeMustache":
      case "edgeEscapedMustache":
      case "edgeSafeMustache":
        return this.printEdgeMustacheNode(e, n, r);
      case "openingTag":
      case "voidTag":
        return this.printOpeningNode(e, n, r);
      case "closingTag":
        return this.printClosingNode(e, n, r);
      case "edgeTag":
        return this.printEdgeTagNode(e, r);
      case "htmlText":
        return this.printHtmlTextNode(e, n, r);
      case "linebreak":
        return this.printLineBreak(e);
      default:
        return "";
    }
  }
}
function Bd(t, e) {
  const n = t.getNode();
  return new xr(e).handlePrint(n);
}
const Hd = [
  {
    name: "EdgeJS",
    parsers: ["edgejs"],
    extensions: [".edge"],
    tmScope: "text.html.edge",
    aceMode: "html",
    linguistLanguageId: 460509620,
    vscodeLanguageIds: ["edge"]
  }
], Wd = {
  edgejs: {
    parse(t) {
      return Nr(t);
    },
    astFormat: "edgejs",
    locStart(t) {
      return t.start;
    },
    locEnd(t) {
      return t.end;
    }
  }
}, zd = {
  edgejs: {
    print: Bd
  }
}, Yd = {
  useTabs: !1,
  tabWidth: 4,
  printWidth: 80,
  singleAttributePerLine: !1
}, Xd = {};
export {
  Yd as defaultOptions,
  Hd as languages,
  Xd as options,
  Wd as parsers,
  zd as printers
};
